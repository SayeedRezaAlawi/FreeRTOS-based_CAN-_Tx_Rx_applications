ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB79:
  26              		.file 1 "Source\\bsw\\FreeRTOS\\src\\tasks.c"
   1:Source\bsw\FreeRTOS\src/tasks.c **** /*
   2:Source\bsw\FreeRTOS\src/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Source\bsw\FreeRTOS\src/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source\bsw\FreeRTOS\src/tasks.c ****  *
   5:Source\bsw\FreeRTOS\src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source\bsw\FreeRTOS\src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source\bsw\FreeRTOS\src/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Source\bsw\FreeRTOS\src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source\bsw\FreeRTOS\src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source\bsw\FreeRTOS\src/tasks.c ****  * subject to the following conditions:
  11:Source\bsw\FreeRTOS\src/tasks.c ****  *
  12:Source\bsw\FreeRTOS\src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source\bsw\FreeRTOS\src/tasks.c ****  * copies or substantial portions of the Software.
  14:Source\bsw\FreeRTOS\src/tasks.c ****  *
  15:Source\bsw\FreeRTOS\src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source\bsw\FreeRTOS\src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source\bsw\FreeRTOS\src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source\bsw\FreeRTOS\src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source\bsw\FreeRTOS\src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source\bsw\FreeRTOS\src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source\bsw\FreeRTOS\src/tasks.c ****  *
  22:Source\bsw\FreeRTOS\src/tasks.c ****  * http://www.FreeRTOS.org
  23:Source\bsw\FreeRTOS\src/tasks.c ****  * http://aws.amazon.com/freertos
  24:Source\bsw\FreeRTOS\src/tasks.c ****  *
  25:Source\bsw\FreeRTOS\src/tasks.c ****  * 1 tab == 4 spaces!
  26:Source\bsw\FreeRTOS\src/tasks.c ****  */
  27:Source\bsw\FreeRTOS\src/tasks.c **** 
  28:Source\bsw\FreeRTOS\src/tasks.c **** /* Standard includes. */
  29:Source\bsw\FreeRTOS\src/tasks.c **** #include <stdlib.h>
  30:Source\bsw\FreeRTOS\src/tasks.c **** #include <string.h>
  31:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 2


  32:Source\bsw\FreeRTOS\src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Source\bsw\FreeRTOS\src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Source\bsw\FreeRTOS\src/tasks.c **** task.h is included from an application file. */
  35:Source\bsw\FreeRTOS\src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Source\bsw\FreeRTOS\src/tasks.c **** 
  37:Source\bsw\FreeRTOS\src/tasks.c **** /* FreeRTOS includes. */
  38:Source\bsw\FreeRTOS\src/tasks.c **** #include "FreeRTOS.h"
  39:Source\bsw\FreeRTOS\src/tasks.c **** #include "task.h"
  40:Source\bsw\FreeRTOS\src/tasks.c **** #include "timers.h"
  41:Source\bsw\FreeRTOS\src/tasks.c **** #include "stack_macros.h"
  42:Source\bsw\FreeRTOS\src/tasks.c **** 
  43:Source\bsw\FreeRTOS\src/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Source\bsw\FreeRTOS\src/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Source\bsw\FreeRTOS\src/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Source\bsw\FreeRTOS\src/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Source\bsw\FreeRTOS\src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Source\bsw\FreeRTOS\src/tasks.c **** 
  49:Source\bsw\FreeRTOS\src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Source\bsw\FreeRTOS\src/tasks.c **** functions but without including stdio.h here. */
  51:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Source\bsw\FreeRTOS\src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Source\bsw\FreeRTOS\src/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Source\bsw\FreeRTOS\src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Source\bsw\FreeRTOS\src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Source\bsw\FreeRTOS\src/tasks.c **** 	#include <stdio.h>
  57:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Source\bsw\FreeRTOS\src/tasks.c **** 
  59:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Source\bsw\FreeRTOS\src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Source\bsw\FreeRTOS\src/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Source\bsw\FreeRTOS\src/tasks.c **** #else
  64:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Source\bsw\FreeRTOS\src/tasks.c **** #endif
  66:Source\bsw\FreeRTOS\src/tasks.c **** 
  67:Source\bsw\FreeRTOS\src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Source\bsw\FreeRTOS\src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Source\bsw\FreeRTOS\src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Source\bsw\FreeRTOS\src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Source\bsw\FreeRTOS\src/tasks.c **** 
  72:Source\bsw\FreeRTOS\src/tasks.c **** /*
  73:Source\bsw\FreeRTOS\src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Source\bsw\FreeRTOS\src/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Source\bsw\FreeRTOS\src/tasks.c ****  */
  76:Source\bsw\FreeRTOS\src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Source\bsw\FreeRTOS\src/tasks.c **** 
  78:Source\bsw\FreeRTOS\src/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Source\bsw\FreeRTOS\src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Source\bsw\FreeRTOS\src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Source\bsw\FreeRTOS\src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Source\bsw\FreeRTOS\src/tasks.c **** 
  83:Source\bsw\FreeRTOS\src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Source\bsw\FreeRTOS\src/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Source\bsw\FreeRTOS\src/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Source\bsw\FreeRTOS\src/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Source\bsw\FreeRTOS\src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Source\bsw\FreeRTOS\src/tasks.c **** #else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 3


  89:Source\bsw\FreeRTOS\src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Source\bsw\FreeRTOS\src/tasks.c **** #endif
  91:Source\bsw\FreeRTOS\src/tasks.c **** 
  92:Source\bsw\FreeRTOS\src/tasks.c **** /*
  93:Source\bsw\FreeRTOS\src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Source\bsw\FreeRTOS\src/tasks.c ****  */
  95:Source\bsw\FreeRTOS\src/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Source\bsw\FreeRTOS\src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Source\bsw\FreeRTOS\src/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Source\bsw\FreeRTOS\src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Source\bsw\FreeRTOS\src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Source\bsw\FreeRTOS\src/tasks.c **** 
 101:Source\bsw\FreeRTOS\src/tasks.c **** /*
 102:Source\bsw\FreeRTOS\src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Source\bsw\FreeRTOS\src/tasks.c ****  * global, rather than file scope.
 104:Source\bsw\FreeRTOS\src/tasks.c ****  */
 105:Source\bsw\FreeRTOS\src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Source\bsw\FreeRTOS\src/tasks.c **** 	#define static
 107:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 108:Source\bsw\FreeRTOS\src/tasks.c **** 
 109:Source\bsw\FreeRTOS\src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Source\bsw\FreeRTOS\src/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Source\bsw\FreeRTOS\src/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Source\bsw\FreeRTOS\src/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 114:Source\bsw\FreeRTOS\src/tasks.c **** 
 115:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Source\bsw\FreeRTOS\src/tasks.c **** 
 117:Source\bsw\FreeRTOS\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Source\bsw\FreeRTOS\src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Source\bsw\FreeRTOS\src/tasks.c **** 	microcontroller architecture. */
 120:Source\bsw\FreeRTOS\src/tasks.c **** 
 121:Source\bsw\FreeRTOS\src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Source\bsw\FreeRTOS\src/tasks.c **** 	state task. */
 123:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Source\bsw\FreeRTOS\src/tasks.c **** 	{																									\
 125:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Source\bsw\FreeRTOS\src/tasks.c **** 		{																								\
 127:Source\bsw\FreeRTOS\src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Source\bsw\FreeRTOS\src/tasks.c **** 		}																								\
 129:Source\bsw\FreeRTOS\src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Source\bsw\FreeRTOS\src/tasks.c **** 
 131:Source\bsw\FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Source\bsw\FreeRTOS\src/tasks.c **** 
 133:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Source\bsw\FreeRTOS\src/tasks.c **** 	{																									\
 135:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Source\bsw\FreeRTOS\src/tasks.c **** 																										\
 137:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Source\bsw\FreeRTOS\src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Source\bsw\FreeRTOS\src/tasks.c **** 		{																								\
 140:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Source\bsw\FreeRTOS\src/tasks.c **** 			--uxTopPriority;																			\
 142:Source\bsw\FreeRTOS\src/tasks.c **** 		}																								\
 143:Source\bsw\FreeRTOS\src/tasks.c **** 																										\
 144:Source\bsw\FreeRTOS\src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Source\bsw\FreeRTOS\src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 4


 146:Source\bsw\FreeRTOS\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Source\bsw\FreeRTOS\src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Source\bsw\FreeRTOS\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Source\bsw\FreeRTOS\src/tasks.c **** 
 150:Source\bsw\FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Source\bsw\FreeRTOS\src/tasks.c **** 
 152:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Source\bsw\FreeRTOS\src/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Source\bsw\FreeRTOS\src/tasks.c **** 	being used. */
 155:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Source\bsw\FreeRTOS\src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Source\bsw\FreeRTOS\src/tasks.c **** 
 158:Source\bsw\FreeRTOS\src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Source\bsw\FreeRTOS\src/tasks.c **** 
 160:Source\bsw\FreeRTOS\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Source\bsw\FreeRTOS\src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Source\bsw\FreeRTOS\src/tasks.c **** 	architecture being used. */
 163:Source\bsw\FreeRTOS\src/tasks.c **** 
 164:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Source\bsw\FreeRTOS\src/tasks.c **** 
 167:Source\bsw\FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Source\bsw\FreeRTOS\src/tasks.c **** 
 169:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Source\bsw\FreeRTOS\src/tasks.c **** 	{																								\
 171:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Source\bsw\FreeRTOS\src/tasks.c **** 																									\
 173:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Source\bsw\FreeRTOS\src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Source\bsw\FreeRTOS\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Source\bsw\FreeRTOS\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Source\bsw\FreeRTOS\src/tasks.c **** 
 179:Source\bsw\FreeRTOS\src/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Source\bsw\FreeRTOS\src/tasks.c **** 
 181:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Source\bsw\FreeRTOS\src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Source\bsw\FreeRTOS\src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Source\bsw\FreeRTOS\src/tasks.c **** 	{																									\
 186:Source\bsw\FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Source\bsw\FreeRTOS\src/tasks.c **** 		{																								\
 188:Source\bsw\FreeRTOS\src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Source\bsw\FreeRTOS\src/tasks.c **** 		}																								\
 190:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 191:Source\bsw\FreeRTOS\src/tasks.c **** 
 192:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Source\bsw\FreeRTOS\src/tasks.c **** 
 194:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 195:Source\bsw\FreeRTOS\src/tasks.c **** 
 196:Source\bsw\FreeRTOS\src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Source\bsw\FreeRTOS\src/tasks.c **** count overflows. */
 198:Source\bsw\FreeRTOS\src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Source\bsw\FreeRTOS\src/tasks.c **** {																									\
 200:Source\bsw\FreeRTOS\src/tasks.c **** 	List_t *pxTemp;																					\
 201:Source\bsw\FreeRTOS\src/tasks.c **** 																									\
 202:Source\bsw\FreeRTOS\src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 5


 203:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Source\bsw\FreeRTOS\src/tasks.c **** 																									\
 205:Source\bsw\FreeRTOS\src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Source\bsw\FreeRTOS\src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Source\bsw\FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Source\bsw\FreeRTOS\src/tasks.c **** 	xNumOfOverflows++;																				\
 209:Source\bsw\FreeRTOS\src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Source\bsw\FreeRTOS\src/tasks.c **** }
 211:Source\bsw\FreeRTOS\src/tasks.c **** 
 212:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 213:Source\bsw\FreeRTOS\src/tasks.c **** 
 214:Source\bsw\FreeRTOS\src/tasks.c **** /*
 215:Source\bsw\FreeRTOS\src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Source\bsw\FreeRTOS\src/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Source\bsw\FreeRTOS\src/tasks.c ****  */
 218:Source\bsw\FreeRTOS\src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Source\bsw\FreeRTOS\src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Source\bsw\FreeRTOS\src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Source\bsw\FreeRTOS\src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 224:Source\bsw\FreeRTOS\src/tasks.c **** 
 225:Source\bsw\FreeRTOS\src/tasks.c **** /*
 226:Source\bsw\FreeRTOS\src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Source\bsw\FreeRTOS\src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Source\bsw\FreeRTOS\src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Source\bsw\FreeRTOS\src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Source\bsw\FreeRTOS\src/tasks.c ****  */
 231:Source\bsw\FreeRTOS\src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Source\bsw\FreeRTOS\src/tasks.c **** 
 233:Source\bsw\FreeRTOS\src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Source\bsw\FreeRTOS\src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Source\bsw\FreeRTOS\src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Source\bsw\FreeRTOS\src/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Source\bsw\FreeRTOS\src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Source\bsw\FreeRTOS\src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Source\bsw\FreeRTOS\src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Source\bsw\FreeRTOS\src/tasks.c **** to its original value when it is released. */
 241:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Source\bsw\FreeRTOS\src/tasks.c **** #else
 244:Source\bsw\FreeRTOS\src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 246:Source\bsw\FreeRTOS\src/tasks.c **** 
 247:Source\bsw\FreeRTOS\src/tasks.c **** /*
 248:Source\bsw\FreeRTOS\src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Source\bsw\FreeRTOS\src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Source\bsw\FreeRTOS\src/tasks.c ****  * (the task's run time environment, including register values)
 251:Source\bsw\FreeRTOS\src/tasks.c ****  */
 252:Source\bsw\FreeRTOS\src/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Source\bsw\FreeRTOS\src/tasks.c **** {
 254:Source\bsw\FreeRTOS\src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Source\bsw\FreeRTOS\src/tasks.c **** 
 256:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Source\bsw\FreeRTOS\src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 259:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 6


 260:Source\bsw\FreeRTOS\src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Source\bsw\FreeRTOS\src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Source\bsw\FreeRTOS\src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Source\bsw\FreeRTOS\src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Source\bsw\FreeRTOS\src/tasks.c **** 
 266:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Source\bsw\FreeRTOS\src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 269:Source\bsw\FreeRTOS\src/tasks.c **** 
 270:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Source\bsw\FreeRTOS\src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 273:Source\bsw\FreeRTOS\src/tasks.c **** 
 274:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Source\bsw\FreeRTOS\src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Source\bsw\FreeRTOS\src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 278:Source\bsw\FreeRTOS\src/tasks.c **** 
 279:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Source\bsw\FreeRTOS\src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Source\bsw\FreeRTOS\src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 283:Source\bsw\FreeRTOS\src/tasks.c **** 
 284:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Source\bsw\FreeRTOS\src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 287:Source\bsw\FreeRTOS\src/tasks.c **** 
 288:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Source\bsw\FreeRTOS\src/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 291:Source\bsw\FreeRTOS\src/tasks.c **** 
 292:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Source\bsw\FreeRTOS\src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 295:Source\bsw\FreeRTOS\src/tasks.c **** 
 296:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Source\bsw\FreeRTOS\src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Source\bsw\FreeRTOS\src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Source\bsw\FreeRTOS\src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Source\bsw\FreeRTOS\src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Source\bsw\FreeRTOS\src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Source\bsw\FreeRTOS\src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Source\bsw\FreeRTOS\src/tasks.c **** 
 305:Source\bsw\FreeRTOS\src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Source\bsw\FreeRTOS\src/tasks.c **** 		for additional information. */
 307:Source\bsw\FreeRTOS\src/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 309:Source\bsw\FreeRTOS\src/tasks.c **** 
 310:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Source\bsw\FreeRTOS\src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Source\bsw\FreeRTOS\src/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 314:Source\bsw\FreeRTOS\src/tasks.c **** 
 315:Source\bsw\FreeRTOS\src/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Source\bsw\FreeRTOS\src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 7


 317:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Source\bsw\FreeRTOS\src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 320:Source\bsw\FreeRTOS\src/tasks.c **** 
 321:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Source\bsw\FreeRTOS\src/tasks.c **** 		uint8_t ucDelayAborted;
 323:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 324:Source\bsw\FreeRTOS\src/tasks.c **** 
 325:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Source\bsw\FreeRTOS\src/tasks.c **** 		int iTaskErrno;
 327:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 328:Source\bsw\FreeRTOS\src/tasks.c **** 
 329:Source\bsw\FreeRTOS\src/tasks.c **** } tskTCB;
 330:Source\bsw\FreeRTOS\src/tasks.c **** 
 331:Source\bsw\FreeRTOS\src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Source\bsw\FreeRTOS\src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Source\bsw\FreeRTOS\src/tasks.c **** typedef tskTCB TCB_t;
 334:Source\bsw\FreeRTOS\src/tasks.c **** 
 335:Source\bsw\FreeRTOS\src/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Source\bsw\FreeRTOS\src/tasks.c **** which static variables must be declared volatile. */
 337:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Source\bsw\FreeRTOS\src/tasks.c **** 
 339:Source\bsw\FreeRTOS\src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Source\bsw\FreeRTOS\src/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Source\bsw\FreeRTOS\src/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Source\bsw\FreeRTOS\src/tasks.c **** the static qualifier. */
 343:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Source\bsw\FreeRTOS\src/tasks.c **** 
 350:Source\bsw\FreeRTOS\src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Source\bsw\FreeRTOS\src/tasks.c **** 
 352:Source\bsw\FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Source\bsw\FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Source\bsw\FreeRTOS\src/tasks.c **** 
 355:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 356:Source\bsw\FreeRTOS\src/tasks.c **** 
 357:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Source\bsw\FreeRTOS\src/tasks.c **** 
 359:Source\bsw\FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Source\bsw\FreeRTOS\src/tasks.c **** 
 361:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 362:Source\bsw\FreeRTOS\src/tasks.c **** 
 363:Source\bsw\FreeRTOS\src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Source\bsw\FreeRTOS\src/tasks.c **** the errno of the currently running task. */
 365:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Source\bsw\FreeRTOS\src/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 368:Source\bsw\FreeRTOS\src/tasks.c **** 
 369:Source\bsw\FreeRTOS\src/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 8


 374:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Source\bsw\FreeRTOS\src/tasks.c **** 
 381:Source\bsw\FreeRTOS\src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Source\bsw\FreeRTOS\src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Source\bsw\FreeRTOS\src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Source\bsw\FreeRTOS\src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Source\bsw\FreeRTOS\src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Source\bsw\FreeRTOS\src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Source\bsw\FreeRTOS\src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Source\bsw\FreeRTOS\src/tasks.c **** accessed from a critical section. */
 389:Source\bsw\FreeRTOS\src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Source\bsw\FreeRTOS\src/tasks.c **** 
 391:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Source\bsw\FreeRTOS\src/tasks.c **** 
 393:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Source\bsw\FreeRTOS\src/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Source\bsw\FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Source\bsw\FreeRTOS\src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Source\bsw\FreeRTOS\src/tasks.c **** 
 398:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 399:Source\bsw\FreeRTOS\src/tasks.c **** 
 400:Source\bsw\FreeRTOS\src/tasks.c **** /*lint -restore */
 401:Source\bsw\FreeRTOS\src/tasks.c **** 
 402:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 403:Source\bsw\FreeRTOS\src/tasks.c **** 
 404:Source\bsw\FreeRTOS\src/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Source\bsw\FreeRTOS\src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Source\bsw\FreeRTOS\src/tasks.c **** 
 407:Source\bsw\FreeRTOS\src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Source\bsw\FreeRTOS\src/tasks.c **** 
 409:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 410:Source\bsw\FreeRTOS\src/tasks.c **** 
 411:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Source\bsw\FreeRTOS\src/tasks.c **** 
 413:Source\bsw\FreeRTOS\src/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Source\bsw\FreeRTOS\src/tasks.c **** 
 415:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 416:Source\bsw\FreeRTOS\src/tasks.c **** 
 417:Source\bsw\FreeRTOS\src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Source\bsw\FreeRTOS\src/tasks.c **** 
 419:Source\bsw\FreeRTOS\src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Source\bsw\FreeRTOS\src/tasks.c **** 
 421:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 422:Source\bsw\FreeRTOS\src/tasks.c **** 
 423:Source\bsw\FreeRTOS\src/tasks.c **** /* File private functions. --------------------------------*/
 424:Source\bsw\FreeRTOS\src/tasks.c **** 
 425:Source\bsw\FreeRTOS\src/tasks.c **** /**
 426:Source\bsw\FreeRTOS\src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Source\bsw\FreeRTOS\src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Source\bsw\FreeRTOS\src/tasks.c ****  * is in any other state.
 429:Source\bsw\FreeRTOS\src/tasks.c ****  */
 430:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 9


 431:Source\bsw\FreeRTOS\src/tasks.c **** 
 432:Source\bsw\FreeRTOS\src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Source\bsw\FreeRTOS\src/tasks.c **** 
 434:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Source\bsw\FreeRTOS\src/tasks.c **** 
 436:Source\bsw\FreeRTOS\src/tasks.c **** /*
 437:Source\bsw\FreeRTOS\src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Source\bsw\FreeRTOS\src/tasks.c ****  * automatically upon the creation of the first task.
 439:Source\bsw\FreeRTOS\src/tasks.c ****  */
 440:Source\bsw\FreeRTOS\src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Source\bsw\FreeRTOS\src/tasks.c **** 
 442:Source\bsw\FreeRTOS\src/tasks.c **** /*
 443:Source\bsw\FreeRTOS\src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Source\bsw\FreeRTOS\src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Source\bsw\FreeRTOS\src/tasks.c ****  * creation of the first user task.
 446:Source\bsw\FreeRTOS\src/tasks.c ****  *
 447:Source\bsw\FreeRTOS\src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Source\bsw\FreeRTOS\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Source\bsw\FreeRTOS\src/tasks.c ****  *
 450:Source\bsw\FreeRTOS\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Source\bsw\FreeRTOS\src/tasks.c ****  *
 452:Source\bsw\FreeRTOS\src/tasks.c ****  */
 453:Source\bsw\FreeRTOS\src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Source\bsw\FreeRTOS\src/tasks.c **** 
 455:Source\bsw\FreeRTOS\src/tasks.c **** /*
 456:Source\bsw\FreeRTOS\src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Source\bsw\FreeRTOS\src/tasks.c ****  * including the stack pointed to by the TCB.
 458:Source\bsw\FreeRTOS\src/tasks.c ****  *
 459:Source\bsw\FreeRTOS\src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Source\bsw\FreeRTOS\src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Source\bsw\FreeRTOS\src/tasks.c ****  */
 462:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Source\bsw\FreeRTOS\src/tasks.c **** 
 464:Source\bsw\FreeRTOS\src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Source\bsw\FreeRTOS\src/tasks.c **** 
 466:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 467:Source\bsw\FreeRTOS\src/tasks.c **** 
 468:Source\bsw\FreeRTOS\src/tasks.c **** /*
 469:Source\bsw\FreeRTOS\src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Source\bsw\FreeRTOS\src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Source\bsw\FreeRTOS\src/tasks.c ****  * and its TCB deleted.
 472:Source\bsw\FreeRTOS\src/tasks.c ****  */
 473:Source\bsw\FreeRTOS\src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Source\bsw\FreeRTOS\src/tasks.c **** 
 475:Source\bsw\FreeRTOS\src/tasks.c **** /*
 476:Source\bsw\FreeRTOS\src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Source\bsw\FreeRTOS\src/tasks.c ****  * either the current or the overflow delayed task list.
 478:Source\bsw\FreeRTOS\src/tasks.c ****  */
 479:Source\bsw\FreeRTOS\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Source\bsw\FreeRTOS\src/tasks.c **** 
 481:Source\bsw\FreeRTOS\src/tasks.c **** /*
 482:Source\bsw\FreeRTOS\src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Source\bsw\FreeRTOS\src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Source\bsw\FreeRTOS\src/tasks.c ****  * a suspended list, etc.).
 485:Source\bsw\FreeRTOS\src/tasks.c ****  *
 486:Source\bsw\FreeRTOS\src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Source\bsw\FreeRTOS\src/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 10


 488:Source\bsw\FreeRTOS\src/tasks.c ****  */
 489:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Source\bsw\FreeRTOS\src/tasks.c **** 
 491:Source\bsw\FreeRTOS\src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Source\bsw\FreeRTOS\src/tasks.c **** 
 493:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 494:Source\bsw\FreeRTOS\src/tasks.c **** 
 495:Source\bsw\FreeRTOS\src/tasks.c **** /*
 496:Source\bsw\FreeRTOS\src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Source\bsw\FreeRTOS\src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Source\bsw\FreeRTOS\src/tasks.c ****  */
 499:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Source\bsw\FreeRTOS\src/tasks.c **** 
 501:Source\bsw\FreeRTOS\src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Source\bsw\FreeRTOS\src/tasks.c **** 
 503:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 504:Source\bsw\FreeRTOS\src/tasks.c **** 
 505:Source\bsw\FreeRTOS\src/tasks.c **** /*
 506:Source\bsw\FreeRTOS\src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Source\bsw\FreeRTOS\src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Source\bsw\FreeRTOS\src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Source\bsw\FreeRTOS\src/tasks.c ****  */
 510:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Source\bsw\FreeRTOS\src/tasks.c **** 
 512:Source\bsw\FreeRTOS\src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Source\bsw\FreeRTOS\src/tasks.c **** 
 514:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 515:Source\bsw\FreeRTOS\src/tasks.c **** 
 516:Source\bsw\FreeRTOS\src/tasks.c **** /*
 517:Source\bsw\FreeRTOS\src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Source\bsw\FreeRTOS\src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Source\bsw\FreeRTOS\src/tasks.c ****  *
 520:Source\bsw\FreeRTOS\src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Source\bsw\FreeRTOS\src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Source\bsw\FreeRTOS\src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Source\bsw\FreeRTOS\src/tasks.c ****  * set to a value other than 1.
 524:Source\bsw\FreeRTOS\src/tasks.c ****  */
 525:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Source\bsw\FreeRTOS\src/tasks.c **** 
 527:Source\bsw\FreeRTOS\src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Source\bsw\FreeRTOS\src/tasks.c **** 
 529:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 530:Source\bsw\FreeRTOS\src/tasks.c **** 
 531:Source\bsw\FreeRTOS\src/tasks.c **** /*
 532:Source\bsw\FreeRTOS\src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Source\bsw\FreeRTOS\src/tasks.c ****  * will exit the Blocked state.
 534:Source\bsw\FreeRTOS\src/tasks.c ****  */
 535:Source\bsw\FreeRTOS\src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Source\bsw\FreeRTOS\src/tasks.c **** 
 537:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Source\bsw\FreeRTOS\src/tasks.c **** 
 539:Source\bsw\FreeRTOS\src/tasks.c **** 	/*
 540:Source\bsw\FreeRTOS\src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Source\bsw\FreeRTOS\src/tasks.c **** 	 * human readable tables of task information.
 542:Source\bsw\FreeRTOS\src/tasks.c **** 	 */
 543:Source\bsw\FreeRTOS\src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 11


 545:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 546:Source\bsw\FreeRTOS\src/tasks.c **** 
 547:Source\bsw\FreeRTOS\src/tasks.c **** /*
 548:Source\bsw\FreeRTOS\src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Source\bsw\FreeRTOS\src/tasks.c ****  * dynamically to fill in the structure's members.
 550:Source\bsw\FreeRTOS\src/tasks.c ****  */
 551:Source\bsw\FreeRTOS\src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Source\bsw\FreeRTOS\src/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Source\bsw\FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 554:Source\bsw\FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 555:Source\bsw\FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 556:Source\bsw\FreeRTOS\src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Source\bsw\FreeRTOS\src/tasks.c **** 									TCB_t *pxNewTCB,
 558:Source\bsw\FreeRTOS\src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Source\bsw\FreeRTOS\src/tasks.c **** 
 560:Source\bsw\FreeRTOS\src/tasks.c **** /*
 561:Source\bsw\FreeRTOS\src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Source\bsw\FreeRTOS\src/tasks.c ****  * under the control of the scheduler.
 563:Source\bsw\FreeRTOS\src/tasks.c ****  */
 564:Source\bsw\FreeRTOS\src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Source\bsw\FreeRTOS\src/tasks.c **** 
 566:Source\bsw\FreeRTOS\src/tasks.c **** /*
 567:Source\bsw\FreeRTOS\src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Source\bsw\FreeRTOS\src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Source\bsw\FreeRTOS\src/tasks.c ****  * called by the function.
 570:Source\bsw\FreeRTOS\src/tasks.c ****  */
 571:Source\bsw\FreeRTOS\src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Source\bsw\FreeRTOS\src/tasks.c **** 
 573:Source\bsw\FreeRTOS\src/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Source\bsw\FreeRTOS\src/tasks.c **** 
 575:Source\bsw\FreeRTOS\src/tasks.c **** #endif
 576:Source\bsw\FreeRTOS\src/tasks.c **** 
 577:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 578:Source\bsw\FreeRTOS\src/tasks.c **** 
 579:Source\bsw\FreeRTOS\src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Source\bsw\FreeRTOS\src/tasks.c **** 
 581:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Source\bsw\FreeRTOS\src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Source\bsw\FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 584:Source\bsw\FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 585:Source\bsw\FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 586:Source\bsw\FreeRTOS\src/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Source\bsw\FreeRTOS\src/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 589:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 590:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
 591:Source\bsw\FreeRTOS\src/tasks.c **** 
 592:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Source\bsw\FreeRTOS\src/tasks.c **** 
 595:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 597:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Source\bsw\FreeRTOS\src/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Source\bsw\FreeRTOS\src/tasks.c **** 			structure. */
 600:Source\bsw\FreeRTOS\src/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 12


 602:Source\bsw\FreeRTOS\src/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 604:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Source\bsw\FreeRTOS\src/tasks.c **** 
 606:Source\bsw\FreeRTOS\src/tasks.c **** 
 607:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 609:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Source\bsw\FreeRTOS\src/tasks.c **** 			function - use them. */
 611:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Source\bsw\FreeRTOS\src/tasks.c **** 
 614:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 616:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Source\bsw\FreeRTOS\src/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 620:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Source\bsw\FreeRTOS\src/tasks.c **** 
 622:Source\bsw\FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Source\bsw\FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 625:Source\bsw\FreeRTOS\src/tasks.c **** 		else
 626:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 627:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = NULL;
 628:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 629:Source\bsw\FreeRTOS\src/tasks.c **** 
 630:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
 631:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 632:Source\bsw\FreeRTOS\src/tasks.c **** 
 633:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 635:Source\bsw\FreeRTOS\src/tasks.c **** 
 636:Source\bsw\FreeRTOS\src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Source\bsw\FreeRTOS\src/tasks.c **** 
 638:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 640:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 641:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Source\bsw\FreeRTOS\src/tasks.c **** 
 643:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Source\bsw\FreeRTOS\src/tasks.c **** 
 646:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 648:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Source\bsw\FreeRTOS\src/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Source\bsw\FreeRTOS\src/tasks.c **** 			not static allocation is being used. */
 651:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Source\bsw\FreeRTOS\src/tasks.c **** 
 653:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Source\bsw\FreeRTOS\src/tasks.c **** 
 656:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 658:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 13


 659:Source\bsw\FreeRTOS\src/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 662:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Source\bsw\FreeRTOS\src/tasks.c **** 
 664:Source\bsw\FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Source\bsw\FreeRTOS\src/tasks.c **** 									pxTaskDefinition->pcName,
 666:Source\bsw\FreeRTOS\src/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Source\bsw\FreeRTOS\src/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Source\bsw\FreeRTOS\src/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Source\bsw\FreeRTOS\src/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Source\bsw\FreeRTOS\src/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Source\bsw\FreeRTOS\src/tasks.c **** 
 672:Source\bsw\FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 674:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 675:Source\bsw\FreeRTOS\src/tasks.c **** 
 676:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
 677:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 678:Source\bsw\FreeRTOS\src/tasks.c **** 
 679:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 681:Source\bsw\FreeRTOS\src/tasks.c **** 
 682:Source\bsw\FreeRTOS\src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Source\bsw\FreeRTOS\src/tasks.c **** 
 684:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 686:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 687:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Source\bsw\FreeRTOS\src/tasks.c **** 
 689:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Source\bsw\FreeRTOS\src/tasks.c **** 
 691:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 693:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Source\bsw\FreeRTOS\src/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Source\bsw\FreeRTOS\src/tasks.c **** 			not static allocation is being used. */
 696:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Source\bsw\FreeRTOS\src/tasks.c **** 
 698:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxNewTCB != NULL )
 699:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 700:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Source\bsw\FreeRTOS\src/tasks.c **** 
 703:Source\bsw\FreeRTOS\src/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 705:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Source\bsw\FreeRTOS\src/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Source\bsw\FreeRTOS\src/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Source\bsw\FreeRTOS\src/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 710:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Source\bsw\FreeRTOS\src/tasks.c **** 
 712:Source\bsw\FreeRTOS\src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Source\bsw\FreeRTOS\src/tasks.c **** 										pxTaskDefinition->pcName,
 714:Source\bsw\FreeRTOS\src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Source\bsw\FreeRTOS\src/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 14


 716:Source\bsw\FreeRTOS\src/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Source\bsw\FreeRTOS\src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Source\bsw\FreeRTOS\src/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Source\bsw\FreeRTOS\src/tasks.c **** 
 720:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
 722:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 723:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 724:Source\bsw\FreeRTOS\src/tasks.c **** 
 725:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
 726:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 727:Source\bsw\FreeRTOS\src/tasks.c **** 
 728:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 730:Source\bsw\FreeRTOS\src/tasks.c **** 
 731:Source\bsw\FreeRTOS\src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Source\bsw\FreeRTOS\src/tasks.c **** 
 733:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Source\bsw\FreeRTOS\src/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Source\bsw\FreeRTOS\src/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Source\bsw\FreeRTOS\src/tasks.c **** 							void * const pvParameters,
 737:Source\bsw\FreeRTOS\src/tasks.c **** 							UBaseType_t uxPriority,
 738:Source\bsw\FreeRTOS\src/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 740:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 741:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
 742:Source\bsw\FreeRTOS\src/tasks.c **** 
 743:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Source\bsw\FreeRTOS\src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Source\bsw\FreeRTOS\src/tasks.c **** 		the TCB then the stack. */
 746:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 748:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Source\bsw\FreeRTOS\src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Source\bsw\FreeRTOS\src/tasks.c **** 			allocation is being used. */
 751:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Source\bsw\FreeRTOS\src/tasks.c **** 
 753:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxNewTCB != NULL )
 754:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 755:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Source\bsw\FreeRTOS\src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Source\bsw\FreeRTOS\src/tasks.c **** 				be deleted later if required. */
 758:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Source\bsw\FreeRTOS\src/tasks.c **** 
 760:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 762:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Source\bsw\FreeRTOS\src/tasks.c **** 					vPortFree( pxNewTCB );
 764:Source\bsw\FreeRTOS\src/tasks.c **** 					pxNewTCB = NULL;
 765:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 766:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 767:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 768:Source\bsw\FreeRTOS\src/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 770:Source\bsw\FreeRTOS\src/tasks.c **** 		StackType_t *pxStack;
 771:Source\bsw\FreeRTOS\src/tasks.c **** 
 772:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 15


 773:Source\bsw\FreeRTOS\src/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:Source\bsw\FreeRTOS\src/tasks.c **** 
 775:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxStack != NULL )
 776:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 777:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Allocate space for the TCB. */
 778:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Source\bsw\FreeRTOS\src/tasks.c **** 
 780:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxNewTCB != NULL )
 781:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 782:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Source\bsw\FreeRTOS\src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 785:Source\bsw\FreeRTOS\src/tasks.c **** 				else
 786:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 787:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Source\bsw\FreeRTOS\src/tasks.c **** 					it again. */
 789:Source\bsw\FreeRTOS\src/tasks.c **** 					vPortFree( pxStack );
 790:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 791:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 792:Source\bsw\FreeRTOS\src/tasks.c **** 			else
 793:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 794:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB = NULL;
 795:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 796:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 797:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Source\bsw\FreeRTOS\src/tasks.c **** 
 799:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxNewTCB != NULL )
 800:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 801:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 803:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Source\bsw\FreeRTOS\src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 807:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Source\bsw\FreeRTOS\src/tasks.c **** 
 809:Source\bsw\FreeRTOS\src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Source\bsw\FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 812:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 813:Source\bsw\FreeRTOS\src/tasks.c **** 		else
 814:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 815:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 817:Source\bsw\FreeRTOS\src/tasks.c **** 
 818:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
 819:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 820:Source\bsw\FreeRTOS\src/tasks.c **** 
 821:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 823:Source\bsw\FreeRTOS\src/tasks.c **** 
 824:Source\bsw\FreeRTOS\src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Source\bsw\FreeRTOS\src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Source\bsw\FreeRTOS\src/tasks.c **** 									const uint32_t ulStackDepth,
 827:Source\bsw\FreeRTOS\src/tasks.c **** 									void * const pvParameters,
 828:Source\bsw\FreeRTOS\src/tasks.c **** 									UBaseType_t uxPriority,
 829:Source\bsw\FreeRTOS\src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 16


 830:Source\bsw\FreeRTOS\src/tasks.c **** 									TCB_t *pxNewTCB,
 831:Source\bsw\FreeRTOS\src/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Source\bsw\FreeRTOS\src/tasks.c **** {
 833:Source\bsw\FreeRTOS\src/tasks.c **** StackType_t *pxTopOfStack;
 834:Source\bsw\FreeRTOS\src/tasks.c **** UBaseType_t x;
 835:Source\bsw\FreeRTOS\src/tasks.c **** 
 836:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Source\bsw\FreeRTOS\src/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 841:Source\bsw\FreeRTOS\src/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 843:Source\bsw\FreeRTOS\src/tasks.c **** 		else
 844:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 845:Source\bsw\FreeRTOS\src/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 847:Source\bsw\FreeRTOS\src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Source\bsw\FreeRTOS\src/tasks.c **** 
 850:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 853:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 856:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Source\bsw\FreeRTOS\src/tasks.c **** 
 858:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Source\bsw\FreeRTOS\src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Source\bsw\FreeRTOS\src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Source\bsw\FreeRTOS\src/tasks.c **** 	by the port. */
 862:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 864:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Source\bsw\FreeRTOS\src/tasks.c **** 
 867:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Source\bsw\FreeRTOS\src/tasks.c **** 
 870:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 872:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Source\bsw\FreeRTOS\src/tasks.c **** 			debugging. */
 874:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 876:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 878:Source\bsw\FreeRTOS\src/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 880:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Source\bsw\FreeRTOS\src/tasks.c **** 
 882:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Source\bsw\FreeRTOS\src/tasks.c **** 
 885:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Source\bsw\FreeRTOS\src/tasks.c **** 		performed. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 17


 887:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 889:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Source\bsw\FreeRTOS\src/tasks.c **** 
 891:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Store the task name in the TCB. */
 892:Source\bsw\FreeRTOS\src/tasks.c **** 	if( pcName != NULL )
 893:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 894:Source\bsw\FreeRTOS\src/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 896:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Source\bsw\FreeRTOS\src/tasks.c **** 
 898:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Source\bsw\FreeRTOS\src/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Source\bsw\FreeRTOS\src/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 903:Source\bsw\FreeRTOS\src/tasks.c **** 				break;
 904:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 905:Source\bsw\FreeRTOS\src/tasks.c **** 			else
 906:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 907:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 909:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 910:Source\bsw\FreeRTOS\src/tasks.c **** 
 911:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Source\bsw\FreeRTOS\src/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 915:Source\bsw\FreeRTOS\src/tasks.c **** 	else
 916:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 917:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Source\bsw\FreeRTOS\src/tasks.c **** 		terminator when it is read out. */
 919:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 921:Source\bsw\FreeRTOS\src/tasks.c **** 
 922:Source\bsw\FreeRTOS\src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Source\bsw\FreeRTOS\src/tasks.c **** 	remove the privilege bit if one is present. */
 924:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 926:Source\bsw\FreeRTOS\src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 928:Source\bsw\FreeRTOS\src/tasks.c **** 	else
 929:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 930:Source\bsw\FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 932:Source\bsw\FreeRTOS\src/tasks.c **** 
 933:Source\bsw\FreeRTOS\src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 936:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 939:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Source\bsw\FreeRTOS\src/tasks.c **** 
 941:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 18


 944:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Source\bsw\FreeRTOS\src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Source\bsw\FreeRTOS\src/tasks.c **** 
 948:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Event lists are always in priority order. */
 949:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Source\bsw\FreeRTOS\src/tasks.c **** 
 952:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 954:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 956:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Source\bsw\FreeRTOS\src/tasks.c **** 
 958:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 960:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 962:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Source\bsw\FreeRTOS\src/tasks.c **** 
 964:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 966:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 968:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Source\bsw\FreeRTOS\src/tasks.c **** 
 970:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 972:Source\bsw\FreeRTOS\src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 974:Source\bsw\FreeRTOS\src/tasks.c **** 	#else
 975:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 976:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) xRegions;
 978:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 979:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 980:Source\bsw\FreeRTOS\src/tasks.c **** 
 981:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 983:Source\bsw\FreeRTOS\src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 985:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 987:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 988:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 989:Source\bsw\FreeRTOS\src/tasks.c **** 
 990:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 992:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 995:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
 996:Source\bsw\FreeRTOS\src/tasks.c **** 
 997:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 999:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Source\bsw\FreeRTOS\src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 19


1001:Source\bsw\FreeRTOS\src/tasks.c **** 		for additional information. */
1002:Source\bsw\FreeRTOS\src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1004:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
1005:Source\bsw\FreeRTOS\src/tasks.c **** 
1006:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1008:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1010:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
1011:Source\bsw\FreeRTOS\src/tasks.c **** 
1012:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Source\bsw\FreeRTOS\src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Source\bsw\FreeRTOS\src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Source\bsw\FreeRTOS\src/tasks.c **** 	the top of stack variable is updated. */
1016:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1018:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Source\bsw\FreeRTOS\src/tasks.c **** 		pass the stack end address to the stack initialization
1020:Source\bsw\FreeRTOS\src/tasks.c **** 		function as well. */
1021:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1023:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1025:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1027:Source\bsw\FreeRTOS\src/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1029:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1031:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1033:Source\bsw\FreeRTOS\src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1035:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1037:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1039:Source\bsw\FreeRTOS\src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1041:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Source\bsw\FreeRTOS\src/tasks.c **** 		pass the stack end address to the stack initialization
1043:Source\bsw\FreeRTOS\src/tasks.c **** 		function as well. */
1044:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1046:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1048:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1050:Source\bsw\FreeRTOS\src/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1052:Source\bsw\FreeRTOS\src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1054:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1056:Source\bsw\FreeRTOS\src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Source\bsw\FreeRTOS\src/tasks.c **** 		{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 20


1058:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1060:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1062:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Source\bsw\FreeRTOS\src/tasks.c **** 
1064:Source\bsw\FreeRTOS\src/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1066:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Source\bsw\FreeRTOS\src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Source\bsw\FreeRTOS\src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1070:Source\bsw\FreeRTOS\src/tasks.c **** 	else
1071:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1072:Source\bsw\FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1074:Source\bsw\FreeRTOS\src/tasks.c **** }
1075:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1076:Source\bsw\FreeRTOS\src/tasks.c **** 
1077:Source\bsw\FreeRTOS\src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Source\bsw\FreeRTOS\src/tasks.c **** {
1079:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Source\bsw\FreeRTOS\src/tasks.c **** 	updated. */
1081:Source\bsw\FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
1082:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1083:Source\bsw\FreeRTOS\src/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1086:Source\bsw\FreeRTOS\src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Source\bsw\FreeRTOS\src/tasks.c **** 			the suspended state - make this the current task. */
1088:Source\bsw\FreeRTOS\src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Source\bsw\FreeRTOS\src/tasks.c **** 
1090:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1092:Source\bsw\FreeRTOS\src/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Source\bsw\FreeRTOS\src/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Source\bsw\FreeRTOS\src/tasks.c **** 				fails, but we will report the failure. */
1095:Source\bsw\FreeRTOS\src/tasks.c **** 				prvInitialiseTaskLists();
1096:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1097:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1098:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1099:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1101:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1102:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1103:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1104:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Source\bsw\FreeRTOS\src/tasks.c **** 			current task if it is the highest priority task to be created
1106:Source\bsw\FreeRTOS\src/tasks.c **** 			so far. */
1107:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1109:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1111:Source\bsw\FreeRTOS\src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1113:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1114:Source\bsw\FreeRTOS\src/tasks.c **** 				{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 21


1115:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1117:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1118:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1119:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1120:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1122:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1123:Source\bsw\FreeRTOS\src/tasks.c **** 
1124:Source\bsw\FreeRTOS\src/tasks.c **** 		uxTaskNumber++;
1125:Source\bsw\FreeRTOS\src/tasks.c **** 
1126:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1128:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Source\bsw\FreeRTOS\src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1131:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Source\bsw\FreeRTOS\src/tasks.c **** 
1134:Source\bsw\FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Source\bsw\FreeRTOS\src/tasks.c **** 
1136:Source\bsw\FreeRTOS\src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1138:Source\bsw\FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
1139:Source\bsw\FreeRTOS\src/tasks.c **** 
1140:Source\bsw\FreeRTOS\src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1142:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Source\bsw\FreeRTOS\src/tasks.c **** 		then it should run now. */
1144:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1146:Source\bsw\FreeRTOS\src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1148:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1149:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1150:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1152:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1153:Source\bsw\FreeRTOS\src/tasks.c **** 	else
1154:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1155:Source\bsw\FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1157:Source\bsw\FreeRTOS\src/tasks.c **** }
1158:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1159:Source\bsw\FreeRTOS\src/tasks.c **** 
1160:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Source\bsw\FreeRTOS\src/tasks.c **** 
1162:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1164:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1165:Source\bsw\FreeRTOS\src/tasks.c **** 
1166:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1167:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1168:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Source\bsw\FreeRTOS\src/tasks.c **** 			being deleted. */
1170:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 22


1172:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1175:Source\bsw\FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1177:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1178:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1179:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1181:Source\bsw\FreeRTOS\src/tasks.c **** 
1182:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1185:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1187:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1188:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1189:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1191:Source\bsw\FreeRTOS\src/tasks.c **** 
1192:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Source\bsw\FreeRTOS\src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Source\bsw\FreeRTOS\src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Source\bsw\FreeRTOS\src/tasks.c **** 			not return. */
1196:Source\bsw\FreeRTOS\src/tasks.c **** 			uxTaskNumber++;
1197:Source\bsw\FreeRTOS\src/tasks.c **** 
1198:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1200:Source\bsw\FreeRTOS\src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Source\bsw\FreeRTOS\src/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Source\bsw\FreeRTOS\src/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Source\bsw\FreeRTOS\src/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Source\bsw\FreeRTOS\src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Source\bsw\FreeRTOS\src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Source\bsw\FreeRTOS\src/tasks.c **** 
1207:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Source\bsw\FreeRTOS\src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Source\bsw\FreeRTOS\src/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Source\bsw\FreeRTOS\src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Source\bsw\FreeRTOS\src/tasks.c **** 
1212:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Source\bsw\FreeRTOS\src/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Source\bsw\FreeRTOS\src/tasks.c **** 
1216:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Source\bsw\FreeRTOS\src/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Source\bsw\FreeRTOS\src/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Source\bsw\FreeRTOS\src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Source\bsw\FreeRTOS\src/tasks.c **** 				required. */
1221:Source\bsw\FreeRTOS\src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1223:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1224:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1225:Source\bsw\FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Source\bsw\FreeRTOS\src/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 23


1229:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Source\bsw\FreeRTOS\src/tasks.c **** 				the task that has just been deleted. */
1231:Source\bsw\FreeRTOS\src/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1233:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1234:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1235:Source\bsw\FreeRTOS\src/tasks.c **** 
1236:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Source\bsw\FreeRTOS\src/tasks.c **** 		been deleted. */
1238:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1240:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1242:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Source\bsw\FreeRTOS\src/tasks.c **** 				portYIELD_WITHIN_API();
1244:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1245:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1246:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1247:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1249:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1250:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1251:Source\bsw\FreeRTOS\src/tasks.c **** 
1252:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1254:Source\bsw\FreeRTOS\src/tasks.c **** 
1255:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Source\bsw\FreeRTOS\src/tasks.c **** 
1257:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1259:Source\bsw\FreeRTOS\src/tasks.c **** 	TickType_t xTimeToWake;
1260:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Source\bsw\FreeRTOS\src/tasks.c **** 
1262:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Source\bsw\FreeRTOS\src/tasks.c **** 
1266:Source\bsw\FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
1267:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1268:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Source\bsw\FreeRTOS\src/tasks.c **** 			block. */
1270:Source\bsw\FreeRTOS\src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Source\bsw\FreeRTOS\src/tasks.c **** 
1272:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Source\bsw\FreeRTOS\src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Source\bsw\FreeRTOS\src/tasks.c **** 
1275:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1277:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Source\bsw\FreeRTOS\src/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Source\bsw\FreeRTOS\src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Source\bsw\FreeRTOS\src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Source\bsw\FreeRTOS\src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Source\bsw\FreeRTOS\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1284:Source\bsw\FreeRTOS\src/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Source\bsw\FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 24


1286:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1287:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1288:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1290:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1291:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1292:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1293:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Source\bsw\FreeRTOS\src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Source\bsw\FreeRTOS\src/tasks.c **** 				tick time is less than the wake time. */
1296:Source\bsw\FreeRTOS\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1298:Source\bsw\FreeRTOS\src/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1300:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1301:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1302:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1304:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1305:Source\bsw\FreeRTOS\src/tasks.c **** 
1306:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Source\bsw\FreeRTOS\src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Source\bsw\FreeRTOS\src/tasks.c **** 
1309:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1311:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Source\bsw\FreeRTOS\src/tasks.c **** 
1313:Source\bsw\FreeRTOS\src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Source\bsw\FreeRTOS\src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1317:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1318:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1319:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1321:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1322:Source\bsw\FreeRTOS\src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Source\bsw\FreeRTOS\src/tasks.c **** 
1324:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Source\bsw\FreeRTOS\src/tasks.c **** 		have put ourselves to sleep. */
1326:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1328:Source\bsw\FreeRTOS\src/tasks.c **** 			portYIELD_WITHIN_API();
1329:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1330:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1331:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1332:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1334:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1335:Source\bsw\FreeRTOS\src/tasks.c **** 
1336:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1338:Source\bsw\FreeRTOS\src/tasks.c **** 
1339:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Source\bsw\FreeRTOS\src/tasks.c **** 
1341:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Source\bsw\FreeRTOS\src/tasks.c **** 	{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 25


1343:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:Source\bsw\FreeRTOS\src/tasks.c **** 
1345:Source\bsw\FreeRTOS\src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1348:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Source\bsw\FreeRTOS\src/tasks.c **** 			vTaskSuspendAll();
1350:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1351:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_DELAY();
1352:Source\bsw\FreeRTOS\src/tasks.c **** 
1353:Source\bsw\FreeRTOS\src/tasks.c **** 				/* A task that is removed from the event list while the
1354:Source\bsw\FreeRTOS\src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Source\bsw\FreeRTOS\src/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Source\bsw\FreeRTOS\src/tasks.c **** 				is resumed.
1357:Source\bsw\FreeRTOS\src/tasks.c **** 
1358:Source\bsw\FreeRTOS\src/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Source\bsw\FreeRTOS\src/tasks.c **** 				executing task. */
1360:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1362:Source\bsw\FreeRTOS\src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1364:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1365:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1366:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1368:Source\bsw\FreeRTOS\src/tasks.c **** 
1369:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Source\bsw\FreeRTOS\src/tasks.c **** 		have put ourselves to sleep. */
1371:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1373:Source\bsw\FreeRTOS\src/tasks.c **** 			portYIELD_WITHIN_API();
1374:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1375:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1376:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1377:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1379:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1380:Source\bsw\FreeRTOS\src/tasks.c **** 
1381:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1383:Source\bsw\FreeRTOS\src/tasks.c **** 
1384:Source\bsw\FreeRTOS\src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Source\bsw\FreeRTOS\src/tasks.c **** 
1386:Source\bsw\FreeRTOS\src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1388:Source\bsw\FreeRTOS\src/tasks.c **** 	eTaskState eReturn;
1389:Source\bsw\FreeRTOS\src/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Source\bsw\FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Source\bsw\FreeRTOS\src/tasks.c **** 
1392:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTCB );
1393:Source\bsw\FreeRTOS\src/tasks.c **** 
1394:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1396:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Source\bsw\FreeRTOS\src/tasks.c **** 			eReturn = eRunning;
1398:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1399:Source\bsw\FreeRTOS\src/tasks.c **** 		else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 26


1400:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1401:Source\bsw\FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1402:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1403:Source\bsw\FreeRTOS\src/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Source\bsw\FreeRTOS\src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Source\bsw\FreeRTOS\src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1407:Source\bsw\FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1408:Source\bsw\FreeRTOS\src/tasks.c **** 
1409:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1411:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Source\bsw\FreeRTOS\src/tasks.c **** 				lists. */
1413:Source\bsw\FreeRTOS\src/tasks.c **** 				eReturn = eBlocked;
1414:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1415:Source\bsw\FreeRTOS\src/tasks.c **** 
1416:Source\bsw\FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Source\bsw\FreeRTOS\src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1419:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Source\bsw\FreeRTOS\src/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Source\bsw\FreeRTOS\src/tasks.c **** 					indefinitely? */
1422:Source\bsw\FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1424:Source\bsw\FreeRTOS\src/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Source\bsw\FreeRTOS\src/tasks.c **** 						{
1426:Source\bsw\FreeRTOS\src/tasks.c **** 							/* The task does not appear on the event list item of
1427:Source\bsw\FreeRTOS\src/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Source\bsw\FreeRTOS\src/tasks.c **** 							blocked state if it is waiting on its notification
1429:Source\bsw\FreeRTOS\src/tasks.c **** 							rather than waiting on an object. */
1430:Source\bsw\FreeRTOS\src/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Source\bsw\FreeRTOS\src/tasks.c **** 							{
1432:Source\bsw\FreeRTOS\src/tasks.c **** 								eReturn = eBlocked;
1433:Source\bsw\FreeRTOS\src/tasks.c **** 							}
1434:Source\bsw\FreeRTOS\src/tasks.c **** 							else
1435:Source\bsw\FreeRTOS\src/tasks.c **** 							{
1436:Source\bsw\FreeRTOS\src/tasks.c **** 								eReturn = eSuspended;
1437:Source\bsw\FreeRTOS\src/tasks.c **** 							}
1438:Source\bsw\FreeRTOS\src/tasks.c **** 						}
1439:Source\bsw\FreeRTOS\src/tasks.c **** 						#else
1440:Source\bsw\FreeRTOS\src/tasks.c **** 						{
1441:Source\bsw\FreeRTOS\src/tasks.c **** 							eReturn = eSuspended;
1442:Source\bsw\FreeRTOS\src/tasks.c **** 						}
1443:Source\bsw\FreeRTOS\src/tasks.c **** 						#endif
1444:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1445:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1446:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1447:Source\bsw\FreeRTOS\src/tasks.c **** 						eReturn = eBlocked;
1448:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1449:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1450:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
1451:Source\bsw\FreeRTOS\src/tasks.c **** 
1452:Source\bsw\FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Source\bsw\FreeRTOS\src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1455:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Source\bsw\FreeRTOS\src/tasks.c **** 					tasks list, or it is not referenced from any lists at
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 27


1457:Source\bsw\FreeRTOS\src/tasks.c **** 					all. */
1458:Source\bsw\FreeRTOS\src/tasks.c **** 					eReturn = eDeleted;
1459:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1460:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
1461:Source\bsw\FreeRTOS\src/tasks.c **** 
1462:Source\bsw\FreeRTOS\src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1464:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Source\bsw\FreeRTOS\src/tasks.c **** 				Ready (including pending ready) state. */
1466:Source\bsw\FreeRTOS\src/tasks.c **** 				eReturn = eReady;
1467:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1468:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1469:Source\bsw\FreeRTOS\src/tasks.c **** 
1470:Source\bsw\FreeRTOS\src/tasks.c **** 		return eReturn;
1471:Source\bsw\FreeRTOS\src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Source\bsw\FreeRTOS\src/tasks.c **** 
1473:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1475:Source\bsw\FreeRTOS\src/tasks.c **** 
1476:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Source\bsw\FreeRTOS\src/tasks.c **** 
1478:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1480:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
1481:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
1482:Source\bsw\FreeRTOS\src/tasks.c **** 
1483:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1484:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1485:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Source\bsw\FreeRTOS\src/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1490:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1491:Source\bsw\FreeRTOS\src/tasks.c **** 
1492:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxReturn;
1493:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1494:Source\bsw\FreeRTOS\src/tasks.c **** 
1495:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1497:Source\bsw\FreeRTOS\src/tasks.c **** 
1498:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Source\bsw\FreeRTOS\src/tasks.c **** 
1500:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1502:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
1503:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Source\bsw\FreeRTOS\src/tasks.c **** 
1505:Source\bsw\FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Source\bsw\FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Source\bsw\FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Source\bsw\FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Source\bsw\FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Source\bsw\FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Source\bsw\FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Source\bsw\FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 28


1514:Source\bsw\FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Source\bsw\FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Source\bsw\FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Source\bsw\FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Source\bsw\FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Source\bsw\FreeRTOS\src/tasks.c **** 		provided on the following link:
1520:Source\bsw\FreeRTOS\src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Source\bsw\FreeRTOS\src/tasks.c **** 
1523:Source\bsw\FreeRTOS\src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1525:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Source\bsw\FreeRTOS\src/tasks.c **** 			task that is being queried. */
1527:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1530:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Source\bsw\FreeRTOS\src/tasks.c **** 
1532:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxReturn;
1533:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1534:Source\bsw\FreeRTOS\src/tasks.c **** 
1535:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1537:Source\bsw\FreeRTOS\src/tasks.c **** 
1538:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Source\bsw\FreeRTOS\src/tasks.c **** 
1540:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1542:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1543:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Source\bsw\FreeRTOS\src/tasks.c **** 
1546:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Source\bsw\FreeRTOS\src/tasks.c **** 
1548:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Source\bsw\FreeRTOS\src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1551:Source\bsw\FreeRTOS\src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1553:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1554:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1555:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1557:Source\bsw\FreeRTOS\src/tasks.c **** 
1558:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1559:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1560:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Source\bsw\FreeRTOS\src/tasks.c **** 			task that is being changed. */
1562:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Source\bsw\FreeRTOS\src/tasks.c **** 
1564:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Source\bsw\FreeRTOS\src/tasks.c **** 
1566:Source\bsw\FreeRTOS\src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1568:Source\bsw\FreeRTOS\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1570:Source\bsw\FreeRTOS\src/tasks.c **** 			#else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 29


1571:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1572:Source\bsw\FreeRTOS\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1574:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
1575:Source\bsw\FreeRTOS\src/tasks.c **** 
1576:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1578:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Source\bsw\FreeRTOS\src/tasks.c **** 				priority than the calling task. */
1580:Source\bsw\FreeRTOS\src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1582:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1584:Source\bsw\FreeRTOS\src/tasks.c **** 						/* The priority of a task other than the currently
1585:Source\bsw\FreeRTOS\src/tasks.c **** 						running task is being raised.  Is the priority being
1586:Source\bsw\FreeRTOS\src/tasks.c **** 						raised above that of the running task? */
1587:Source\bsw\FreeRTOS\src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Source\bsw\FreeRTOS\src/tasks.c **** 						{
1589:Source\bsw\FreeRTOS\src/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Source\bsw\FreeRTOS\src/tasks.c **** 						}
1591:Source\bsw\FreeRTOS\src/tasks.c **** 						else
1592:Source\bsw\FreeRTOS\src/tasks.c **** 						{
1593:Source\bsw\FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Source\bsw\FreeRTOS\src/tasks.c **** 						}
1595:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1596:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1597:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1598:Source\bsw\FreeRTOS\src/tasks.c **** 						/* The priority of the running task is being raised,
1599:Source\bsw\FreeRTOS\src/tasks.c **** 						but the running task must already be the highest
1600:Source\bsw\FreeRTOS\src/tasks.c **** 						priority task able to run so no yield is required. */
1601:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1602:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1603:Source\bsw\FreeRTOS\src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1605:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Setting the priority of the running task down means
1606:Source\bsw\FreeRTOS\src/tasks.c **** 					there may now be another task of higher priority that
1607:Source\bsw\FreeRTOS\src/tasks.c **** 					is ready to execute. */
1608:Source\bsw\FreeRTOS\src/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1610:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1611:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1612:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Source\bsw\FreeRTOS\src/tasks.c **** 					require a yield as the running task must be above the
1614:Source\bsw\FreeRTOS\src/tasks.c **** 					new priority of the task being modified. */
1615:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1616:Source\bsw\FreeRTOS\src/tasks.c **** 
1617:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Source\bsw\FreeRTOS\src/tasks.c **** 				before its uxPriority member is changed so the
1619:Source\bsw\FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Source\bsw\FreeRTOS\src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Source\bsw\FreeRTOS\src/tasks.c **** 
1622:Source\bsw\FreeRTOS\src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1624:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Source\bsw\FreeRTOS\src/tasks.c **** 					currently using an inherited priority. */
1626:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Source\bsw\FreeRTOS\src/tasks.c **** 					{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 30


1628:Source\bsw\FreeRTOS\src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1630:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1631:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1632:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1634:Source\bsw\FreeRTOS\src/tasks.c **** 
1635:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The base priority gets set whatever. */
1636:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1638:Source\bsw\FreeRTOS\src/tasks.c **** 				#else
1639:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1640:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1642:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif
1643:Source\bsw\FreeRTOS\src/tasks.c **** 
1644:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Source\bsw\FreeRTOS\src/tasks.c **** 				being used for anything else. */
1646:Source\bsw\FreeRTOS\src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1648:Source\bsw\FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1650:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1651:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1652:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1654:Source\bsw\FreeRTOS\src/tasks.c **** 
1655:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Source\bsw\FreeRTOS\src/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Source\bsw\FreeRTOS\src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Source\bsw\FreeRTOS\src/tasks.c **** 				in the list appropriate to its new priority. */
1659:Source\bsw\FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1661:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Source\bsw\FreeRTOS\src/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Source\bsw\FreeRTOS\src/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Source\bsw\FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1666:Source\bsw\FreeRTOS\src/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Source\bsw\FreeRTOS\src/tasks.c **** 						there is no need to check again and the port level
1668:Source\bsw\FreeRTOS\src/tasks.c **** 						reset macro can be called directly. */
1669:Source\bsw\FreeRTOS\src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1671:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1672:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1673:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1675:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1677:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1678:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1679:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1681:Source\bsw\FreeRTOS\src/tasks.c **** 
1682:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1684:Source\bsw\FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 31


1685:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1686:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1687:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1688:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1690:Source\bsw\FreeRTOS\src/tasks.c **** 
1691:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Source\bsw\FreeRTOS\src/tasks.c **** 				optimised task selection is not being used. */
1693:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1695:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1696:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1697:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1698:Source\bsw\FreeRTOS\src/tasks.c **** 
1699:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1701:Source\bsw\FreeRTOS\src/tasks.c **** 
1702:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Source\bsw\FreeRTOS\src/tasks.c **** 
1704:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1706:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
1707:Source\bsw\FreeRTOS\src/tasks.c **** 
1708:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
1709:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1710:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Source\bsw\FreeRTOS\src/tasks.c **** 			being suspended. */
1712:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Source\bsw\FreeRTOS\src/tasks.c **** 
1714:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Source\bsw\FreeRTOS\src/tasks.c **** 
1716:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Source\bsw\FreeRTOS\src/tasks.c **** 			suspended list. */
1718:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1720:Source\bsw\FreeRTOS\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1722:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1723:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1724:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1726:Source\bsw\FreeRTOS\src/tasks.c **** 
1727:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1730:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1732:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1733:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1734:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1736:Source\bsw\FreeRTOS\src/tasks.c **** 
1737:Source\bsw\FreeRTOS\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Source\bsw\FreeRTOS\src/tasks.c **** 
1739:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1741:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 32


1742:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1743:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Source\bsw\FreeRTOS\src/tasks.c **** 					now suspended, so no notification was received. */
1745:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1747:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1748:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
1749:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1750:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
1751:Source\bsw\FreeRTOS\src/tasks.c **** 
1752:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1754:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Source\bsw\FreeRTOS\src/tasks.c **** 			task that is now in the Suspended state. */
1756:Source\bsw\FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1757:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1758:Source\bsw\FreeRTOS\src/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1760:Source\bsw\FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1761:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1762:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1763:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1764:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1766:Source\bsw\FreeRTOS\src/tasks.c **** 
1767:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1769:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1771:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The current task has just been suspended. */
1772:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Source\bsw\FreeRTOS\src/tasks.c **** 				portYIELD_WITHIN_API();
1774:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1775:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1776:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1777:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Source\bsw\FreeRTOS\src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Source\bsw\FreeRTOS\src/tasks.c **** 				must be adjusted to point to a different task. */
1780:Source\bsw\FreeRTOS\src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1782:Source\bsw\FreeRTOS\src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Source\bsw\FreeRTOS\src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Source\bsw\FreeRTOS\src/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Source\bsw\FreeRTOS\src/tasks.c **** 					is. */
1786:Source\bsw\FreeRTOS\src/tasks.c **** 					pxCurrentTCB = NULL;
1787:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1788:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1789:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1790:Source\bsw\FreeRTOS\src/tasks.c **** 					vTaskSwitchContext();
1791:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1792:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1793:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1794:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1795:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1796:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1798:Source\bsw\FreeRTOS\src/tasks.c **** 	}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 33


1799:Source\bsw\FreeRTOS\src/tasks.c **** 
1800:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1802:Source\bsw\FreeRTOS\src/tasks.c **** 
1803:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Source\bsw\FreeRTOS\src/tasks.c **** 
1805:Source\bsw\FreeRTOS\src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Source\bsw\FreeRTOS\src/tasks.c **** 	{
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Source\bsw\FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Source\bsw\FreeRTOS\src/tasks.c **** 
1810:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Source\bsw\FreeRTOS\src/tasks.c **** 		section. */
1812:Source\bsw\FreeRTOS\src/tasks.c **** 
1813:Source\bsw\FreeRTOS\src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTask );
1815:Source\bsw\FreeRTOS\src/tasks.c **** 
1816:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Source\bsw\FreeRTOS\src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1817 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1818:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1819:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  38              		.loc 1 1820 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1821:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1822:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Source\bsw\FreeRTOS\src/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Source\bsw\FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  43              		.loc 1 1824 0
  44 0010 2BB1     		cbz	r3, .L5
1807:Source\bsw\FreeRTOS\src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1807 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 34


  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1825:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1826:Source\bsw\FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
  61              		.loc 1 1826 0
  62 001e 0120     		movs	r0, #1
  63              	.LVL7:
1827:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1828:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1829:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1830:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1832:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1833:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1834:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1835:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1837:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1838:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1839:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1840:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1842:Source\bsw\FreeRTOS\src/tasks.c **** 
1843:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
1844:Source\bsw\FreeRTOS\src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1844 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE79:
  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvTaskCheckFreeStackSpace, %function
  79              	prvTaskCheckFreeStackSpace:
  80              	.LFB104:
1845:Source\bsw\FreeRTOS\src/tasks.c **** 
1846:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1848:Source\bsw\FreeRTOS\src/tasks.c **** 
1849:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Source\bsw\FreeRTOS\src/tasks.c **** 
1851:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1853:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Source\bsw\FreeRTOS\src/tasks.c **** 
1855:Source\bsw\FreeRTOS\src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToResume );
1857:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 35


1858:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Source\bsw\FreeRTOS\src/tasks.c **** 		currently executing task. */
1860:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1862:Source\bsw\FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
1863:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1864:Source\bsw\FreeRTOS\src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1866:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Source\bsw\FreeRTOS\src/tasks.c **** 
1868:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Source\bsw\FreeRTOS\src/tasks.c **** 					suspended because this is inside a critical section. */
1870:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Source\bsw\FreeRTOS\src/tasks.c **** 
1873:Source\bsw\FreeRTOS\src/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1876:Source\bsw\FreeRTOS\src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Source\bsw\FreeRTOS\src/tasks.c **** 						but will leave the lists in the correct state for the
1878:Source\bsw\FreeRTOS\src/tasks.c **** 						next yield. */
1879:Source\bsw\FreeRTOS\src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1881:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1882:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1883:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1885:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1886:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1887:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1888:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1890:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1891:Source\bsw\FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
1892:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1893:Source\bsw\FreeRTOS\src/tasks.c **** 		else
1894:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1895:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1897:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1898:Source\bsw\FreeRTOS\src/tasks.c **** 
1899:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Source\bsw\FreeRTOS\src/tasks.c **** 
1901:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1902:Source\bsw\FreeRTOS\src/tasks.c **** 
1903:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Source\bsw\FreeRTOS\src/tasks.c **** 
1905:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1907:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Source\bsw\FreeRTOS\src/tasks.c **** 
1911:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToResume );
1912:Source\bsw\FreeRTOS\src/tasks.c **** 
1913:Source\bsw\FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Source\bsw\FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 36


1915:Source\bsw\FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Source\bsw\FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Source\bsw\FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Source\bsw\FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Source\bsw\FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Source\bsw\FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Source\bsw\FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Source\bsw\FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Source\bsw\FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Source\bsw\FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Source\bsw\FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Source\bsw\FreeRTOS\src/tasks.c **** 		provided on the following link:
1928:Source\bsw\FreeRTOS\src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Source\bsw\FreeRTOS\src/tasks.c **** 
1931:Source\bsw\FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1933:Source\bsw\FreeRTOS\src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1935:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Source\bsw\FreeRTOS\src/tasks.c **** 
1937:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Source\bsw\FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1940:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Source\bsw\FreeRTOS\src/tasks.c **** 					suspended list to the ready list directly. */
1942:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1944:Source\bsw\FreeRTOS\src/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1946:Source\bsw\FreeRTOS\src/tasks.c **** 					else
1947:Source\bsw\FreeRTOS\src/tasks.c **** 					{
1948:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Source\bsw\FreeRTOS\src/tasks.c **** 					}
1950:Source\bsw\FreeRTOS\src/tasks.c **** 
1951:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1954:Source\bsw\FreeRTOS\src/tasks.c **** 				else
1955:Source\bsw\FreeRTOS\src/tasks.c **** 				{
1956:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Source\bsw\FreeRTOS\src/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Source\bsw\FreeRTOS\src/tasks.c **** 					unsuspended. */
1959:Source\bsw\FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Source\bsw\FreeRTOS\src/tasks.c **** 				}
1961:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1962:Source\bsw\FreeRTOS\src/tasks.c **** 			else
1963:Source\bsw\FreeRTOS\src/tasks.c **** 			{
1964:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Source\bsw\FreeRTOS\src/tasks.c **** 			}
1966:Source\bsw\FreeRTOS\src/tasks.c **** 		}
1967:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Source\bsw\FreeRTOS\src/tasks.c **** 
1969:Source\bsw\FreeRTOS\src/tasks.c **** 		return xYieldRequired;
1970:Source\bsw\FreeRTOS\src/tasks.c **** 	}
1971:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 37


1972:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
1974:Source\bsw\FreeRTOS\src/tasks.c **** 
1975:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskStartScheduler( void )
1976:Source\bsw\FreeRTOS\src/tasks.c **** {
1977:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xReturn;
1978:Source\bsw\FreeRTOS\src/tasks.c **** 
1979:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Source\bsw\FreeRTOS\src/tasks.c **** 	{
1982:Source\bsw\FreeRTOS\src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Source\bsw\FreeRTOS\src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Source\bsw\FreeRTOS\src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Source\bsw\FreeRTOS\src/tasks.c **** 
1986:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Source\bsw\FreeRTOS\src/tasks.c **** 		address of the RAM then create the idle task. */
1988:Source\bsw\FreeRTOS\src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Source\bsw\FreeRTOS\src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Source\bsw\FreeRTOS\src/tasks.c **** 												configIDLE_TASK_NAME,
1991:Source\bsw\FreeRTOS\src/tasks.c **** 												ulIdleTaskStackSize,
1992:Source\bsw\FreeRTOS\src/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Source\bsw\FreeRTOS\src/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Source\bsw\FreeRTOS\src/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Source\bsw\FreeRTOS\src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Source\bsw\FreeRTOS\src/tasks.c **** 
1997:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Source\bsw\FreeRTOS\src/tasks.c **** 		{
1999:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
2000:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2001:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2002:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2003:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdFAIL;
2004:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2005:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2006:Source\bsw\FreeRTOS\src/tasks.c **** 	#else
2007:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2008:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Source\bsw\FreeRTOS\src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Source\bsw\FreeRTOS\src/tasks.c **** 								configIDLE_TASK_NAME,
2011:Source\bsw\FreeRTOS\src/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Source\bsw\FreeRTOS\src/tasks.c **** 								( void * ) NULL,
2013:Source\bsw\FreeRTOS\src/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Source\bsw\FreeRTOS\src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2016:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Source\bsw\FreeRTOS\src/tasks.c **** 
2018:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2020:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xReturn == pdPASS )
2021:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2022:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2024:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2025:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2026:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2028:Source\bsw\FreeRTOS\src/tasks.c **** 	}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 38


2029:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Source\bsw\FreeRTOS\src/tasks.c **** 
2031:Source\bsw\FreeRTOS\src/tasks.c **** 	if( xReturn == pdPASS )
2032:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2033:Source\bsw\FreeRTOS\src/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Source\bsw\FreeRTOS\src/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Source\bsw\FreeRTOS\src/tasks.c **** 		the only macro called by the function. */
2036:Source\bsw\FreeRTOS\src/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2038:Source\bsw\FreeRTOS\src/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2040:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
2041:Source\bsw\FreeRTOS\src/tasks.c **** 
2042:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Source\bsw\FreeRTOS\src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Source\bsw\FreeRTOS\src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Source\bsw\FreeRTOS\src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Source\bsw\FreeRTOS\src/tasks.c **** 		starts to run. */
2047:Source\bsw\FreeRTOS\src/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Source\bsw\FreeRTOS\src/tasks.c **** 
2049:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2051:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Source\bsw\FreeRTOS\src/tasks.c **** 			structure specific to the task that will run first.
2053:Source\bsw\FreeRTOS\src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Source\bsw\FreeRTOS\src/tasks.c **** 			for additional information. */
2055:Source\bsw\FreeRTOS\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2057:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Source\bsw\FreeRTOS\src/tasks.c **** 
2059:Source\bsw\FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Source\bsw\FreeRTOS\src/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Source\bsw\FreeRTOS\src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Source\bsw\FreeRTOS\src/tasks.c **** 
2063:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Source\bsw\FreeRTOS\src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Source\bsw\FreeRTOS\src/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Source\bsw\FreeRTOS\src/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Source\bsw\FreeRTOS\src/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Source\bsw\FreeRTOS\src/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Source\bsw\FreeRTOS\src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Source\bsw\FreeRTOS\src/tasks.c **** 
2071:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Source\bsw\FreeRTOS\src/tasks.c **** 
2073:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Source\bsw\FreeRTOS\src/tasks.c **** 		portable interface. */
2075:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2077:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Source\bsw\FreeRTOS\src/tasks.c **** 			function will not return. */
2079:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2080:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2081:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2082:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2084:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2085:Source\bsw\FreeRTOS\src/tasks.c **** 	else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 39


2086:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2087:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Source\bsw\FreeRTOS\src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Source\bsw\FreeRTOS\src/tasks.c **** 		or the timer task. */
2090:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2092:Source\bsw\FreeRTOS\src/tasks.c **** 
2093:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Source\bsw\FreeRTOS\src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Source\bsw\FreeRTOS\src/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Source\bsw\FreeRTOS\src/tasks.c **** }
2097:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2098:Source\bsw\FreeRTOS\src/tasks.c **** 
2099:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskEndScheduler( void )
2100:Source\bsw\FreeRTOS\src/tasks.c **** {
2101:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Source\bsw\FreeRTOS\src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Source\bsw\FreeRTOS\src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Source\bsw\FreeRTOS\src/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Source\bsw\FreeRTOS\src/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Source\bsw\FreeRTOS\src/tasks.c **** 	vPortEndScheduler();
2107:Source\bsw\FreeRTOS\src/tasks.c **** }
2108:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2109:Source\bsw\FreeRTOS\src/tasks.c **** 
2110:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskSuspendAll( void )
2111:Source\bsw\FreeRTOS\src/tasks.c **** {
2112:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Source\bsw\FreeRTOS\src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Source\bsw\FreeRTOS\src/tasks.c **** 	http://goo.gl/wu4acr */
2116:Source\bsw\FreeRTOS\src/tasks.c **** 
2117:Source\bsw\FreeRTOS\src/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Source\bsw\FreeRTOS\src/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Source\bsw\FreeRTOS\src/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Source\bsw\FreeRTOS\src/tasks.c **** 
2121:Source\bsw\FreeRTOS\src/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Source\bsw\FreeRTOS\src/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Source\bsw\FreeRTOS\src/tasks.c **** 	++uxSchedulerSuspended;
2124:Source\bsw\FreeRTOS\src/tasks.c **** 
2125:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Source\bsw\FreeRTOS\src/tasks.c **** 	the above increment elsewhere. */
2127:Source\bsw\FreeRTOS\src/tasks.c **** 	portMEMORY_BARRIER();
2128:Source\bsw\FreeRTOS\src/tasks.c **** }
2129:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2130:Source\bsw\FreeRTOS\src/tasks.c **** 
2131:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Source\bsw\FreeRTOS\src/tasks.c **** 
2133:Source\bsw\FreeRTOS\src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2135:Source\bsw\FreeRTOS\src/tasks.c **** 	TickType_t xReturn;
2136:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Source\bsw\FreeRTOS\src/tasks.c **** 
2138:Source\bsw\FreeRTOS\src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Source\bsw\FreeRTOS\src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Source\bsw\FreeRTOS\src/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Source\bsw\FreeRTOS\src/tasks.c **** 		running. */
2142:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 40


2143:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2144:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2146:Source\bsw\FreeRTOS\src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2148:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2149:Source\bsw\FreeRTOS\src/tasks.c **** 		#else
2150:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2151:Source\bsw\FreeRTOS\src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Source\bsw\FreeRTOS\src/tasks.c **** 
2153:Source\bsw\FreeRTOS\src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Source\bsw\FreeRTOS\src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Source\bsw\FreeRTOS\src/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Source\bsw\FreeRTOS\src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Source\bsw\FreeRTOS\src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2160:Source\bsw\FreeRTOS\src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2162:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2163:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
2164:Source\bsw\FreeRTOS\src/tasks.c **** 
2165:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2167:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = 0;
2168:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2169:Source\bsw\FreeRTOS\src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2171:Source\bsw\FreeRTOS\src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Source\bsw\FreeRTOS\src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Source\bsw\FreeRTOS\src/tasks.c **** 			processed. */
2174:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = 0;
2175:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2176:Source\bsw\FreeRTOS\src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2178:Source\bsw\FreeRTOS\src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Source\bsw\FreeRTOS\src/tasks.c **** 			idle priority.  This path can only be reached if
2180:Source\bsw\FreeRTOS\src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = 0;
2182:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2183:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2184:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2185:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2187:Source\bsw\FreeRTOS\src/tasks.c **** 
2188:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
2189:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2190:Source\bsw\FreeRTOS\src/tasks.c **** 
2191:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2193:Source\bsw\FreeRTOS\src/tasks.c **** 
2194:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Source\bsw\FreeRTOS\src/tasks.c **** {
2196:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxTCB = NULL;
2197:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Source\bsw\FreeRTOS\src/tasks.c **** 
2199:Source\bsw\FreeRTOS\src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 41


2200:Source\bsw\FreeRTOS\src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Source\bsw\FreeRTOS\src/tasks.c **** 
2203:Source\bsw\FreeRTOS\src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Source\bsw\FreeRTOS\src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Source\bsw\FreeRTOS\src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Source\bsw\FreeRTOS\src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Source\bsw\FreeRTOS\src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Source\bsw\FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
2209:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2210:Source\bsw\FreeRTOS\src/tasks.c **** 		--uxSchedulerSuspended;
2211:Source\bsw\FreeRTOS\src/tasks.c **** 
2212:Source\bsw\FreeRTOS\src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2214:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2216:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Source\bsw\FreeRTOS\src/tasks.c **** 				appropriate ready list. */
2218:Source\bsw\FreeRTOS\src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2220:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Source\bsw\FreeRTOS\src/tasks.c **** 
2225:Source\bsw\FreeRTOS\src/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Source\bsw\FreeRTOS\src/tasks.c **** 					task then a yield must be performed. */
2227:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2229:Source\bsw\FreeRTOS\src/tasks.c **** 						xYieldPending = pdTRUE;
2230:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2231:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2232:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2233:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2235:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2236:Source\bsw\FreeRTOS\src/tasks.c **** 
2237:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB != NULL )
2238:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2239:Source\bsw\FreeRTOS\src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Source\bsw\FreeRTOS\src/tasks.c **** 					which may have prevented the next unblock time from being
2241:Source\bsw\FreeRTOS\src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Source\bsw\FreeRTOS\src/tasks.c **** 					important for low power tickless implementations, where
2243:Source\bsw\FreeRTOS\src/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Source\bsw\FreeRTOS\src/tasks.c **** 					state. */
2245:Source\bsw\FreeRTOS\src/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2247:Source\bsw\FreeRTOS\src/tasks.c **** 
2248:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Source\bsw\FreeRTOS\src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Source\bsw\FreeRTOS\src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Source\bsw\FreeRTOS\src/tasks.c **** 				time. */
2252:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2253:Source\bsw\FreeRTOS\src/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Source\bsw\FreeRTOS\src/tasks.c **** 
2255:Source\bsw\FreeRTOS\src/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Source\bsw\FreeRTOS\src/tasks.c **** 					{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 42


2257:Source\bsw\FreeRTOS\src/tasks.c **** 						do
2258:Source\bsw\FreeRTOS\src/tasks.c **** 						{
2259:Source\bsw\FreeRTOS\src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Source\bsw\FreeRTOS\src/tasks.c **** 							{
2261:Source\bsw\FreeRTOS\src/tasks.c **** 								xYieldPending = pdTRUE;
2262:Source\bsw\FreeRTOS\src/tasks.c **** 							}
2263:Source\bsw\FreeRTOS\src/tasks.c **** 							else
2264:Source\bsw\FreeRTOS\src/tasks.c **** 							{
2265:Source\bsw\FreeRTOS\src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Source\bsw\FreeRTOS\src/tasks.c **** 							}
2267:Source\bsw\FreeRTOS\src/tasks.c **** 							--xPendedCounts;
2268:Source\bsw\FreeRTOS\src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Source\bsw\FreeRTOS\src/tasks.c **** 
2270:Source\bsw\FreeRTOS\src/tasks.c **** 						xPendedTicks = 0;
2271:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2272:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2273:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2274:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2276:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2277:Source\bsw\FreeRTOS\src/tasks.c **** 
2278:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2280:Source\bsw\FreeRTOS\src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2282:Source\bsw\FreeRTOS\src/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2284:Source\bsw\FreeRTOS\src/tasks.c **** 					#endif
2285:Source\bsw\FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2287:Source\bsw\FreeRTOS\src/tasks.c **** 				else
2288:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2289:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2291:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2292:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2293:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2294:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2295:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2297:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2298:Source\bsw\FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
2299:Source\bsw\FreeRTOS\src/tasks.c **** 
2300:Source\bsw\FreeRTOS\src/tasks.c **** 	return xAlreadyYielded;
2301:Source\bsw\FreeRTOS\src/tasks.c **** }
2302:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2303:Source\bsw\FreeRTOS\src/tasks.c **** 
2304:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Source\bsw\FreeRTOS\src/tasks.c **** {
2306:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xTicks;
2307:Source\bsw\FreeRTOS\src/tasks.c **** 
2308:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Source\bsw\FreeRTOS\src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2311:Source\bsw\FreeRTOS\src/tasks.c **** 		xTicks = xTickCount;
2312:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2313:Source\bsw\FreeRTOS\src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 43


2314:Source\bsw\FreeRTOS\src/tasks.c **** 
2315:Source\bsw\FreeRTOS\src/tasks.c **** 	return xTicks;
2316:Source\bsw\FreeRTOS\src/tasks.c **** }
2317:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2318:Source\bsw\FreeRTOS\src/tasks.c **** 
2319:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Source\bsw\FreeRTOS\src/tasks.c **** {
2321:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xReturn;
2322:Source\bsw\FreeRTOS\src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Source\bsw\FreeRTOS\src/tasks.c **** 
2324:Source\bsw\FreeRTOS\src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Source\bsw\FreeRTOS\src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Source\bsw\FreeRTOS\src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Source\bsw\FreeRTOS\src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Source\bsw\FreeRTOS\src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Source\bsw\FreeRTOS\src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Source\bsw\FreeRTOS\src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Source\bsw\FreeRTOS\src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Source\bsw\FreeRTOS\src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Source\bsw\FreeRTOS\src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Source\bsw\FreeRTOS\src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Source\bsw\FreeRTOS\src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Source\bsw\FreeRTOS\src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Source\bsw\FreeRTOS\src/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Source\bsw\FreeRTOS\src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Source\bsw\FreeRTOS\src/tasks.c **** 
2340:Source\bsw\FreeRTOS\src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2342:Source\bsw\FreeRTOS\src/tasks.c **** 		xReturn = xTickCount;
2343:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2344:Source\bsw\FreeRTOS\src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Source\bsw\FreeRTOS\src/tasks.c **** 
2346:Source\bsw\FreeRTOS\src/tasks.c **** 	return xReturn;
2347:Source\bsw\FreeRTOS\src/tasks.c **** }
2348:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2349:Source\bsw\FreeRTOS\src/tasks.c **** 
2350:Source\bsw\FreeRTOS\src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Source\bsw\FreeRTOS\src/tasks.c **** {
2352:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t. */
2354:Source\bsw\FreeRTOS\src/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Source\bsw\FreeRTOS\src/tasks.c **** }
2356:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2357:Source\bsw\FreeRTOS\src/tasks.c **** 
2358:Source\bsw\FreeRTOS\src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Source\bsw\FreeRTOS\src/tasks.c **** {
2360:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
2361:Source\bsw\FreeRTOS\src/tasks.c **** 
2362:Source\bsw\FreeRTOS\src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Source\bsw\FreeRTOS\src/tasks.c **** 	queried. */
2364:Source\bsw\FreeRTOS\src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
2366:Source\bsw\FreeRTOS\src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Source\bsw\FreeRTOS\src/tasks.c **** }
2368:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2369:Source\bsw\FreeRTOS\src/tasks.c **** 
2370:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 44


2371:Source\bsw\FreeRTOS\src/tasks.c **** 
2372:Source\bsw\FreeRTOS\src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2374:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t x;
2376:Source\bsw\FreeRTOS\src/tasks.c **** 	char cNextChar;
2377:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xBreakLoop;
2378:Source\bsw\FreeRTOS\src/tasks.c **** 
2379:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Source\bsw\FreeRTOS\src/tasks.c **** 
2381:Source\bsw\FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2383:Source\bsw\FreeRTOS\src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Source\bsw\FreeRTOS\src/tasks.c **** 
2385:Source\bsw\FreeRTOS\src/tasks.c **** 			do
2386:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2387:Source\bsw\FreeRTOS\src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Source\bsw\FreeRTOS\src/tasks.c **** 
2389:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Source\bsw\FreeRTOS\src/tasks.c **** 				mismatch. */
2391:Source\bsw\FreeRTOS\src/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Source\bsw\FreeRTOS\src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2394:Source\bsw\FreeRTOS\src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Source\bsw\FreeRTOS\src/tasks.c **** 
2396:Source\bsw\FreeRTOS\src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2398:Source\bsw\FreeRTOS\src/tasks.c **** 						/* Characters didn't match. */
2399:Source\bsw\FreeRTOS\src/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2401:Source\bsw\FreeRTOS\src/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2403:Source\bsw\FreeRTOS\src/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Source\bsw\FreeRTOS\src/tasks.c **** 						found. */
2405:Source\bsw\FreeRTOS\src/tasks.c **** 						pxReturn = pxNextTCB;
2406:Source\bsw\FreeRTOS\src/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2408:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2409:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2410:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2412:Source\bsw\FreeRTOS\src/tasks.c **** 
2413:Source\bsw\FreeRTOS\src/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2415:Source\bsw\FreeRTOS\src/tasks.c **** 						break;
2416:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2417:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2418:Source\bsw\FreeRTOS\src/tasks.c **** 
2419:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxReturn != NULL )
2420:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2421:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The handle has been found. */
2422:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
2423:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2424:Source\bsw\FreeRTOS\src/tasks.c **** 
2425:Source\bsw\FreeRTOS\src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2427:Source\bsw\FreeRTOS\src/tasks.c **** 		else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 45


2428:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2429:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2431:Source\bsw\FreeRTOS\src/tasks.c **** 
2432:Source\bsw\FreeRTOS\src/tasks.c **** 		return pxReturn;
2433:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2434:Source\bsw\FreeRTOS\src/tasks.c **** 
2435:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2437:Source\bsw\FreeRTOS\src/tasks.c **** 
2438:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Source\bsw\FreeRTOS\src/tasks.c **** 
2440:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2442:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t* pxTCB;
2444:Source\bsw\FreeRTOS\src/tasks.c **** 
2445:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Source\bsw\FreeRTOS\src/tasks.c **** 
2448:Source\bsw\FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2449:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2450:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Search the ready lists. */
2451:Source\bsw\FreeRTOS\src/tasks.c **** 			do
2452:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2453:Source\bsw\FreeRTOS\src/tasks.c **** 				uxQueue--;
2454:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Source\bsw\FreeRTOS\src/tasks.c **** 
2456:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB != NULL )
2457:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2458:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Found the handle. */
2459:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
2460:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2461:Source\bsw\FreeRTOS\src/tasks.c **** 
2462:Source\bsw\FreeRTOS\src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Source\bsw\FreeRTOS\src/tasks.c **** 
2464:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Search the delayed lists. */
2465:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB == NULL )
2466:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2467:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2469:Source\bsw\FreeRTOS\src/tasks.c **** 
2470:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB == NULL )
2471:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2472:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2474:Source\bsw\FreeRTOS\src/tasks.c **** 
2475:Source\bsw\FreeRTOS\src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2477:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB == NULL )
2478:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2479:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Search the suspended list. */
2480:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2482:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2483:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
2484:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 46


2485:Source\bsw\FreeRTOS\src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2487:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB == NULL )
2488:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2489:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Search the deleted list. */
2490:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2492:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2493:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
2494:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2495:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2496:Source\bsw\FreeRTOS\src/tasks.c **** 
2497:Source\bsw\FreeRTOS\src/tasks.c **** 		return pxTCB;
2498:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2499:Source\bsw\FreeRTOS\src/tasks.c **** 
2500:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2502:Source\bsw\FreeRTOS\src/tasks.c **** 
2503:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Source\bsw\FreeRTOS\src/tasks.c **** 
2505:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2507:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Source\bsw\FreeRTOS\src/tasks.c **** 
2509:Source\bsw\FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2510:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2511:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2514:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Source\bsw\FreeRTOS\src/tasks.c **** 				task in the Ready state. */
2516:Source\bsw\FreeRTOS\src/tasks.c **** 				do
2517:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2518:Source\bsw\FreeRTOS\src/tasks.c **** 					uxQueue--;
2519:Source\bsw\FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Source\bsw\FreeRTOS\src/tasks.c **** 
2521:Source\bsw\FreeRTOS\src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Source\bsw\FreeRTOS\src/tasks.c **** 
2523:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Source\bsw\FreeRTOS\src/tasks.c **** 				task in the Blocked state. */
2525:Source\bsw\FreeRTOS\src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Source\bsw\FreeRTOS\src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Source\bsw\FreeRTOS\src/tasks.c **** 
2528:Source\bsw\FreeRTOS\src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2530:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Source\bsw\FreeRTOS\src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Source\bsw\FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2534:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif
2535:Source\bsw\FreeRTOS\src/tasks.c **** 
2536:Source\bsw\FreeRTOS\src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2538:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Source\bsw\FreeRTOS\src/tasks.c **** 					each task in the Suspended state. */
2540:Source\bsw\FreeRTOS\src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Source\bsw\FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 47


2542:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif
2543:Source\bsw\FreeRTOS\src/tasks.c **** 
2544:Source\bsw\FreeRTOS\src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2546:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2548:Source\bsw\FreeRTOS\src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Source\bsw\FreeRTOS\src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Source\bsw\FreeRTOS\src/tasks.c **** 						#else
2551:Source\bsw\FreeRTOS\src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Source\bsw\FreeRTOS\src/tasks.c **** 						#endif
2553:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2554:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2555:Source\bsw\FreeRTOS\src/tasks.c **** 				#else
2556:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2557:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2559:Source\bsw\FreeRTOS\src/tasks.c **** 						*pulTotalRunTime = 0;
2560:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2561:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2562:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif
2563:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2564:Source\bsw\FreeRTOS\src/tasks.c **** 			else
2565:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2566:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2568:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2569:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2570:Source\bsw\FreeRTOS\src/tasks.c **** 
2571:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxTask;
2572:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2573:Source\bsw\FreeRTOS\src/tasks.c **** 
2574:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2576:Source\bsw\FreeRTOS\src/tasks.c **** 
2577:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Source\bsw\FreeRTOS\src/tasks.c **** 
2579:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2581:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Source\bsw\FreeRTOS\src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Source\bsw\FreeRTOS\src/tasks.c **** 		return xIdleTaskHandle;
2585:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2586:Source\bsw\FreeRTOS\src/tasks.c **** 
2587:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2589:Source\bsw\FreeRTOS\src/tasks.c **** 
2590:Source\bsw\FreeRTOS\src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Source\bsw\FreeRTOS\src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Source\bsw\FreeRTOS\src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Source\bsw\FreeRTOS\src/tasks.c **** 1. */
2594:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Source\bsw\FreeRTOS\src/tasks.c **** 
2596:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2598:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 48


2599:Source\bsw\FreeRTOS\src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Source\bsw\FreeRTOS\src/tasks.c **** 		each stepped tick. */
2601:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Source\bsw\FreeRTOS\src/tasks.c **** 		xTickCount += xTicksToJump;
2603:Source\bsw\FreeRTOS\src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2605:Source\bsw\FreeRTOS\src/tasks.c **** 
2606:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2608:Source\bsw\FreeRTOS\src/tasks.c **** 
2609:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Source\bsw\FreeRTOS\src/tasks.c **** {
2611:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Source\bsw\FreeRTOS\src/tasks.c **** 
2613:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Source\bsw\FreeRTOS\src/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Source\bsw\FreeRTOS\src/tasks.c **** 
2617:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Source\bsw\FreeRTOS\src/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Source\bsw\FreeRTOS\src/tasks.c **** 	vTaskSuspendAll();
2620:Source\bsw\FreeRTOS\src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Source\bsw\FreeRTOS\src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Source\bsw\FreeRTOS\src/tasks.c **** 
2623:Source\bsw\FreeRTOS\src/tasks.c **** 	return xYieldRequired;
2624:Source\bsw\FreeRTOS\src/tasks.c **** }
2625:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2626:Source\bsw\FreeRTOS\src/tasks.c **** 
2627:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Source\bsw\FreeRTOS\src/tasks.c **** 
2629:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2631:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
2633:Source\bsw\FreeRTOS\src/tasks.c **** 
2634:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxTCB );
2635:Source\bsw\FreeRTOS\src/tasks.c **** 
2636:Source\bsw\FreeRTOS\src/tasks.c **** 		vTaskSuspendAll();
2637:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2638:Source\bsw\FreeRTOS\src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Source\bsw\FreeRTOS\src/tasks.c **** 			it is actually in the Blocked state. */
2640:Source\bsw\FreeRTOS\src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2642:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
2643:Source\bsw\FreeRTOS\src/tasks.c **** 
2644:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Source\bsw\FreeRTOS\src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Source\bsw\FreeRTOS\src/tasks.c **** 				scheduler is suspended. */
2647:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Source\bsw\FreeRTOS\src/tasks.c **** 
2649:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Source\bsw\FreeRTOS\src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Source\bsw\FreeRTOS\src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Source\bsw\FreeRTOS\src/tasks.c **** 				is used. */
2653:Source\bsw\FreeRTOS\src/tasks.c **** 				taskENTER_CRITICAL();
2654:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2655:Source\bsw\FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 49


2656:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2657:Source\bsw\FreeRTOS\src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Source\bsw\FreeRTOS\src/tasks.c **** 
2659:Source\bsw\FreeRTOS\src/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Source\bsw\FreeRTOS\src/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Source\bsw\FreeRTOS\src/tasks.c **** 						then block again. */
2662:Source\bsw\FreeRTOS\src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2664:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2665:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2666:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2668:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2669:Source\bsw\FreeRTOS\src/tasks.c **** 				taskEXIT_CRITICAL();
2670:Source\bsw\FreeRTOS\src/tasks.c **** 
2671:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Source\bsw\FreeRTOS\src/tasks.c **** 
2674:Source\bsw\FreeRTOS\src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Source\bsw\FreeRTOS\src/tasks.c **** 				switch if preemption is turned off. */
2676:Source\bsw\FreeRTOS\src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2678:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Source\bsw\FreeRTOS\src/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Source\bsw\FreeRTOS\src/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2683:Source\bsw\FreeRTOS\src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Source\bsw\FreeRTOS\src/tasks.c **** 						is unsuspended. */
2685:Source\bsw\FreeRTOS\src/tasks.c **** 						xYieldPending = pdTRUE;
2686:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2687:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2688:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2689:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2691:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2692:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2694:Source\bsw\FreeRTOS\src/tasks.c **** 			else
2695:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2696:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdFAIL;
2697:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2698:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2699:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) xTaskResumeAll();
2700:Source\bsw\FreeRTOS\src/tasks.c **** 
2701:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
2702:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2703:Source\bsw\FreeRTOS\src/tasks.c **** 
2704:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
2706:Source\bsw\FreeRTOS\src/tasks.c **** 
2707:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Source\bsw\FreeRTOS\src/tasks.c **** {
2709:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t * pxTCB;
2710:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xItemValue;
2711:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 50


2713:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Source\bsw\FreeRTOS\src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Source\bsw\FreeRTOS\src/tasks.c **** 	tasks to be unblocked. */
2716:Source\bsw\FreeRTOS\src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2719:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Source\bsw\FreeRTOS\src/tasks.c **** 		block. */
2721:Source\bsw\FreeRTOS\src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Source\bsw\FreeRTOS\src/tasks.c **** 
2723:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Source\bsw\FreeRTOS\src/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Source\bsw\FreeRTOS\src/tasks.c **** 		xTickCount = xConstTickCount;
2726:Source\bsw\FreeRTOS\src/tasks.c **** 
2727:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2729:Source\bsw\FreeRTOS\src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2731:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2732:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2733:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2735:Source\bsw\FreeRTOS\src/tasks.c **** 
2736:Source\bsw\FreeRTOS\src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Source\bsw\FreeRTOS\src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Source\bsw\FreeRTOS\src/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Source\bsw\FreeRTOS\src/tasks.c **** 		look any further down the list. */
2740:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2742:Source\bsw\FreeRTOS\src/tasks.c **** 			for( ;; )
2743:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2744:Source\bsw\FreeRTOS\src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2746:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Source\bsw\FreeRTOS\src/tasks.c **** 					to the maximum possible value so it is extremely
2748:Source\bsw\FreeRTOS\src/tasks.c **** 					unlikely that the
2749:Source\bsw\FreeRTOS\src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Source\bsw\FreeRTOS\src/tasks.c **** 					next time through. */
2751:Source\bsw\FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
2753:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2754:Source\bsw\FreeRTOS\src/tasks.c **** 				else
2755:Source\bsw\FreeRTOS\src/tasks.c **** 				{
2756:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Source\bsw\FreeRTOS\src/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Source\bsw\FreeRTOS\src/tasks.c **** 					at which the task at the head of the delayed list must
2759:Source\bsw\FreeRTOS\src/tasks.c **** 					be removed from the Blocked state. */
2760:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Source\bsw\FreeRTOS\src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Source\bsw\FreeRTOS\src/tasks.c **** 
2763:Source\bsw\FreeRTOS\src/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2765:Source\bsw\FreeRTOS\src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Source\bsw\FreeRTOS\src/tasks.c **** 						item value is the time at which the task at the head
2767:Source\bsw\FreeRTOS\src/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Source\bsw\FreeRTOS\src/tasks.c **** 						state -	so record the item value in
2769:Source\bsw\FreeRTOS\src/tasks.c **** 						xNextTaskUnblockTime. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 51


2770:Source\bsw\FreeRTOS\src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Source\bsw\FreeRTOS\src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2773:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2774:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2775:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2777:Source\bsw\FreeRTOS\src/tasks.c **** 
2778:Source\bsw\FreeRTOS\src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:Source\bsw\FreeRTOS\src/tasks.c **** 
2781:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Source\bsw\FreeRTOS\src/tasks.c **** 					it from the event list. */
2783:Source\bsw\FreeRTOS\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2785:Source\bsw\FreeRTOS\src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2787:Source\bsw\FreeRTOS\src/tasks.c **** 					else
2788:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2789:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2791:Source\bsw\FreeRTOS\src/tasks.c **** 
2792:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Source\bsw\FreeRTOS\src/tasks.c **** 					list. */
2794:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Source\bsw\FreeRTOS\src/tasks.c **** 
2796:Source\bsw\FreeRTOS\src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Source\bsw\FreeRTOS\src/tasks.c **** 					context switch if preemption is turned off. */
2798:Source\bsw\FreeRTOS\src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Source\bsw\FreeRTOS\src/tasks.c **** 					{
2800:Source\bsw\FreeRTOS\src/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Source\bsw\FreeRTOS\src/tasks.c **** 						only be performed if the unblocked task has a
2802:Source\bsw\FreeRTOS\src/tasks.c **** 						priority that is equal to or higher than the
2803:Source\bsw\FreeRTOS\src/tasks.c **** 						currently executing task. */
2804:Source\bsw\FreeRTOS\src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Source\bsw\FreeRTOS\src/tasks.c **** 						{
2806:Source\bsw\FreeRTOS\src/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Source\bsw\FreeRTOS\src/tasks.c **** 						}
2808:Source\bsw\FreeRTOS\src/tasks.c **** 						else
2809:Source\bsw\FreeRTOS\src/tasks.c **** 						{
2810:Source\bsw\FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Source\bsw\FreeRTOS\src/tasks.c **** 						}
2812:Source\bsw\FreeRTOS\src/tasks.c **** 					}
2813:Source\bsw\FreeRTOS\src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Source\bsw\FreeRTOS\src/tasks.c **** 				}
2815:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2816:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2817:Source\bsw\FreeRTOS\src/tasks.c **** 
2818:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Source\bsw\FreeRTOS\src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Source\bsw\FreeRTOS\src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2823:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2825:Source\bsw\FreeRTOS\src/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Source\bsw\FreeRTOS\src/tasks.c **** 			}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 52


2827:Source\bsw\FreeRTOS\src/tasks.c **** 			else
2828:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2829:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2831:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2832:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Source\bsw\FreeRTOS\src/tasks.c **** 
2834:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2836:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Source\bsw\FreeRTOS\src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2840:Source\bsw\FreeRTOS\src/tasks.c **** 				vApplicationTickHook();
2841:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2842:Source\bsw\FreeRTOS\src/tasks.c **** 			else
2843:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2844:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2846:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2847:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Source\bsw\FreeRTOS\src/tasks.c **** 
2849:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2851:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2853:Source\bsw\FreeRTOS\src/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2855:Source\bsw\FreeRTOS\src/tasks.c **** 			else
2856:Source\bsw\FreeRTOS\src/tasks.c **** 			{
2857:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Source\bsw\FreeRTOS\src/tasks.c **** 			}
2859:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2860:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2862:Source\bsw\FreeRTOS\src/tasks.c **** 	else
2863:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2864:Source\bsw\FreeRTOS\src/tasks.c **** 		++xPendedTicks;
2865:Source\bsw\FreeRTOS\src/tasks.c **** 
2866:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Source\bsw\FreeRTOS\src/tasks.c **** 		scheduler is locked. */
2868:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2870:Source\bsw\FreeRTOS\src/tasks.c **** 			vApplicationTickHook();
2871:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2872:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
2873:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2874:Source\bsw\FreeRTOS\src/tasks.c **** 
2875:Source\bsw\FreeRTOS\src/tasks.c **** 	return xSwitchRequired;
2876:Source\bsw\FreeRTOS\src/tasks.c **** }
2877:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2878:Source\bsw\FreeRTOS\src/tasks.c **** 
2879:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Source\bsw\FreeRTOS\src/tasks.c **** 
2881:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2883:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *xTCB;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 53


2884:Source\bsw\FreeRTOS\src/tasks.c **** 
2885:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Source\bsw\FreeRTOS\src/tasks.c **** 		getting set. */
2887:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTask == NULL )
2888:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2889:Source\bsw\FreeRTOS\src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2891:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2892:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2893:Source\bsw\FreeRTOS\src/tasks.c **** 			xTCB = xTask;
2894:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2895:Source\bsw\FreeRTOS\src/tasks.c **** 
2896:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Source\bsw\FreeRTOS\src/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
2899:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2900:Source\bsw\FreeRTOS\src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2902:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
2903:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2904:Source\bsw\FreeRTOS\src/tasks.c **** 
2905:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2907:Source\bsw\FreeRTOS\src/tasks.c **** 
2908:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Source\bsw\FreeRTOS\src/tasks.c **** 
2910:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2912:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
2913:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Source\bsw\FreeRTOS\src/tasks.c **** 
2915:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Source\bsw\FreeRTOS\src/tasks.c **** 
2918:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Source\bsw\FreeRTOS\src/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
2921:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2922:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2924:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
2925:Source\bsw\FreeRTOS\src/tasks.c **** 
2926:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
2927:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2928:Source\bsw\FreeRTOS\src/tasks.c **** 
2929:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2931:Source\bsw\FreeRTOS\src/tasks.c **** 
2932:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Source\bsw\FreeRTOS\src/tasks.c **** 
2934:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2936:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
2937:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Source\bsw\FreeRTOS\src/tasks.c **** 
2940:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 54


2941:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Source\bsw\FreeRTOS\src/tasks.c **** 
2943:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Source\bsw\FreeRTOS\src/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Source\bsw\FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2947:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2949:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Source\bsw\FreeRTOS\src/tasks.c **** 
2951:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
2952:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2953:Source\bsw\FreeRTOS\src/tasks.c **** 
2954:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2956:Source\bsw\FreeRTOS\src/tasks.c **** 
2957:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Source\bsw\FreeRTOS\src/tasks.c **** 
2959:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2961:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *xTCB;
2962:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
2963:Source\bsw\FreeRTOS\src/tasks.c **** 
2964:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTask == NULL )
2966:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2967:Source\bsw\FreeRTOS\src/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2969:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2970:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2971:Source\bsw\FreeRTOS\src/tasks.c **** 			xTCB = xTask;
2972:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2973:Source\bsw\FreeRTOS\src/tasks.c **** 
2974:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2976:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2978:Source\bsw\FreeRTOS\src/tasks.c **** 		else
2979:Source\bsw\FreeRTOS\src/tasks.c **** 		{
2980:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdFAIL;
2981:Source\bsw\FreeRTOS\src/tasks.c **** 		}
2982:Source\bsw\FreeRTOS\src/tasks.c **** 
2983:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
2984:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2985:Source\bsw\FreeRTOS\src/tasks.c **** 
2986:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
2988:Source\bsw\FreeRTOS\src/tasks.c **** 
2989:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskSwitchContext( void )
2990:Source\bsw\FreeRTOS\src/tasks.c **** {
2991:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2993:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Source\bsw\FreeRTOS\src/tasks.c **** 		switch. */
2995:Source\bsw\FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
2996:Source\bsw\FreeRTOS\src/tasks.c **** 	}
2997:Source\bsw\FreeRTOS\src/tasks.c **** 	else
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 55


2998:Source\bsw\FreeRTOS\src/tasks.c **** 	{
2999:Source\bsw\FreeRTOS\src/tasks.c **** 		xYieldPending = pdFALSE;
3000:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Source\bsw\FreeRTOS\src/tasks.c **** 
3002:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3004:Source\bsw\FreeRTOS\src/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Source\bsw\FreeRTOS\src/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Source\bsw\FreeRTOS\src/tasks.c **** 			#else
3007:Source\bsw\FreeRTOS\src/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
3009:Source\bsw\FreeRTOS\src/tasks.c **** 
3010:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Source\bsw\FreeRTOS\src/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Source\bsw\FreeRTOS\src/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Source\bsw\FreeRTOS\src/tasks.c **** 			protection here so count values are only valid until the timer
3014:Source\bsw\FreeRTOS\src/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Source\bsw\FreeRTOS\src/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Source\bsw\FreeRTOS\src/tasks.c **** 			are provided by the application, not the kernel. */
3017:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3019:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3021:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3022:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3023:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3025:Source\bsw\FreeRTOS\src/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3027:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Source\bsw\FreeRTOS\src/tasks.c **** 
3029:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Source\bsw\FreeRTOS\src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Source\bsw\FreeRTOS\src/tasks.c **** 
3032:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3035:Source\bsw\FreeRTOS\src/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3037:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3038:Source\bsw\FreeRTOS\src/tasks.c **** 
3039:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Source\bsw\FreeRTOS\src/tasks.c **** 		optimised asm code. */
3041:Source\bsw\FreeRTOS\src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Source\bsw\FreeRTOS\src/tasks.c **** 
3044:Source\bsw\FreeRTOS\src/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3047:Source\bsw\FreeRTOS\src/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3049:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3050:Source\bsw\FreeRTOS\src/tasks.c **** 
3051:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3053:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Source\bsw\FreeRTOS\src/tasks.c **** 			structure specific to this task.
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 56


3055:Source\bsw\FreeRTOS\src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Source\bsw\FreeRTOS\src/tasks.c **** 			for additional information. */
3057:Source\bsw\FreeRTOS\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3059:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3061:Source\bsw\FreeRTOS\src/tasks.c **** }
3062:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3063:Source\bsw\FreeRTOS\src/tasks.c **** 
3064:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Source\bsw\FreeRTOS\src/tasks.c **** {
3066:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
3067:Source\bsw\FreeRTOS\src/tasks.c **** 
3068:Source\bsw\FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Source\bsw\FreeRTOS\src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Source\bsw\FreeRTOS\src/tasks.c **** 
3071:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Source\bsw\FreeRTOS\src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Source\bsw\FreeRTOS\src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Source\bsw\FreeRTOS\src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Source\bsw\FreeRTOS\src/tasks.c **** 
3077:Source\bsw\FreeRTOS\src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Source\bsw\FreeRTOS\src/tasks.c **** }
3079:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3080:Source\bsw\FreeRTOS\src/tasks.c **** 
3081:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Source\bsw\FreeRTOS\src/tasks.c **** {
3083:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
3084:Source\bsw\FreeRTOS\src/tasks.c **** 
3085:Source\bsw\FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Source\bsw\FreeRTOS\src/tasks.c **** 	the event groups implementation. */
3087:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Source\bsw\FreeRTOS\src/tasks.c **** 
3089:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Source\bsw\FreeRTOS\src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Source\bsw\FreeRTOS\src/tasks.c **** 	task that is not in the Blocked state. */
3092:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Source\bsw\FreeRTOS\src/tasks.c **** 
3094:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Source\bsw\FreeRTOS\src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Source\bsw\FreeRTOS\src/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Source\bsw\FreeRTOS\src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Source\bsw\FreeRTOS\src/tasks.c **** 	the task level). */
3099:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Source\bsw\FreeRTOS\src/tasks.c **** 
3101:Source\bsw\FreeRTOS\src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Source\bsw\FreeRTOS\src/tasks.c **** }
3103:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3104:Source\bsw\FreeRTOS\src/tasks.c **** 
3105:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Source\bsw\FreeRTOS\src/tasks.c **** 
3107:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3109:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( pxEventList );
3110:Source\bsw\FreeRTOS\src/tasks.c **** 
3111:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 57


3112:Source\bsw\FreeRTOS\src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Source\bsw\FreeRTOS\src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Source\bsw\FreeRTOS\src/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Source\bsw\FreeRTOS\src/tasks.c **** 
3116:Source\bsw\FreeRTOS\src/tasks.c **** 
3117:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Source\bsw\FreeRTOS\src/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Source\bsw\FreeRTOS\src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Source\bsw\FreeRTOS\src/tasks.c **** 		can be used in place of vListInsert. */
3121:Source\bsw\FreeRTOS\src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Source\bsw\FreeRTOS\src/tasks.c **** 
3123:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Source\bsw\FreeRTOS\src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Source\bsw\FreeRTOS\src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3128:Source\bsw\FreeRTOS\src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3130:Source\bsw\FreeRTOS\src/tasks.c **** 
3131:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Source\bsw\FreeRTOS\src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3134:Source\bsw\FreeRTOS\src/tasks.c **** 
3135:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TIMERS */
3136:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3137:Source\bsw\FreeRTOS\src/tasks.c **** 
3138:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Source\bsw\FreeRTOS\src/tasks.c **** {
3140:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xReturn;
3142:Source\bsw\FreeRTOS\src/tasks.c **** 
3143:Source\bsw\FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Source\bsw\FreeRTOS\src/tasks.c **** 	called from a critical section within an ISR. */
3145:Source\bsw\FreeRTOS\src/tasks.c **** 
3146:Source\bsw\FreeRTOS\src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Source\bsw\FreeRTOS\src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Source\bsw\FreeRTOS\src/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Source\bsw\FreeRTOS\src/tasks.c **** 
3150:Source\bsw\FreeRTOS\src/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Source\bsw\FreeRTOS\src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Source\bsw\FreeRTOS\src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Source\bsw\FreeRTOS\src/tasks.c **** 
3154:Source\bsw\FreeRTOS\src/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Source\bsw\FreeRTOS\src/tasks.c **** 	pxEventList is not empty. */
3156:Source\bsw\FreeRTOS\src/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Source\bsw\FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Source\bsw\FreeRTOS\src/tasks.c **** 
3160:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3162:Source\bsw\FreeRTOS\src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Source\bsw\FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Source\bsw\FreeRTOS\src/tasks.c **** 
3165:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3167:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Source\bsw\FreeRTOS\src/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 58


3169:Source\bsw\FreeRTOS\src/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Source\bsw\FreeRTOS\src/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Source\bsw\FreeRTOS\src/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Source\bsw\FreeRTOS\src/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Source\bsw\FreeRTOS\src/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Source\bsw\FreeRTOS\src/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Source\bsw\FreeRTOS\src/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3177:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3178:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3179:Source\bsw\FreeRTOS\src/tasks.c **** 	else
3180:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3181:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Source\bsw\FreeRTOS\src/tasks.c **** 		pending until the scheduler is resumed. */
3183:Source\bsw\FreeRTOS\src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3185:Source\bsw\FreeRTOS\src/tasks.c **** 
3186:Source\bsw\FreeRTOS\src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3188:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Source\bsw\FreeRTOS\src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Source\bsw\FreeRTOS\src/tasks.c **** 		it should force a context switch now. */
3191:Source\bsw\FreeRTOS\src/tasks.c **** 		xReturn = pdTRUE;
3192:Source\bsw\FreeRTOS\src/tasks.c **** 
3193:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Source\bsw\FreeRTOS\src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Source\bsw\FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
3196:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3197:Source\bsw\FreeRTOS\src/tasks.c **** 	else
3198:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3199:Source\bsw\FreeRTOS\src/tasks.c **** 		xReturn = pdFALSE;
3200:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3201:Source\bsw\FreeRTOS\src/tasks.c **** 
3202:Source\bsw\FreeRTOS\src/tasks.c **** 	return xReturn;
3203:Source\bsw\FreeRTOS\src/tasks.c **** }
3204:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3205:Source\bsw\FreeRTOS\src/tasks.c **** 
3206:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Source\bsw\FreeRTOS\src/tasks.c **** {
3208:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Source\bsw\FreeRTOS\src/tasks.c **** 
3210:Source\bsw\FreeRTOS\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Source\bsw\FreeRTOS\src/tasks.c **** 	the event flags implementation. */
3212:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Source\bsw\FreeRTOS\src/tasks.c **** 
3214:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Store the new item value in the event list. */
3215:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Source\bsw\FreeRTOS\src/tasks.c **** 
3217:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Source\bsw\FreeRTOS\src/tasks.c **** 	event flags. */
3219:Source\bsw\FreeRTOS\src/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Source\bsw\FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Source\bsw\FreeRTOS\src/tasks.c **** 
3223:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3225:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 59


3226:Source\bsw\FreeRTOS\src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Source\bsw\FreeRTOS\src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Source\bsw\FreeRTOS\src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Source\bsw\FreeRTOS\src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Source\bsw\FreeRTOS\src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Source\bsw\FreeRTOS\src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Source\bsw\FreeRTOS\src/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Source\bsw\FreeRTOS\src/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3235:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
3236:Source\bsw\FreeRTOS\src/tasks.c **** 
3237:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Source\bsw\FreeRTOS\src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Source\bsw\FreeRTOS\src/tasks.c **** 	lists. */
3240:Source\bsw\FreeRTOS\src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Source\bsw\FreeRTOS\src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Source\bsw\FreeRTOS\src/tasks.c **** 
3243:Source\bsw\FreeRTOS\src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3245:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Source\bsw\FreeRTOS\src/tasks.c **** 		a context switch is required.  This function is called with the
3247:Source\bsw\FreeRTOS\src/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Source\bsw\FreeRTOS\src/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Source\bsw\FreeRTOS\src/tasks.c **** 		xYieldPending = pdTRUE;
3250:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3251:Source\bsw\FreeRTOS\src/tasks.c **** }
3252:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3253:Source\bsw\FreeRTOS\src/tasks.c **** 
3254:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Source\bsw\FreeRTOS\src/tasks.c **** {
3256:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
3257:Source\bsw\FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
3258:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3259:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3262:Source\bsw\FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
3263:Source\bsw\FreeRTOS\src/tasks.c **** }
3264:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3265:Source\bsw\FreeRTOS\src/tasks.c **** 
3266:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Source\bsw\FreeRTOS\src/tasks.c **** {
3268:Source\bsw\FreeRTOS\src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Source\bsw\FreeRTOS\src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Source\bsw\FreeRTOS\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Source\bsw\FreeRTOS\src/tasks.c **** }
3272:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3273:Source\bsw\FreeRTOS\src/tasks.c **** 
3274:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Source\bsw\FreeRTOS\src/tasks.c **** {
3276:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xReturn;
3277:Source\bsw\FreeRTOS\src/tasks.c **** 
3278:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
3279:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Source\bsw\FreeRTOS\src/tasks.c **** 
3281:Source\bsw\FreeRTOS\src/tasks.c **** 	taskENTER_CRITICAL();
3282:Source\bsw\FreeRTOS\src/tasks.c **** 	{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 60


3283:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Source\bsw\FreeRTOS\src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Source\bsw\FreeRTOS\src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Source\bsw\FreeRTOS\src/tasks.c **** 
3287:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3290:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Source\bsw\FreeRTOS\src/tasks.c **** 				but has the same result. */
3292:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
3294:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3295:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3296:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3297:Source\bsw\FreeRTOS\src/tasks.c **** 
3298:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Source\bsw\FreeRTOS\src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3301:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Source\bsw\FreeRTOS\src/tasks.c **** 				specified is the maximum block time then the task should block
3303:Source\bsw\FreeRTOS\src/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdFALSE;
3305:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3306:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3307:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3308:Source\bsw\FreeRTOS\src/tasks.c **** 
3309:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3311:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The tick count is greater than the time at which
3312:Source\bsw\FreeRTOS\src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Source\bsw\FreeRTOS\src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Source\bsw\FreeRTOS\src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Source\bsw\FreeRTOS\src/tasks.c **** 			was called. */
3316:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
3317:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3318:Source\bsw\FreeRTOS\src/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3320:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Source\bsw\FreeRTOS\src/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Source\bsw\FreeRTOS\src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdFALSE;
3324:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3325:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3326:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3327:Source\bsw\FreeRTOS\src/tasks.c **** 			*pxTicksToWait = 0;
3328:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
3329:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3330:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3331:Source\bsw\FreeRTOS\src/tasks.c **** 	taskEXIT_CRITICAL();
3332:Source\bsw\FreeRTOS\src/tasks.c **** 
3333:Source\bsw\FreeRTOS\src/tasks.c **** 	return xReturn;
3334:Source\bsw\FreeRTOS\src/tasks.c **** }
3335:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3336:Source\bsw\FreeRTOS\src/tasks.c **** 
3337:Source\bsw\FreeRTOS\src/tasks.c **** void vTaskMissedYield( void )
3338:Source\bsw\FreeRTOS\src/tasks.c **** {
3339:Source\bsw\FreeRTOS\src/tasks.c **** 	xYieldPending = pdTRUE;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 61


3340:Source\bsw\FreeRTOS\src/tasks.c **** }
3341:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3342:Source\bsw\FreeRTOS\src/tasks.c **** 
3343:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Source\bsw\FreeRTOS\src/tasks.c **** 
3345:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3347:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
3348:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
3349:Source\bsw\FreeRTOS\src/tasks.c **** 
3350:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTask != NULL )
3351:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3352:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = xTask;
3353:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3355:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3356:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3357:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = 0U;
3358:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3359:Source\bsw\FreeRTOS\src/tasks.c **** 
3360:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxReturn;
3361:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3362:Source\bsw\FreeRTOS\src/tasks.c **** 
3363:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3365:Source\bsw\FreeRTOS\src/tasks.c **** 
3366:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Source\bsw\FreeRTOS\src/tasks.c **** 
3368:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3370:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
3371:Source\bsw\FreeRTOS\src/tasks.c **** 
3372:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTask != NULL )
3373:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3374:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = xTask;
3375:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3377:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3378:Source\bsw\FreeRTOS\src/tasks.c **** 
3379:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Source\bsw\FreeRTOS\src/tasks.c **** 
3381:Source\bsw\FreeRTOS\src/tasks.c **** /*
3382:Source\bsw\FreeRTOS\src/tasks.c ****  * -----------------------------------------------------------
3383:Source\bsw\FreeRTOS\src/tasks.c ****  * The Idle task.
3384:Source\bsw\FreeRTOS\src/tasks.c ****  * ----------------------------------------------------------
3385:Source\bsw\FreeRTOS\src/tasks.c ****  *
3386:Source\bsw\FreeRTOS\src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Source\bsw\FreeRTOS\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Source\bsw\FreeRTOS\src/tasks.c ****  *
3389:Source\bsw\FreeRTOS\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Source\bsw\FreeRTOS\src/tasks.c ****  *
3391:Source\bsw\FreeRTOS\src/tasks.c ****  */
3392:Source\bsw\FreeRTOS\src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Source\bsw\FreeRTOS\src/tasks.c **** {
3394:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Stop warnings. */
3395:Source\bsw\FreeRTOS\src/tasks.c **** 	( void ) pvParameters;
3396:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 62


3397:Source\bsw\FreeRTOS\src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Source\bsw\FreeRTOS\src/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Source\bsw\FreeRTOS\src/tasks.c **** 
3400:Source\bsw\FreeRTOS\src/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Source\bsw\FreeRTOS\src/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Source\bsw\FreeRTOS\src/tasks.c **** 	any. */
3403:Source\bsw\FreeRTOS\src/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Source\bsw\FreeRTOS\src/tasks.c **** 
3405:Source\bsw\FreeRTOS\src/tasks.c **** 	for( ;; )
3406:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3407:Source\bsw\FreeRTOS\src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Source\bsw\FreeRTOS\src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Source\bsw\FreeRTOS\src/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Source\bsw\FreeRTOS\src/tasks.c **** 
3411:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3413:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Source\bsw\FreeRTOS\src/tasks.c **** 			see if any other task has become available.  If we are using
3415:Source\bsw\FreeRTOS\src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Source\bsw\FreeRTOS\src/tasks.c **** 			will automatically get the processor anyway. */
3417:Source\bsw\FreeRTOS\src/tasks.c **** 			taskYIELD();
3418:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3419:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Source\bsw\FreeRTOS\src/tasks.c **** 
3421:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3423:Source\bsw\FreeRTOS\src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Source\bsw\FreeRTOS\src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Source\bsw\FreeRTOS\src/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Source\bsw\FreeRTOS\src/tasks.c **** 			timeslice.
3427:Source\bsw\FreeRTOS\src/tasks.c **** 
3428:Source\bsw\FreeRTOS\src/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Source\bsw\FreeRTOS\src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Source\bsw\FreeRTOS\src/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Source\bsw\FreeRTOS\src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3434:Source\bsw\FreeRTOS\src/tasks.c **** 				taskYIELD();
3435:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3436:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3437:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3438:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3440:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3441:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Source\bsw\FreeRTOS\src/tasks.c **** 
3443:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3445:Source\bsw\FreeRTOS\src/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Source\bsw\FreeRTOS\src/tasks.c **** 
3447:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Source\bsw\FreeRTOS\src/tasks.c **** 			allows the application designer to add background functionality
3449:Source\bsw\FreeRTOS\src/tasks.c **** 			without the overhead of a separate task.
3450:Source\bsw\FreeRTOS\src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Source\bsw\FreeRTOS\src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Source\bsw\FreeRTOS\src/tasks.c **** 			vApplicationIdleHook();
3453:Source\bsw\FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 63


3454:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Source\bsw\FreeRTOS\src/tasks.c **** 
3456:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Source\bsw\FreeRTOS\src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Source\bsw\FreeRTOS\src/tasks.c **** 		user defined low power mode	implementations require
3459:Source\bsw\FreeRTOS\src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3462:Source\bsw\FreeRTOS\src/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Source\bsw\FreeRTOS\src/tasks.c **** 
3464:Source\bsw\FreeRTOS\src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Source\bsw\FreeRTOS\src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Source\bsw\FreeRTOS\src/tasks.c **** 			test of the expected idle time is performed without the
3467:Source\bsw\FreeRTOS\src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Source\bsw\FreeRTOS\src/tasks.c **** 			valid. */
3469:Source\bsw\FreeRTOS\src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Source\bsw\FreeRTOS\src/tasks.c **** 
3471:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3473:Source\bsw\FreeRTOS\src/tasks.c **** 				vTaskSuspendAll();
3474:Source\bsw\FreeRTOS\src/tasks.c **** 				{
3475:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Source\bsw\FreeRTOS\src/tasks.c **** 					time can be sampled again, and this time its value can
3477:Source\bsw\FreeRTOS\src/tasks.c **** 					be used. */
3478:Source\bsw\FreeRTOS\src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Source\bsw\FreeRTOS\src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Source\bsw\FreeRTOS\src/tasks.c **** 
3481:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Source\bsw\FreeRTOS\src/tasks.c **** 					if the application does not want
3483:Source\bsw\FreeRTOS\src/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Source\bsw\FreeRTOS\src/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Source\bsw\FreeRTOS\src/tasks.c **** 
3486:Source\bsw\FreeRTOS\src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Source\bsw\FreeRTOS\src/tasks.c **** 					{
3488:Source\bsw\FreeRTOS\src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Source\bsw\FreeRTOS\src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Source\bsw\FreeRTOS\src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Source\bsw\FreeRTOS\src/tasks.c **** 					}
3492:Source\bsw\FreeRTOS\src/tasks.c **** 					else
3493:Source\bsw\FreeRTOS\src/tasks.c **** 					{
3494:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Source\bsw\FreeRTOS\src/tasks.c **** 					}
3496:Source\bsw\FreeRTOS\src/tasks.c **** 				}
3497:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) xTaskResumeAll();
3498:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3499:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3500:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3501:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3503:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3504:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3506:Source\bsw\FreeRTOS\src/tasks.c **** }
3507:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3508:Source\bsw\FreeRTOS\src/tasks.c **** 
3509:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 64


3511:Source\bsw\FreeRTOS\src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3513:Source\bsw\FreeRTOS\src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Source\bsw\FreeRTOS\src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Source\bsw\FreeRTOS\src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Source\bsw\FreeRTOS\src/tasks.c **** 
3517:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This function must be called from a critical section. */
3518:Source\bsw\FreeRTOS\src/tasks.c **** 
3519:Source\bsw\FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3521:Source\bsw\FreeRTOS\src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Source\bsw\FreeRTOS\src/tasks.c **** 			eReturn = eAbortSleep;
3523:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3524:Source\bsw\FreeRTOS\src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3526:Source\bsw\FreeRTOS\src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Source\bsw\FreeRTOS\src/tasks.c **** 			eReturn = eAbortSleep;
3528:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3529:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3530:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3531:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Source\bsw\FreeRTOS\src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Source\bsw\FreeRTOS\src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Source\bsw\FreeRTOS\src/tasks.c **** 			interrupts. */
3535:Source\bsw\FreeRTOS\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3537:Source\bsw\FreeRTOS\src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3539:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3540:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3541:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3543:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3544:Source\bsw\FreeRTOS\src/tasks.c **** 
3545:Source\bsw\FreeRTOS\src/tasks.c **** 		return eReturn;
3546:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3547:Source\bsw\FreeRTOS\src/tasks.c **** 
3548:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3550:Source\bsw\FreeRTOS\src/tasks.c **** 
3551:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Source\bsw\FreeRTOS\src/tasks.c **** 
3553:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3555:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3556:Source\bsw\FreeRTOS\src/tasks.c **** 
3557:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3559:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3563:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3564:Source\bsw\FreeRTOS\src/tasks.c **** 
3565:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3567:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 65


3568:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Source\bsw\FreeRTOS\src/tasks.c **** 
3570:Source\bsw\FreeRTOS\src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3572:Source\bsw\FreeRTOS\src/tasks.c **** 	void *pvReturn = NULL;
3573:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3574:Source\bsw\FreeRTOS\src/tasks.c **** 
3575:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3577:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Source\bsw\FreeRTOS\src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3580:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3581:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3582:Source\bsw\FreeRTOS\src/tasks.c **** 			pvReturn = NULL;
3583:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3584:Source\bsw\FreeRTOS\src/tasks.c **** 
3585:Source\bsw\FreeRTOS\src/tasks.c **** 		return pvReturn;
3586:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3587:Source\bsw\FreeRTOS\src/tasks.c **** 
3588:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3590:Source\bsw\FreeRTOS\src/tasks.c **** 
3591:Source\bsw\FreeRTOS\src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Source\bsw\FreeRTOS\src/tasks.c **** 
3593:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3595:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3596:Source\bsw\FreeRTOS\src/tasks.c **** 
3597:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Source\bsw\FreeRTOS\src/tasks.c **** 		the calling task. */
3599:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Source\bsw\FreeRTOS\src/tasks.c **** 
3601:Source\bsw\FreeRTOS\src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3603:Source\bsw\FreeRTOS\src/tasks.c **** 
3604:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3606:Source\bsw\FreeRTOS\src/tasks.c **** 
3607:Source\bsw\FreeRTOS\src/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Source\bsw\FreeRTOS\src/tasks.c **** {
3609:Source\bsw\FreeRTOS\src/tasks.c **** UBaseType_t uxPriority;
3610:Source\bsw\FreeRTOS\src/tasks.c **** 
3611:Source\bsw\FreeRTOS\src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3613:Source\bsw\FreeRTOS\src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3615:Source\bsw\FreeRTOS\src/tasks.c **** 
3616:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Source\bsw\FreeRTOS\src/tasks.c **** 
3620:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3622:Source\bsw\FreeRTOS\src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3624:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 66


3625:Source\bsw\FreeRTOS\src/tasks.c **** 
3626:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3628:Source\bsw\FreeRTOS\src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3630:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Source\bsw\FreeRTOS\src/tasks.c **** 
3632:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Source\bsw\FreeRTOS\src/tasks.c **** 	using list2. */
3634:Source\bsw\FreeRTOS\src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:Source\bsw\FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Source\bsw\FreeRTOS\src/tasks.c **** }
3637:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3638:Source\bsw\FreeRTOS\src/tasks.c **** 
3639:Source\bsw\FreeRTOS\src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Source\bsw\FreeRTOS\src/tasks.c **** {
3641:Source\bsw\FreeRTOS\src/tasks.c **** 
3642:Source\bsw\FreeRTOS\src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Source\bsw\FreeRTOS\src/tasks.c **** 
3644:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3646:Source\bsw\FreeRTOS\src/tasks.c **** 		TCB_t *pxTCB;
3647:Source\bsw\FreeRTOS\src/tasks.c **** 
3648:Source\bsw\FreeRTOS\src/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Source\bsw\FreeRTOS\src/tasks.c **** 		being called too often in the idle task. */
3650:Source\bsw\FreeRTOS\src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3652:Source\bsw\FreeRTOS\src/tasks.c **** 			taskENTER_CRITICAL();
3653:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3654:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Source\bsw\FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Source\bsw\FreeRTOS\src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3659:Source\bsw\FreeRTOS\src/tasks.c **** 			taskEXIT_CRITICAL();
3660:Source\bsw\FreeRTOS\src/tasks.c **** 
3661:Source\bsw\FreeRTOS\src/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3663:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3664:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Source\bsw\FreeRTOS\src/tasks.c **** }
3666:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3667:Source\bsw\FreeRTOS\src/tasks.c **** 
3668:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Source\bsw\FreeRTOS\src/tasks.c **** 
3670:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3672:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3673:Source\bsw\FreeRTOS\src/tasks.c **** 
3674:Source\bsw\FreeRTOS\src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Source\bsw\FreeRTOS\src/tasks.c **** 
3677:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 67


3682:Source\bsw\FreeRTOS\src/tasks.c **** 
3683:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3685:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3687:Source\bsw\FreeRTOS\src/tasks.c **** 		#else
3688:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3689:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3691:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3692:Source\bsw\FreeRTOS\src/tasks.c **** 
3693:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3695:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3697:Source\bsw\FreeRTOS\src/tasks.c **** 		#else
3698:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3699:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3701:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3702:Source\bsw\FreeRTOS\src/tasks.c **** 
3703:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Source\bsw\FreeRTOS\src/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Source\bsw\FreeRTOS\src/tasks.c **** 		state is just set to whatever is passed in. */
3706:Source\bsw\FreeRTOS\src/tasks.c **** 		if( eState != eInvalid )
3707:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3708:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3710:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3712:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3713:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3714:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Source\bsw\FreeRTOS\src/tasks.c **** 
3716:Source\bsw\FreeRTOS\src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Source\bsw\FreeRTOS\src/tasks.c **** 				{
3718:Source\bsw\FreeRTOS\src/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Source\bsw\FreeRTOS\src/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Source\bsw\FreeRTOS\src/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Source\bsw\FreeRTOS\src/tasks.c **** 					if( eState == eSuspended )
3722:Source\bsw\FreeRTOS\src/tasks.c **** 					{
3723:Source\bsw\FreeRTOS\src/tasks.c **** 						vTaskSuspendAll();
3724:Source\bsw\FreeRTOS\src/tasks.c **** 						{
3725:Source\bsw\FreeRTOS\src/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Source\bsw\FreeRTOS\src/tasks.c **** 							{
3727:Source\bsw\FreeRTOS\src/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Source\bsw\FreeRTOS\src/tasks.c **** 							}
3729:Source\bsw\FreeRTOS\src/tasks.c **** 						}
3730:Source\bsw\FreeRTOS\src/tasks.c **** 						( void ) xTaskResumeAll();
3731:Source\bsw\FreeRTOS\src/tasks.c **** 					}
3732:Source\bsw\FreeRTOS\src/tasks.c **** 				}
3733:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3735:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3736:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3737:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3738:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 68


3739:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3740:Source\bsw\FreeRTOS\src/tasks.c **** 
3741:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Source\bsw\FreeRTOS\src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3745:Source\bsw\FreeRTOS\src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3747:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3749:Source\bsw\FreeRTOS\src/tasks.c **** 			#else
3750:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3751:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3753:Source\bsw\FreeRTOS\src/tasks.c **** 			#endif
3754:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3755:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3756:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3757:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3759:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3760:Source\bsw\FreeRTOS\src/tasks.c **** 
3761:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3763:Source\bsw\FreeRTOS\src/tasks.c **** 
3764:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Source\bsw\FreeRTOS\src/tasks.c **** 
3766:Source\bsw\FreeRTOS\src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3768:Source\bsw\FreeRTOS\src/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Source\bsw\FreeRTOS\src/tasks.c **** 
3771:Source\bsw\FreeRTOS\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3773:Source\bsw\FreeRTOS\src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Source\bsw\FreeRTOS\src/tasks.c **** 
3775:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Source\bsw\FreeRTOS\src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Source\bsw\FreeRTOS\src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Source\bsw\FreeRTOS\src/tasks.c **** 			do
3780:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3781:Source\bsw\FreeRTOS\src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Source\bsw\FreeRTOS\src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Source\bsw\FreeRTOS\src/tasks.c **** 				uxTask++;
3784:Source\bsw\FreeRTOS\src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3786:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3787:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3788:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3790:Source\bsw\FreeRTOS\src/tasks.c **** 
3791:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxTask;
3792:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3793:Source\bsw\FreeRTOS\src/tasks.c **** 
3794:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 69


3796:Source\bsw\FreeRTOS\src/tasks.c **** 
3797:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Source\bsw\FreeRTOS\src/tasks.c **** 
3799:Source\bsw\FreeRTOS\src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Source\bsw\FreeRTOS\src/tasks.c **** 	{
  81              		.loc 1 3800 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
3801:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulCount = 0U;
  87              		.loc 1 3801 0
  88 0000 0023     		movs	r3, #0
3802:Source\bsw\FreeRTOS\src/tasks.c **** 
3803:Source\bsw\FreeRTOS\src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  89              		.loc 1 3803 0
  90 0002 01E0     		b	.L9
  91              	.LVL9:
  92              	.L10:
3804:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3805:Source\bsw\FreeRTOS\src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
  93              		.loc 1 3805 0
  94 0004 0130     		adds	r0, r0, #1
  95              	.LVL10:
3806:Source\bsw\FreeRTOS\src/tasks.c **** 			ulCount++;
  96              		.loc 1 3806 0
  97 0006 0133     		adds	r3, r3, #1
  98              	.LVL11:
  99              	.L9:
3803:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 100              		.loc 1 3803 0
 101 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 102 000a A52A     		cmp	r2, #165
 103 000c FAD0     		beq	.L10
 104              	.LVL12:
3807:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3808:Source\bsw\FreeRTOS\src/tasks.c **** 
3809:Source\bsw\FreeRTOS\src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Source\bsw\FreeRTOS\src/tasks.c **** 
3811:Source\bsw\FreeRTOS\src/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 105              		.loc 1 3812 0
 106 000e C3F38F00 		ubfx	r0, r3, #2, #16
 107              	.LVL13:
 108 0012 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE104:
 111              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 112              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 116              		.type	prvResetNextTaskUnblockTime, %function
 117              	prvResetNextTaskUnblockTime:
 118              	.LFB107:
3813:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 70


3814:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3816:Source\bsw\FreeRTOS\src/tasks.c **** 
3817:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Source\bsw\FreeRTOS\src/tasks.c **** 
3819:Source\bsw\FreeRTOS\src/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Source\bsw\FreeRTOS\src/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Source\bsw\FreeRTOS\src/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Source\bsw\FreeRTOS\src/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Source\bsw\FreeRTOS\src/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Source\bsw\FreeRTOS\src/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3826:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3827:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Source\bsw\FreeRTOS\src/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Source\bsw\FreeRTOS\src/tasks.c **** 
3830:Source\bsw\FreeRTOS\src/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Source\bsw\FreeRTOS\src/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Source\bsw\FreeRTOS\src/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Source\bsw\FreeRTOS\src/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Source\bsw\FreeRTOS\src/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Source\bsw\FreeRTOS\src/tasks.c **** 		type. */
3836:Source\bsw\FreeRTOS\src/tasks.c **** 
3837:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Source\bsw\FreeRTOS\src/tasks.c **** 
3839:Source\bsw\FreeRTOS\src/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3841:Source\bsw\FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3843:Source\bsw\FreeRTOS\src/tasks.c **** 		#else
3844:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3845:Source\bsw\FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3847:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3848:Source\bsw\FreeRTOS\src/tasks.c **** 
3849:Source\bsw\FreeRTOS\src/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Source\bsw\FreeRTOS\src/tasks.c **** 
3851:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxReturn;
3852:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3853:Source\bsw\FreeRTOS\src/tasks.c **** 
3854:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3856:Source\bsw\FreeRTOS\src/tasks.c **** 
3857:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Source\bsw\FreeRTOS\src/tasks.c **** 
3859:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3861:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
3862:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxReturn;
3864:Source\bsw\FreeRTOS\src/tasks.c **** 
3865:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Source\bsw\FreeRTOS\src/tasks.c **** 
3867:Source\bsw\FreeRTOS\src/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3869:Source\bsw\FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Source\bsw\FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 71


3871:Source\bsw\FreeRTOS\src/tasks.c **** 		#else
3872:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3873:Source\bsw\FreeRTOS\src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3875:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
3876:Source\bsw\FreeRTOS\src/tasks.c **** 
3877:Source\bsw\FreeRTOS\src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Source\bsw\FreeRTOS\src/tasks.c **** 
3879:Source\bsw\FreeRTOS\src/tasks.c **** 		return uxReturn;
3880:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3881:Source\bsw\FreeRTOS\src/tasks.c **** 
3882:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3884:Source\bsw\FreeRTOS\src/tasks.c **** 
3885:Source\bsw\FreeRTOS\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Source\bsw\FreeRTOS\src/tasks.c **** 
3887:Source\bsw\FreeRTOS\src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3889:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Source\bsw\FreeRTOS\src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Source\bsw\FreeRTOS\src/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Source\bsw\FreeRTOS\src/tasks.c **** 
3894:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Source\bsw\FreeRTOS\src/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Source\bsw\FreeRTOS\src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Source\bsw\FreeRTOS\src/tasks.c **** 		for additional information. */
3898:Source\bsw\FreeRTOS\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3900:Source\bsw\FreeRTOS\src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3902:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Source\bsw\FreeRTOS\src/tasks.c **** 
3904:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3906:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Source\bsw\FreeRTOS\src/tasks.c **** 			the stack and TCB. */
3908:Source\bsw\FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Source\bsw\FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB );
3910:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3911:Source\bsw\FreeRTOS\src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3913:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Source\bsw\FreeRTOS\src/tasks.c **** 			check what was statically allocated before trying to free the
3915:Source\bsw\FreeRTOS\src/tasks.c **** 			memory. */
3916:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3918:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Source\bsw\FreeRTOS\src/tasks.c **** 				must be freed. */
3920:Source\bsw\FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Source\bsw\FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB );
3922:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3923:Source\bsw\FreeRTOS\src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3925:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Source\bsw\FreeRTOS\src/tasks.c **** 				only memory that must be freed. */
3927:Source\bsw\FreeRTOS\src/tasks.c **** 				vPortFree( pxTCB );
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 72


3928:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3929:Source\bsw\FreeRTOS\src/tasks.c **** 			else
3930:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3931:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Source\bsw\FreeRTOS\src/tasks.c **** 				nothing needs to be freed. */
3933:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Source\bsw\FreeRTOS\src/tasks.c **** 			}
3936:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3937:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3939:Source\bsw\FreeRTOS\src/tasks.c **** 
3940:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3942:Source\bsw\FreeRTOS\src/tasks.c **** 
3943:Source\bsw\FreeRTOS\src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Source\bsw\FreeRTOS\src/tasks.c **** {
 119              		.loc 1 3944 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
3945:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
3946:Source\bsw\FreeRTOS\src/tasks.c **** 
3947:Source\bsw\FreeRTOS\src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 124              		.loc 1 3947 0
 125 0000 074B     		ldr	r3, .L14
 126 0002 9B6A     		ldr	r3, [r3, #40]
 127 0004 1B68     		ldr	r3, [r3]
 128 0006 23B9     		cbnz	r3, .L12
3948:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3949:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Source\bsw\FreeRTOS\src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Source\bsw\FreeRTOS\src/tasks.c **** 		there is an item in the delayed list. */
3953:Source\bsw\FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 129              		.loc 1 3953 0
 130 0008 4FF0FF32 		mov	r2, #-1
 131 000c 044B     		ldr	r3, .L14
 132 000e DA62     		str	r2, [r3, #44]
 133 0010 7047     		bx	lr
 134              	.L12:
3954:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3955:Source\bsw\FreeRTOS\src/tasks.c **** 	else
3956:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3957:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Source\bsw\FreeRTOS\src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Source\bsw\FreeRTOS\src/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Source\bsw\FreeRTOS\src/tasks.c **** 		from the Blocked state. */
3961:Source\bsw\FreeRTOS\src/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 135              		.loc 1 3961 0
 136 0012 034B     		ldr	r3, .L14
 137 0014 9A6A     		ldr	r2, [r3, #40]
 138 0016 D268     		ldr	r2, [r2, #12]
 139 0018 D268     		ldr	r2, [r2, #12]
 140              	.LVL14:
3962:Source\bsw\FreeRTOS\src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 73


 141              		.loc 1 3962 0
 142 001a 5268     		ldr	r2, [r2, #4]
 143              	.LVL15:
 144 001c DA62     		str	r2, [r3, #44]
 145 001e 7047     		bx	lr
 146              	.L15:
 147              		.align	2
 148              	.L14:
 149 0020 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE107:
 152              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 153              		.section	.text.prvDeleteTCB,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 157              		.type	prvDeleteTCB, %function
 158              	prvDeleteTCB:
 159              	.LFB106:
3888:Source\bsw\FreeRTOS\src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 160              		.loc 1 3888 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL16:
 165 0000 10B5     		push	{r4, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 0446     		mov	r4, r0
3908:Source\bsw\FreeRTOS\src/tasks.c **** 			vPortFree( pxTCB );
 170              		.loc 1 3908 0
 171 0004 006B     		ldr	r0, [r0, #48]
 172              	.LVL17:
 173 0006 FFF7FEFF 		bl	vPortFree
 174              	.LVL18:
3909:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 175              		.loc 1 3909 0
 176 000a 2046     		mov	r0, r4
 177 000c FFF7FEFF 		bl	vPortFree
 178              	.LVL19:
 179 0010 10BD     		pop	{r4, pc}
 180              		.cfi_endproc
 181              	.LFE106:
 182              		.size	prvDeleteTCB, .-prvDeleteTCB
 183 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	2
 185              		.thumb
 186              		.thumb_func
 187              		.type	prvInitialiseNewTask, %function
 188              	prvInitialiseNewTask:
 189              	.LFB69:
 832:Source\bsw\FreeRTOS\src/tasks.c **** StackType_t *pxTopOfStack;
 190              		.loc 1 832 0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 74


 194              	.LVL20:
 195 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 196              		.cfi_def_cfa_offset 32
 197              		.cfi_offset 4, -32
 198              		.cfi_offset 5, -28
 199              		.cfi_offset 6, -24
 200              		.cfi_offset 7, -20
 201              		.cfi_offset 8, -16
 202              		.cfi_offset 9, -12
 203              		.cfi_offset 10, -8
 204              		.cfi_offset 14, -4
 205 0004 8146     		mov	r9, r0
 206 0006 0D46     		mov	r5, r1
 207 0008 1746     		mov	r7, r2
 208 000a 9A46     		mov	r10, r3
 209 000c 089E     		ldr	r6, [sp, #32]
 210 000e DDF82480 		ldr	r8, [sp, #36]
 211 0012 0A9C     		ldr	r4, [sp, #40]
 854:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 212              		.loc 1 854 0
 213 0014 9200     		lsls	r2, r2, #2
 214              	.LVL21:
 215 0016 A521     		movs	r1, #165
 216              	.LVL22:
 217 0018 206B     		ldr	r0, [r4, #48]
 218              	.LVL23:
 219 001a FFF7FEFF 		bl	memset
 220              	.LVL24:
 864:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 221              		.loc 1 864 0
 222 001e 236B     		ldr	r3, [r4, #48]
 223 0020 07F18042 		add	r2, r7, #1073741824
 224 0024 013A     		subs	r2, r2, #1
 225 0026 03EB8207 		add	r7, r3, r2, lsl #2
 226              	.LVL25:
 865:Source\bsw\FreeRTOS\src/tasks.c **** 
 227              		.loc 1 865 0
 228 002a 27F00707 		bic	r7, r7, #7
 229              	.LVL26:
 892:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 230              		.loc 1 892 0
 231 002e 45B9     		cbnz	r5, .L26
 232 0030 0EE0     		b	.L28
 233              	.LVL27:
 234              	.L22:
 896:Source\bsw\FreeRTOS\src/tasks.c **** 
 235              		.loc 1 896 0
 236 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 237 0034 E218     		adds	r2, r4, r3
 238 0036 82F83410 		strb	r1, [r2, #52]
 901:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 239              		.loc 1 901 0
 240 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 241 003c 22B1     		cbz	r2, .L21
 894:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 242              		.loc 1 894 0 discriminator 2
 243 003e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 75


 244              	.LVL28:
 245 0040 00E0     		b	.L19
 246              	.LVL29:
 247              	.L26:
 248 0042 0023     		movs	r3, #0
 249              	.L19:
 250              	.LVL30:
 894:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 251              		.loc 1 894 0 is_stmt 0 discriminator 1
 252 0044 0B2B     		cmp	r3, #11
 253 0046 F4D9     		bls	.L22
 254              	.L21:
 913:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 255              		.loc 1 913 0 is_stmt 1
 256 0048 0023     		movs	r3, #0
 257              	.LVL31:
 258 004a 84F83F30 		strb	r3, [r4, #63]
 259 004e 02E0     		b	.L23
 260              	.L28:
 919:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 261              		.loc 1 919 0
 262 0050 0023     		movs	r3, #0
 263 0052 84F83430 		strb	r3, [r4, #52]
 264              	.L23:
 924:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 265              		.loc 1 924 0
 266 0056 042E     		cmp	r6, #4
 267 0058 00D9     		bls	.L24
 926:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 268              		.loc 1 926 0
 269 005a 0426     		movs	r6, #4
 270              	.L24:
 271              	.LVL32:
 933:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 272              		.loc 1 933 0
 273 005c E662     		str	r6, [r4, #44]
 936:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 274              		.loc 1 936 0
 275 005e 2664     		str	r6, [r4, #64]
 937:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 276              		.loc 1 937 0
 277 0060 0025     		movs	r5, #0
 278              	.LVL33:
 279 0062 6564     		str	r5, [r4, #68]
 941:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 280              		.loc 1 941 0
 281 0064 201D     		adds	r0, r4, #4
 282 0066 FFF7FEFF 		bl	vListInitialiseItem
 283              	.LVL34:
 942:Source\bsw\FreeRTOS\src/tasks.c **** 
 284              		.loc 1 942 0
 285 006a 04F11800 		add	r0, r4, #24
 286 006e FFF7FEFF 		bl	vListInitialiseItem
 287              	.LVL35:
 946:Source\bsw\FreeRTOS\src/tasks.c **** 
 288              		.loc 1 946 0
 289 0072 2461     		str	r4, [r4, #16]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 76


 949:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 290              		.loc 1 949 0
 291 0074 C6F10506 		rsb	r6, r6, #5
 292              	.LVL36:
 293 0078 A661     		str	r6, [r4, #24]
 950:Source\bsw\FreeRTOS\src/tasks.c **** 
 294              		.loc 1 950 0
 295 007a 6462     		str	r4, [r4, #36]
 992:Source\bsw\FreeRTOS\src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 296              		.loc 1 992 0
 297 007c A564     		str	r5, [r4, #72]
 993:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 298              		.loc 1 993 0
 299 007e 84F84C50 		strb	r5, [r4, #76]
1058:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 300              		.loc 1 1058 0
 301 0082 5246     		mov	r2, r10
 302 0084 4946     		mov	r1, r9
 303 0086 3846     		mov	r0, r7
 304 0088 FFF7FEFF 		bl	pxPortInitialiseStack
 305              	.LVL37:
 306 008c 2060     		str	r0, [r4]
1064:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 307              		.loc 1 1064 0
 308 008e B8F1000F 		cmp	r8, #0
 309 0092 01D0     		beq	.L18
1068:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 310              		.loc 1 1068 0
 311 0094 C8F80040 		str	r4, [r8]
 312              	.L18:
 313 0098 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 314              		.cfi_endproc
 315              	.LFE69:
 316              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 317              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 321              		.type	prvInitialiseTaskLists, %function
 322              	prvInitialiseTaskLists:
 323              	.LFB102:
3608:Source\bsw\FreeRTOS\src/tasks.c **** UBaseType_t uxPriority;
 324              		.loc 1 3608 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 70B5     		push	{r4, r5, r6, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 4, -16
 331              		.cfi_offset 5, -12
 332              		.cfi_offset 6, -8
 333              		.cfi_offset 14, -4
 334              	.LVL38:
3611:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 335              		.loc 1 3611 0
 336 0002 0024     		movs	r4, #0
 337 0004 07E0     		b	.L31
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 77


 338              	.LVL39:
 339              	.L32:
3613:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 340              		.loc 1 3613 0 discriminator 3
 341 0006 04EB8402 		add	r2, r4, r4, lsl #2
 342 000a 9300     		lsls	r3, r2, #2
 343 000c 1048     		ldr	r0, .L34
 344 000e 1844     		add	r0, r0, r3
 345 0010 FFF7FEFF 		bl	vListInitialise
 346              	.LVL40:
3611:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 347              		.loc 1 3611 0 discriminator 3
 348 0014 0134     		adds	r4, r4, #1
 349              	.LVL41:
 350              	.L31:
3611:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 351              		.loc 1 3611 0 is_stmt 0 discriminator 1
 352 0016 042C     		cmp	r4, #4
 353 0018 F5D9     		bls	.L32
3616:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 354              		.loc 1 3616 0 is_stmt 1
 355 001a 0E4C     		ldr	r4, .L34+4
 356              	.LVL42:
 357 001c 04F19406 		add	r6, r4, #148
 358 0020 3046     		mov	r0, r6
 359 0022 FFF7FEFF 		bl	vListInitialise
 360              	.LVL43:
3617:Source\bsw\FreeRTOS\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 361              		.loc 1 3617 0
 362 0026 04F1A805 		add	r5, r4, #168
 363 002a 2846     		mov	r0, r5
 364 002c FFF7FEFF 		bl	vListInitialise
 365              	.LVL44:
3618:Source\bsw\FreeRTOS\src/tasks.c **** 
 366              		.loc 1 3618 0
 367 0030 04F11400 		add	r0, r4, #20
 368 0034 FFF7FEFF 		bl	vListInitialise
 369              	.LVL45:
3622:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 370              		.loc 1 3622 0
 371 0038 04F1BC00 		add	r0, r4, #188
 372 003c FFF7FEFF 		bl	vListInitialise
 373              	.LVL46:
3628:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 374              		.loc 1 3628 0
 375 0040 2046     		mov	r0, r4
 376 0042 FFF7FEFF 		bl	vListInitialise
 377              	.LVL47:
3634:Source\bsw\FreeRTOS\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 378              		.loc 1 3634 0
 379 0046 A662     		str	r6, [r4, #40]
3635:Source\bsw\FreeRTOS\src/tasks.c **** }
 380              		.loc 1 3635 0
 381 0048 C4F8D050 		str	r5, [r4, #208]
 382 004c 70BD     		pop	{r4, r5, r6, pc}
 383              	.L35:
 384 004e 00BF     		.align	2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 78


 385              	.L34:
 386 0050 30000000 		.word	.LANCHOR0+48
 387 0054 00000000 		.word	.LANCHOR0
 388              		.cfi_endproc
 389              	.LFE102:
 390              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 391              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 395              		.type	prvAddNewTaskToReadyList, %function
 396              	prvAddNewTaskToReadyList:
 397              	.LFB70:
1078:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 398              		.loc 1 1078 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL48:
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              		.cfi_def_cfa_offset 16
 405              		.cfi_offset 3, -16
 406              		.cfi_offset 4, -12
 407              		.cfi_offset 5, -8
 408              		.cfi_offset 14, -4
 409 0002 0546     		mov	r5, r0
1081:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 410              		.loc 1 1081 0
 411 0004 FFF7FEFF 		bl	vPortEnterCritical
 412              	.LVL49:
1083:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB == NULL )
 413              		.loc 1 1083 0
 414 0008 264B     		ldr	r3, .L41
 415 000a D3F8D420 		ldr	r2, [r3, #212]
 416 000e 0132     		adds	r2, r2, #1
 417 0010 C3F8D420 		str	r2, [r3, #212]
1084:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 418              		.loc 1 1084 0
 419 0014 D3F8D830 		ldr	r3, [r3, #216]
 420 0018 4BB9     		cbnz	r3, .L37
1088:Source\bsw\FreeRTOS\src/tasks.c **** 
 421              		.loc 1 1088 0
 422 001a 224B     		ldr	r3, .L41
 423 001c C3F8D850 		str	r5, [r3, #216]
1090:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 424              		.loc 1 1090 0
 425 0020 D3F8D430 		ldr	r3, [r3, #212]
 426 0024 012B     		cmp	r3, #1
 427 0026 10D1     		bne	.L38
1095:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 428              		.loc 1 1095 0
 429 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 430              	.LVL50:
 431 002c 0DE0     		b	.L38
 432              	.L37:
1107:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 433              		.loc 1 1107 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 79


 434 002e 1D4B     		ldr	r3, .L41
 435 0030 D3F8DC30 		ldr	r3, [r3, #220]
 436 0034 4BB9     		cbnz	r3, .L38
1109:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 437              		.loc 1 1109 0
 438 0036 1B4B     		ldr	r3, .L41
 439 0038 D3F8D830 		ldr	r3, [r3, #216]
 440 003c DA6A     		ldr	r2, [r3, #44]
 441 003e EB6A     		ldr	r3, [r5, #44]
 442 0040 9A42     		cmp	r2, r3
 443 0042 02D8     		bhi	.L38
1111:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 444              		.loc 1 1111 0
 445 0044 174B     		ldr	r3, .L41
 446 0046 C3F8D850 		str	r5, [r3, #216]
 447              	.L38:
1124:Source\bsw\FreeRTOS\src/tasks.c **** 
 448              		.loc 1 1124 0
 449 004a 164C     		ldr	r4, .L41
 450 004c D4F8E030 		ldr	r3, [r4, #224]
 451 0050 0133     		adds	r3, r3, #1
 452 0052 C4F8E030 		str	r3, [r4, #224]
1134:Source\bsw\FreeRTOS\src/tasks.c **** 
 453              		.loc 1 1134 0
 454 0056 EB6A     		ldr	r3, [r5, #44]
 455 0058 0122     		movs	r2, #1
 456 005a 02FA03F1 		lsl	r1, r2, r3
 457 005e D4F8E420 		ldr	r2, [r4, #228]
 458 0062 0A43     		orrs	r2, r2, r1
 459 0064 C4F8E420 		str	r2, [r4, #228]
 460 0068 04F13000 		add	r0, r4, #48
 461 006c 03EB8303 		add	r3, r3, r3, lsl #2
 462 0070 9A00     		lsls	r2, r3, #2
 463 0072 291D     		adds	r1, r5, #4
 464 0074 1044     		add	r0, r0, r2
 465 0076 FFF7FEFF 		bl	vListInsertEnd
 466              	.LVL51:
1138:Source\bsw\FreeRTOS\src/tasks.c **** 
 467              		.loc 1 1138 0
 468 007a FFF7FEFF 		bl	vPortExitCritical
 469              	.LVL52:
1140:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 470              		.loc 1 1140 0
 471 007e D4F8DC30 		ldr	r3, [r4, #220]
 472 0082 6BB1     		cbz	r3, .L36
1144:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 473              		.loc 1 1144 0
 474 0084 D4F8D830 		ldr	r3, [r4, #216]
 475 0088 DA6A     		ldr	r2, [r3, #44]
 476 008a EB6A     		ldr	r3, [r5, #44]
 477 008c 9A42     		cmp	r2, r3
 478 008e 07D2     		bcs	.L36
1146:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 479              		.loc 1 1146 0
 480 0090 4FF08052 		mov	r2, #268435456
 481 0094 044B     		ldr	r3, .L41+4
 482 0096 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 80


 483              		.syntax unified
 484              	@ 1146 "Source\bsw\FreeRTOS\src\tasks.c" 1
 485 0098 BFF34F8F 		dsb
 486              	@ 0 "" 2
 487              	@ 1146 "Source\bsw\FreeRTOS\src\tasks.c" 1
 488 009c BFF36F8F 		isb
 489              	@ 0 "" 2
 490              		.thumb
 491              		.syntax unified
 492              	.L36:
 493 00a0 38BD     		pop	{r3, r4, r5, pc}
 494              	.LVL53:
 495              	.L42:
 496 00a2 00BF     		.align	2
 497              	.L41:
 498 00a4 00000000 		.word	.LANCHOR0
 499 00a8 04ED00E0 		.word	-536810236
 500              		.cfi_endproc
 501              	.LFE70:
 502              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 503              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 504              		.align	2
 505              		.thumb
 506              		.thumb_func
 507              		.type	prvCheckTasksWaitingTermination, %function
 508              	prvCheckTasksWaitingTermination:
 509              	.LFB103:
3640:Source\bsw\FreeRTOS\src/tasks.c **** 
 510              		.loc 1 3640 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 38B5     		push	{r3, r4, r5, lr}
 515              		.cfi_def_cfa_offset 16
 516              		.cfi_offset 3, -16
 517              		.cfi_offset 4, -12
 518              		.cfi_offset 5, -8
 519              		.cfi_offset 14, -4
 520              	.LBB27:
3650:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 521              		.loc 1 3650 0
 522 0002 17E0     		b	.L44
 523              	.L45:
3652:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 524              		.loc 1 3652 0
 525 0004 FFF7FEFF 		bl	vPortEnterCritical
 526              	.LVL54:
3654:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 527              		.loc 1 3654 0
 528 0008 0D4C     		ldr	r4, .L47
 529 000a D4F8C830 		ldr	r3, [r4, #200]
 530 000e DD68     		ldr	r5, [r3, #12]
 531              	.LVL55:
3655:Source\bsw\FreeRTOS\src/tasks.c **** 				--uxCurrentNumberOfTasks;
 532              		.loc 1 3655 0
 533 0010 281D     		adds	r0, r5, #4
 534 0012 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 81


 535              	.LVL56:
3656:Source\bsw\FreeRTOS\src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 536              		.loc 1 3656 0
 537 0016 D4F8D430 		ldr	r3, [r4, #212]
 538 001a 013B     		subs	r3, r3, #1
 539 001c C4F8D430 		str	r3, [r4, #212]
3657:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 540              		.loc 1 3657 0
 541 0020 D4F8E830 		ldr	r3, [r4, #232]
 542 0024 013B     		subs	r3, r3, #1
 543 0026 C4F8E830 		str	r3, [r4, #232]
3659:Source\bsw\FreeRTOS\src/tasks.c **** 
 544              		.loc 1 3659 0
 545 002a FFF7FEFF 		bl	vPortExitCritical
 546              	.LVL57:
3661:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 547              		.loc 1 3661 0
 548 002e 2846     		mov	r0, r5
 549 0030 FFF7FEFF 		bl	prvDeleteTCB
 550              	.LVL58:
 551              	.L44:
3650:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 552              		.loc 1 3650 0
 553 0034 024B     		ldr	r3, .L47
 554 0036 D3F8E830 		ldr	r3, [r3, #232]
 555 003a 002B     		cmp	r3, #0
 556 003c E2D1     		bne	.L45
 557              	.LBE27:
3665:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 558              		.loc 1 3665 0
 559 003e 38BD     		pop	{r3, r4, r5, pc}
 560              	.L48:
 561              		.align	2
 562              	.L47:
 563 0040 00000000 		.word	.LANCHOR0
 564              		.cfi_endproc
 565              	.LFE103:
 566              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 567              		.section	.text.prvIdleTask,"ax",%progbits
 568              		.align	2
 569              		.thumb
 570              		.thumb_func
 571              		.type	prvIdleTask, %function
 572              	prvIdleTask:
 573              	.LFB101:
3393:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Stop warnings. */
 574              		.loc 1 3393 0
 575              		.cfi_startproc
 576              		@ Volatile: function does not return.
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL59:
 580 0000 08B5     		push	{r3, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 3, -8
 583              		.cfi_offset 14, -4
 584              	.LVL60:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 82


 585              	.L50:
3409:Source\bsw\FreeRTOS\src/tasks.c **** 
 586              		.loc 1 3409 0 discriminator 1
 587 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 588              	.LVL61:
 589 0006 FCE7     		b	.L50
 590              		.cfi_endproc
 591              	.LFE101:
 592              		.size	prvIdleTask, .-prvIdleTask
 593              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 594              		.align	2
 595              		.thumb
 596              		.thumb_func
 597              		.type	prvAddCurrentTaskToDelayedList, %function
 598              	prvAddCurrentTaskToDelayedList:
 599              	.LFB121:
3963:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3964:Source\bsw\FreeRTOS\src/tasks.c **** }
3965:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3966:Source\bsw\FreeRTOS\src/tasks.c **** 
3967:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Source\bsw\FreeRTOS\src/tasks.c **** 
3969:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3971:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
3972:Source\bsw\FreeRTOS\src/tasks.c **** 
3973:Source\bsw\FreeRTOS\src/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Source\bsw\FreeRTOS\src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Source\bsw\FreeRTOS\src/tasks.c **** 		individual execution thread. */
3976:Source\bsw\FreeRTOS\src/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Source\bsw\FreeRTOS\src/tasks.c **** 
3978:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
3979:Source\bsw\FreeRTOS\src/tasks.c **** 	}
3980:Source\bsw\FreeRTOS\src/tasks.c **** 
3981:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
3983:Source\bsw\FreeRTOS\src/tasks.c **** 
3984:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Source\bsw\FreeRTOS\src/tasks.c **** 
3986:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Source\bsw\FreeRTOS\src/tasks.c **** 	{
3988:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
3989:Source\bsw\FreeRTOS\src/tasks.c **** 
3990:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3992:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Source\bsw\FreeRTOS\src/tasks.c **** 		}
3994:Source\bsw\FreeRTOS\src/tasks.c **** 		else
3995:Source\bsw\FreeRTOS\src/tasks.c **** 		{
3996:Source\bsw\FreeRTOS\src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Source\bsw\FreeRTOS\src/tasks.c **** 			{
3998:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4000:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4001:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4002:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Source\bsw\FreeRTOS\src/tasks.c **** 			}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 83


4004:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4005:Source\bsw\FreeRTOS\src/tasks.c **** 
4006:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
4007:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4008:Source\bsw\FreeRTOS\src/tasks.c **** 
4009:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4011:Source\bsw\FreeRTOS\src/tasks.c **** 
4012:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Source\bsw\FreeRTOS\src/tasks.c **** 
4014:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4016:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Source\bsw\FreeRTOS\src/tasks.c **** 
4019:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Source\bsw\FreeRTOS\src/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Source\bsw\FreeRTOS\src/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4024:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Source\bsw\FreeRTOS\src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Source\bsw\FreeRTOS\src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4029:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Source\bsw\FreeRTOS\src/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Source\bsw\FreeRTOS\src/tasks.c **** 				not being used for anything else. */
4032:Source\bsw\FreeRTOS\src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4034:Source\bsw\FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4036:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4037:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4038:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4040:Source\bsw\FreeRTOS\src/tasks.c **** 
4041:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Source\bsw\FreeRTOS\src/tasks.c **** 				to be moved into a new list. */
4043:Source\bsw\FreeRTOS\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4045:Source\bsw\FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4047:Source\bsw\FreeRTOS\src/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Source\bsw\FreeRTOS\src/tasks.c **** 						there is no need to check again and the port level
4049:Source\bsw\FreeRTOS\src/tasks.c **** 						reset macro can be called directly. */
4050:Source\bsw\FreeRTOS\src/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4052:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4053:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4054:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4056:Source\bsw\FreeRTOS\src/tasks.c **** 
4057:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Source\bsw\FreeRTOS\src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Source\bsw\FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 84


4061:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4062:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4063:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Just inherit the priority. */
4064:Source\bsw\FreeRTOS\src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4066:Source\bsw\FreeRTOS\src/tasks.c **** 
4067:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Source\bsw\FreeRTOS\src/tasks.c **** 
4069:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Inheritance occurred. */
4070:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
4071:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4072:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4073:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4074:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4076:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Source\bsw\FreeRTOS\src/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Source\bsw\FreeRTOS\src/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Source\bsw\FreeRTOS\src/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Source\bsw\FreeRTOS\src/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Source\bsw\FreeRTOS\src/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Source\bsw\FreeRTOS\src/tasks.c **** 					not been the case. */
4083:Source\bsw\FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
4084:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4085:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4086:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4087:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4089:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4090:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4091:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4092:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4093:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4095:Source\bsw\FreeRTOS\src/tasks.c **** 
4096:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
4097:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4098:Source\bsw\FreeRTOS\src/tasks.c **** 
4099:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4101:Source\bsw\FreeRTOS\src/tasks.c **** 
4102:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Source\bsw\FreeRTOS\src/tasks.c **** 
4104:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4106:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Source\bsw\FreeRTOS\src/tasks.c **** 
4109:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4111:Source\bsw\FreeRTOS\src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Source\bsw\FreeRTOS\src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Source\bsw\FreeRTOS\src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Source\bsw\FreeRTOS\src/tasks.c **** 			be the running state task. */
4115:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Source\bsw\FreeRTOS\src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 85


4118:Source\bsw\FreeRTOS\src/tasks.c **** 
4119:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Source\bsw\FreeRTOS\src/tasks.c **** 			task? */
4121:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4123:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4126:Source\bsw\FreeRTOS\src/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Source\bsw\FreeRTOS\src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Source\bsw\FreeRTOS\src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Source\bsw\FreeRTOS\src/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Source\bsw\FreeRTOS\src/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Source\bsw\FreeRTOS\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4133:Source\bsw\FreeRTOS\src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4135:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4136:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4137:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4139:Source\bsw\FreeRTOS\src/tasks.c **** 
4140:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Source\bsw\FreeRTOS\src/tasks.c **** 					new	ready list. */
4142:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Source\bsw\FreeRTOS\src/tasks.c **** 
4145:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Source\bsw\FreeRTOS\src/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Source\bsw\FreeRTOS\src/tasks.c **** 					running to give back the mutex. */
4148:Source\bsw\FreeRTOS\src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Source\bsw\FreeRTOS\src/tasks.c **** 
4151:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Source\bsw\FreeRTOS\src/tasks.c **** 					This is only actually required in the corner case whereby
4153:Source\bsw\FreeRTOS\src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Source\bsw\FreeRTOS\src/tasks.c **** 					in an order different to that in which they were taken.
4155:Source\bsw\FreeRTOS\src/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Source\bsw\FreeRTOS\src/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Source\bsw\FreeRTOS\src/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Source\bsw\FreeRTOS\src/tasks.c **** 					a task is waiting on it or not. */
4159:Source\bsw\FreeRTOS\src/tasks.c **** 					xReturn = pdTRUE;
4160:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4161:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4162:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4163:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4165:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4166:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4167:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4168:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4170:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4171:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4172:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4173:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Source\bsw\FreeRTOS\src/tasks.c **** 		}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 86


4175:Source\bsw\FreeRTOS\src/tasks.c **** 
4176:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
4177:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4178:Source\bsw\FreeRTOS\src/tasks.c **** 
4179:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4181:Source\bsw\FreeRTOS\src/tasks.c **** 
4182:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Source\bsw\FreeRTOS\src/tasks.c **** 
4184:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4186:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Source\bsw\FreeRTOS\src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Source\bsw\FreeRTOS\src/tasks.c **** 
4190:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4192:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Source\bsw\FreeRTOS\src/tasks.c **** 			one mutex. */
4194:Source\bsw\FreeRTOS\src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Source\bsw\FreeRTOS\src/tasks.c **** 
4196:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Source\bsw\FreeRTOS\src/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Source\bsw\FreeRTOS\src/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Source\bsw\FreeRTOS\src/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4202:Source\bsw\FreeRTOS\src/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4204:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4205:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4206:Source\bsw\FreeRTOS\src/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4208:Source\bsw\FreeRTOS\src/tasks.c **** 
4209:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Does the priority need to change? */
4210:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4212:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Source\bsw\FreeRTOS\src/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Source\bsw\FreeRTOS\src/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Source\bsw\FreeRTOS\src/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4218:Source\bsw\FreeRTOS\src/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Source\bsw\FreeRTOS\src/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Source\bsw\FreeRTOS\src/tasks.c **** 					its own priority. */
4221:Source\bsw\FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Source\bsw\FreeRTOS\src/tasks.c **** 
4223:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Source\bsw\FreeRTOS\src/tasks.c **** 					priority to facilitate determining the subject task's
4225:Source\bsw\FreeRTOS\src/tasks.c **** 					state. */
4226:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Source\bsw\FreeRTOS\src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Source\bsw\FreeRTOS\src/tasks.c **** 
4230:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Source\bsw\FreeRTOS\src/tasks.c **** 					being used for anything else. */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 87


4232:Source\bsw\FreeRTOS\src/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4234:Source\bsw\FreeRTOS\src/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4236:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4237:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4238:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4240:Source\bsw\FreeRTOS\src/tasks.c **** 
4241:Source\bsw\FreeRTOS\src/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Source\bsw\FreeRTOS\src/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Source\bsw\FreeRTOS\src/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Source\bsw\FreeRTOS\src/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Source\bsw\FreeRTOS\src/tasks.c **** 					the task's priority is going to change and there is one
4246:Source\bsw\FreeRTOS\src/tasks.c **** 					Ready list per priority. */
4247:Source\bsw\FreeRTOS\src/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4249:Source\bsw\FreeRTOS\src/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Source\bsw\FreeRTOS\src/tasks.c **** 						{
4251:Source\bsw\FreeRTOS\src/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Source\bsw\FreeRTOS\src/tasks.c **** 							there is no need to check again and the port level
4253:Source\bsw\FreeRTOS\src/tasks.c **** 							reset macro can be called directly. */
4254:Source\bsw\FreeRTOS\src/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4256:Source\bsw\FreeRTOS\src/tasks.c **** 						else
4257:Source\bsw\FreeRTOS\src/tasks.c **** 						{
4258:Source\bsw\FreeRTOS\src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4260:Source\bsw\FreeRTOS\src/tasks.c **** 
4261:Source\bsw\FreeRTOS\src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4263:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4264:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4265:Source\bsw\FreeRTOS\src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4267:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4268:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4269:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4270:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4272:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4273:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4274:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4275:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4277:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4278:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4279:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4280:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4282:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4283:Source\bsw\FreeRTOS\src/tasks.c **** 
4284:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4286:Source\bsw\FreeRTOS\src/tasks.c **** 
4287:Source\bsw\FreeRTOS\src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 88


4289:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskEnterCritical( void )
4290:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4291:Source\bsw\FreeRTOS\src/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Source\bsw\FreeRTOS\src/tasks.c **** 
4293:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4295:Source\bsw\FreeRTOS\src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Source\bsw\FreeRTOS\src/tasks.c **** 
4297:Source\bsw\FreeRTOS\src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Source\bsw\FreeRTOS\src/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Source\bsw\FreeRTOS\src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Source\bsw\FreeRTOS\src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Source\bsw\FreeRTOS\src/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Source\bsw\FreeRTOS\src/tasks.c **** 			critical section. */
4303:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4305:Source\bsw\FreeRTOS\src/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4307:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4308:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4309:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4310:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4312:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4313:Source\bsw\FreeRTOS\src/tasks.c **** 
4314:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4316:Source\bsw\FreeRTOS\src/tasks.c **** 
4317:Source\bsw\FreeRTOS\src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Source\bsw\FreeRTOS\src/tasks.c **** 
4319:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskExitCritical( void )
4320:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4321:Source\bsw\FreeRTOS\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4323:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4325:Source\bsw\FreeRTOS\src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Source\bsw\FreeRTOS\src/tasks.c **** 
4327:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4329:Source\bsw\FreeRTOS\src/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4331:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4332:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4333:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4335:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4336:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4337:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4338:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4340:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4341:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4342:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4343:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4345:Source\bsw\FreeRTOS\src/tasks.c **** 	}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 89


4346:Source\bsw\FreeRTOS\src/tasks.c **** 
4347:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4349:Source\bsw\FreeRTOS\src/tasks.c **** 
4350:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Source\bsw\FreeRTOS\src/tasks.c **** 
4352:Source\bsw\FreeRTOS\src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4354:Source\bsw\FreeRTOS\src/tasks.c **** 	size_t x;
4355:Source\bsw\FreeRTOS\src/tasks.c **** 
4356:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Start by copying the entire string. */
4357:Source\bsw\FreeRTOS\src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Source\bsw\FreeRTOS\src/tasks.c **** 
4359:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Source\bsw\FreeRTOS\src/tasks.c **** 		printed out. */
4361:Source\bsw\FreeRTOS\src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4363:Source\bsw\FreeRTOS\src/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4365:Source\bsw\FreeRTOS\src/tasks.c **** 
4366:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Terminate. */
4367:Source\bsw\FreeRTOS\src/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Source\bsw\FreeRTOS\src/tasks.c **** 
4369:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Return the new end of string. */
4370:Source\bsw\FreeRTOS\src/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4372:Source\bsw\FreeRTOS\src/tasks.c **** 
4373:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4375:Source\bsw\FreeRTOS\src/tasks.c **** 
4376:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Source\bsw\FreeRTOS\src/tasks.c **** 
4378:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4380:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Source\bsw\FreeRTOS\src/tasks.c **** 	char cStatus;
4383:Source\bsw\FreeRTOS\src/tasks.c **** 
4384:Source\bsw\FreeRTOS\src/tasks.c **** 		/*
4385:Source\bsw\FreeRTOS\src/tasks.c **** 		 * PLEASE NOTE:
4386:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4387:Source\bsw\FreeRTOS\src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Source\bsw\FreeRTOS\src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Source\bsw\FreeRTOS\src/tasks.c **** 		 * scheduler.
4390:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4391:Source\bsw\FreeRTOS\src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Source\bsw\FreeRTOS\src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Source\bsw\FreeRTOS\src/tasks.c **** 		 * displays task names, states and stack usage.
4394:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4395:Source\bsw\FreeRTOS\src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Source\bsw\FreeRTOS\src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Source\bsw\FreeRTOS\src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Source\bsw\FreeRTOS\src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Source\bsw\FreeRTOS\src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Source\bsw\FreeRTOS\src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Source\bsw\FreeRTOS\src/tasks.c **** 		 * snprintf() implementation!).
4402:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 90


4403:Source\bsw\FreeRTOS\src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Source\bsw\FreeRTOS\src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Source\bsw\FreeRTOS\src/tasks.c **** 		 * through a call to vTaskList().
4406:Source\bsw\FreeRTOS\src/tasks.c **** 		 */
4407:Source\bsw\FreeRTOS\src/tasks.c **** 
4408:Source\bsw\FreeRTOS\src/tasks.c **** 
4409:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Source\bsw\FreeRTOS\src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Source\bsw\FreeRTOS\src/tasks.c **** 
4412:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Source\bsw\FreeRTOS\src/tasks.c **** 		function is executing. */
4414:Source\bsw\FreeRTOS\src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Source\bsw\FreeRTOS\src/tasks.c **** 
4416:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Source\bsw\FreeRTOS\src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Source\bsw\FreeRTOS\src/tasks.c **** 		equate to NULL. */
4419:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Source\bsw\FreeRTOS\src/tasks.c **** 
4421:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4423:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Generate the (binary) data. */
4424:Source\bsw\FreeRTOS\src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Source\bsw\FreeRTOS\src/tasks.c **** 
4426:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Source\bsw\FreeRTOS\src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4429:Source\bsw\FreeRTOS\src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4431:Source\bsw\FreeRTOS\src/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4433:Source\bsw\FreeRTOS\src/tasks.c **** 
4434:Source\bsw\FreeRTOS\src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4436:Source\bsw\FreeRTOS\src/tasks.c **** 
4437:Source\bsw\FreeRTOS\src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4439:Source\bsw\FreeRTOS\src/tasks.c **** 
4440:Source\bsw\FreeRTOS\src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4442:Source\bsw\FreeRTOS\src/tasks.c **** 
4443:Source\bsw\FreeRTOS\src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4445:Source\bsw\FreeRTOS\src/tasks.c **** 
4446:Source\bsw\FreeRTOS\src/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Source\bsw\FreeRTOS\src/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Source\bsw\FreeRTOS\src/tasks.c **** 										to prevent static checking errors. */
4449:Source\bsw\FreeRTOS\src/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Source\bsw\FreeRTOS\src/tasks.c **** 										break;
4451:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4452:Source\bsw\FreeRTOS\src/tasks.c **** 
4453:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Source\bsw\FreeRTOS\src/tasks.c **** 				can be printed in tabular form more easily. */
4455:Source\bsw\FreeRTOS\src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Source\bsw\FreeRTOS\src/tasks.c **** 
4457:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Write the rest of the string. */
4458:Source\bsw\FreeRTOS\src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Source\bsw\FreeRTOS\src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 91


4460:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4461:Source\bsw\FreeRTOS\src/tasks.c **** 
4462:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Source\bsw\FreeRTOS\src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Source\bsw\FreeRTOS\src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4466:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4467:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4468:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4470:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4471:Source\bsw\FreeRTOS\src/tasks.c **** 
4472:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
4474:Source\bsw\FreeRTOS\src/tasks.c **** 
4475:Source\bsw\FreeRTOS\src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Source\bsw\FreeRTOS\src/tasks.c **** 
4477:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4479:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Source\bsw\FreeRTOS\src/tasks.c **** 
4483:Source\bsw\FreeRTOS\src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4485:Source\bsw\FreeRTOS\src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4487:Source\bsw\FreeRTOS\src/tasks.c **** 		#endif
4488:Source\bsw\FreeRTOS\src/tasks.c **** 
4489:Source\bsw\FreeRTOS\src/tasks.c **** 		/*
4490:Source\bsw\FreeRTOS\src/tasks.c **** 		 * PLEASE NOTE:
4491:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4492:Source\bsw\FreeRTOS\src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Source\bsw\FreeRTOS\src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Source\bsw\FreeRTOS\src/tasks.c **** 		 * scheduler.
4495:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4496:Source\bsw\FreeRTOS\src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Source\bsw\FreeRTOS\src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Source\bsw\FreeRTOS\src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Source\bsw\FreeRTOS\src/tasks.c **** 		 * in both absolute and percentage terms.
4500:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4501:Source\bsw\FreeRTOS\src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Source\bsw\FreeRTOS\src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Source\bsw\FreeRTOS\src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Source\bsw\FreeRTOS\src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Source\bsw\FreeRTOS\src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Source\bsw\FreeRTOS\src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Source\bsw\FreeRTOS\src/tasks.c **** 		 * a full snprintf() implementation!).
4508:Source\bsw\FreeRTOS\src/tasks.c **** 		 *
4509:Source\bsw\FreeRTOS\src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Source\bsw\FreeRTOS\src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Source\bsw\FreeRTOS\src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Source\bsw\FreeRTOS\src/tasks.c **** 		 */
4513:Source\bsw\FreeRTOS\src/tasks.c **** 
4514:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Source\bsw\FreeRTOS\src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Source\bsw\FreeRTOS\src/tasks.c **** 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 92


4517:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Source\bsw\FreeRTOS\src/tasks.c **** 		function is executing. */
4519:Source\bsw\FreeRTOS\src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Source\bsw\FreeRTOS\src/tasks.c **** 
4521:Source\bsw\FreeRTOS\src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Source\bsw\FreeRTOS\src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Source\bsw\FreeRTOS\src/tasks.c **** 		equate to NULL. */
4524:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Source\bsw\FreeRTOS\src/tasks.c **** 
4526:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4528:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Generate the (binary) data. */
4529:Source\bsw\FreeRTOS\src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Source\bsw\FreeRTOS\src/tasks.c **** 
4531:Source\bsw\FreeRTOS\src/tasks.c **** 			/* For percentage calculations. */
4532:Source\bsw\FreeRTOS\src/tasks.c **** 			ulTotalTime /= 100UL;
4533:Source\bsw\FreeRTOS\src/tasks.c **** 
4534:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4537:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Source\bsw\FreeRTOS\src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4540:Source\bsw\FreeRTOS\src/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Source\bsw\FreeRTOS\src/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Source\bsw\FreeRTOS\src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Source\bsw\FreeRTOS\src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Source\bsw\FreeRTOS\src/tasks.c **** 
4545:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Write the task name to the string, padding with
4546:Source\bsw\FreeRTOS\src/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Source\bsw\FreeRTOS\src/tasks.c **** 					easily. */
4548:Source\bsw\FreeRTOS\src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Source\bsw\FreeRTOS\src/tasks.c **** 
4550:Source\bsw\FreeRTOS\src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4552:Source\bsw\FreeRTOS\src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Source\bsw\FreeRTOS\src/tasks.c **** 						{
4554:Source\bsw\FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4556:Source\bsw\FreeRTOS\src/tasks.c **** 						#else
4557:Source\bsw\FreeRTOS\src/tasks.c **** 						{
4558:Source\bsw\FreeRTOS\src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Source\bsw\FreeRTOS\src/tasks.c **** 							printf() library can be used. */
4560:Source\bsw\FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4562:Source\bsw\FreeRTOS\src/tasks.c **** 						#endif
4563:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4564:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4565:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4566:Source\bsw\FreeRTOS\src/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Source\bsw\FreeRTOS\src/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Source\bsw\FreeRTOS\src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Source\bsw\FreeRTOS\src/tasks.c **** 						{
4570:Source\bsw\FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4572:Source\bsw\FreeRTOS\src/tasks.c **** 						#else
4573:Source\bsw\FreeRTOS\src/tasks.c **** 						{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 93


4574:Source\bsw\FreeRTOS\src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Source\bsw\FreeRTOS\src/tasks.c **** 							printf() library can be used. */
4576:Source\bsw\FreeRTOS\src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Source\bsw\FreeRTOS\src/tasks.c **** 						}
4578:Source\bsw\FreeRTOS\src/tasks.c **** 						#endif
4579:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4580:Source\bsw\FreeRTOS\src/tasks.c **** 
4581:Source\bsw\FreeRTOS\src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4583:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4584:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4585:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4586:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4588:Source\bsw\FreeRTOS\src/tasks.c **** 
4589:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Source\bsw\FreeRTOS\src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Source\bsw\FreeRTOS\src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4593:Source\bsw\FreeRTOS\src/tasks.c **** 		else
4594:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4595:Source\bsw\FreeRTOS\src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4597:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4598:Source\bsw\FreeRTOS\src/tasks.c **** 
4599:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4601:Source\bsw\FreeRTOS\src/tasks.c **** 
4602:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Source\bsw\FreeRTOS\src/tasks.c **** {
4604:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t uxReturn;
4605:Source\bsw\FreeRTOS\src/tasks.c **** 
4606:Source\bsw\FreeRTOS\src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Source\bsw\FreeRTOS\src/tasks.c **** 
4608:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Source\bsw\FreeRTOS\src/tasks.c **** 	queues and semaphores. */
4610:Source\bsw\FreeRTOS\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Source\bsw\FreeRTOS\src/tasks.c **** 
4612:Source\bsw\FreeRTOS\src/tasks.c **** 	return uxReturn;
4613:Source\bsw\FreeRTOS\src/tasks.c **** }
4614:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4615:Source\bsw\FreeRTOS\src/tasks.c **** 
4616:Source\bsw\FreeRTOS\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Source\bsw\FreeRTOS\src/tasks.c **** 
4618:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4620:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Source\bsw\FreeRTOS\src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Source\bsw\FreeRTOS\src/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4624:Source\bsw\FreeRTOS\src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4626:Source\bsw\FreeRTOS\src/tasks.c **** 
4627:Source\bsw\FreeRTOS\src/tasks.c **** 		return pxCurrentTCB;
4628:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4629:Source\bsw\FreeRTOS\src/tasks.c **** 
4630:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 94


4631:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4632:Source\bsw\FreeRTOS\src/tasks.c **** 
4633:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Source\bsw\FreeRTOS\src/tasks.c **** 
4635:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4637:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulReturn;
4638:Source\bsw\FreeRTOS\src/tasks.c **** 
4639:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4640:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4641:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4644:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Source\bsw\FreeRTOS\src/tasks.c **** 
4647:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4649:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Source\bsw\FreeRTOS\src/tasks.c **** 
4652:Source\bsw\FreeRTOS\src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Source\bsw\FreeRTOS\src/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Source\bsw\FreeRTOS\src/tasks.c **** 					critical section exits) - but it is not something that
4655:Source\bsw\FreeRTOS\src/tasks.c **** 					application code should ever do. */
4656:Source\bsw\FreeRTOS\src/tasks.c **** 					portYIELD_WITHIN_API();
4657:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4658:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4659:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4660:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4662:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4663:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4664:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4665:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4667:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4668:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4669:Source\bsw\FreeRTOS\src/tasks.c **** 
4670:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4671:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4672:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Source\bsw\FreeRTOS\src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Source\bsw\FreeRTOS\src/tasks.c **** 
4675:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ulReturn != 0UL )
4676:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4677:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4679:Source\bsw\FreeRTOS\src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4681:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4682:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4683:Source\bsw\FreeRTOS\src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4685:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4686:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4687:Source\bsw\FreeRTOS\src/tasks.c **** 			{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 95


4688:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4690:Source\bsw\FreeRTOS\src/tasks.c **** 
4691:Source\bsw\FreeRTOS\src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4693:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4694:Source\bsw\FreeRTOS\src/tasks.c **** 
4695:Source\bsw\FreeRTOS\src/tasks.c **** 		return ulReturn;
4696:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4697:Source\bsw\FreeRTOS\src/tasks.c **** 
4698:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4700:Source\bsw\FreeRTOS\src/tasks.c **** 
4701:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Source\bsw\FreeRTOS\src/tasks.c **** 
4703:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4705:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
4706:Source\bsw\FreeRTOS\src/tasks.c **** 
4707:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4708:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4709:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4712:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Source\bsw\FreeRTOS\src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Source\bsw\FreeRTOS\src/tasks.c **** 				clear the value to zero. */
4715:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Source\bsw\FreeRTOS\src/tasks.c **** 
4717:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Source\bsw\FreeRTOS\src/tasks.c **** 
4720:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4722:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Source\bsw\FreeRTOS\src/tasks.c **** 
4725:Source\bsw\FreeRTOS\src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Source\bsw\FreeRTOS\src/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Source\bsw\FreeRTOS\src/tasks.c **** 					critical section exits) - but it is not something that
4728:Source\bsw\FreeRTOS\src/tasks.c **** 					application code should ever do. */
4729:Source\bsw\FreeRTOS\src/tasks.c **** 					portYIELD_WITHIN_API();
4730:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4731:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4732:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4733:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4735:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4736:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4737:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4738:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4740:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4741:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4742:Source\bsw\FreeRTOS\src/tasks.c **** 
4743:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4744:Source\bsw\FreeRTOS\src/tasks.c **** 		{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 96


4745:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Source\bsw\FreeRTOS\src/tasks.c **** 
4747:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4749:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Source\bsw\FreeRTOS\src/tasks.c **** 				have changed. */
4751:Source\bsw\FreeRTOS\src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4753:Source\bsw\FreeRTOS\src/tasks.c **** 
4754:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Source\bsw\FreeRTOS\src/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Source\bsw\FreeRTOS\src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Source\bsw\FreeRTOS\src/tasks.c **** 			unblocked because of a timeout. */
4758:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4760:Source\bsw\FreeRTOS\src/tasks.c **** 				/* A notification was not received. */
4761:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdFALSE;
4762:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4763:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4764:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4765:Source\bsw\FreeRTOS\src/tasks.c **** 				/* A notification was already pending or a notification was
4766:Source\bsw\FreeRTOS\src/tasks.c **** 				received while the task was waiting. */
4767:Source\bsw\FreeRTOS\src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
4769:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4770:Source\bsw\FreeRTOS\src/tasks.c **** 
4771:Source\bsw\FreeRTOS\src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4773:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4774:Source\bsw\FreeRTOS\src/tasks.c **** 
4775:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
4776:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4777:Source\bsw\FreeRTOS\src/tasks.c **** 
4778:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4780:Source\bsw\FreeRTOS\src/tasks.c **** 
4781:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Source\bsw\FreeRTOS\src/tasks.c **** 
4783:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4785:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
4786:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Source\bsw\FreeRTOS\src/tasks.c **** 
4789:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Source\bsw\FreeRTOS\src/tasks.c **** 
4792:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
4793:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4794:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4796:Source\bsw\FreeRTOS\src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4798:Source\bsw\FreeRTOS\src/tasks.c **** 
4799:Source\bsw\FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Source\bsw\FreeRTOS\src/tasks.c **** 
4801:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 97


4802:Source\bsw\FreeRTOS\src/tasks.c **** 
4803:Source\bsw\FreeRTOS\src/tasks.c **** 			switch( eAction )
4804:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4805:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetBits	:
4806:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4808:Source\bsw\FreeRTOS\src/tasks.c **** 
4809:Source\bsw\FreeRTOS\src/tasks.c **** 				case eIncrement	:
4810:Source\bsw\FreeRTOS\src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4812:Source\bsw\FreeRTOS\src/tasks.c **** 
4813:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4816:Source\bsw\FreeRTOS\src/tasks.c **** 
4817:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Source\bsw\FreeRTOS\src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4820:Source\bsw\FreeRTOS\src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4822:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4823:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4824:Source\bsw\FreeRTOS\src/tasks.c **** 						/* The value could not be written to the task. */
4825:Source\bsw\FreeRTOS\src/tasks.c **** 						xReturn = pdFAIL;
4826:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4827:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4828:Source\bsw\FreeRTOS\src/tasks.c **** 
4829:Source\bsw\FreeRTOS\src/tasks.c **** 				case eNoAction:
4830:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task is being notified without its notify value being
4831:Source\bsw\FreeRTOS\src/tasks.c **** 					updated. */
4832:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4833:Source\bsw\FreeRTOS\src/tasks.c **** 
4834:Source\bsw\FreeRTOS\src/tasks.c **** 				default:
4835:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Source\bsw\FreeRTOS\src/tasks.c **** 					Artificially force an assert by testing a value the
4837:Source\bsw\FreeRTOS\src/tasks.c **** 					compiler can't assume is const. */
4838:Source\bsw\FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Source\bsw\FreeRTOS\src/tasks.c **** 
4840:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4841:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4842:Source\bsw\FreeRTOS\src/tasks.c **** 
4843:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY();
4844:Source\bsw\FreeRTOS\src/tasks.c **** 
4845:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Source\bsw\FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
4847:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4849:Source\bsw\FreeRTOS\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Source\bsw\FreeRTOS\src/tasks.c **** 
4852:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
4853:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Source\bsw\FreeRTOS\src/tasks.c **** 
4855:Source\bsw\FreeRTOS\src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4857:Source\bsw\FreeRTOS\src/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Source\bsw\FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 98


4859:Source\bsw\FreeRTOS\src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Source\bsw\FreeRTOS\src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Source\bsw\FreeRTOS\src/tasks.c **** 					because it will automatically get reset to a new value when
4862:Source\bsw\FreeRTOS\src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Source\bsw\FreeRTOS\src/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Source\bsw\FreeRTOS\src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Source\bsw\FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Source\bsw\FreeRTOS\src/tasks.c **** 					earliest possible time. */
4867:Source\bsw\FreeRTOS\src/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4869:Source\bsw\FreeRTOS\src/tasks.c **** 				#endif
4870:Source\bsw\FreeRTOS\src/tasks.c **** 
4871:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4873:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
4874:Source\bsw\FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
4875:Source\bsw\FreeRTOS\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4877:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4878:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4879:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4881:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4882:Source\bsw\FreeRTOS\src/tasks.c **** 			else
4883:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4884:Source\bsw\FreeRTOS\src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4886:Source\bsw\FreeRTOS\src/tasks.c **** 		}
4887:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
4888:Source\bsw\FreeRTOS\src/tasks.c **** 
4889:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
4890:Source\bsw\FreeRTOS\src/tasks.c **** 	}
4891:Source\bsw\FreeRTOS\src/tasks.c **** 
4892:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
4894:Source\bsw\FreeRTOS\src/tasks.c **** 
4895:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Source\bsw\FreeRTOS\src/tasks.c **** 
4897:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Source\bsw\FreeRTOS\src/tasks.c **** 	{
4899:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
4900:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Source\bsw\FreeRTOS\src/tasks.c **** 
4904:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Source\bsw\FreeRTOS\src/tasks.c **** 
4906:Source\bsw\FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Source\bsw\FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Source\bsw\FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Source\bsw\FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Source\bsw\FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Source\bsw\FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Source\bsw\FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Source\bsw\FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Source\bsw\FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 99


4916:Source\bsw\FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Source\bsw\FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Source\bsw\FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Source\bsw\FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Source\bsw\FreeRTOS\src/tasks.c **** 		provided on the following link:
4921:Source\bsw\FreeRTOS\src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Source\bsw\FreeRTOS\src/tasks.c **** 
4924:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Source\bsw\FreeRTOS\src/tasks.c **** 
4926:Source\bsw\FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Source\bsw\FreeRTOS\src/tasks.c **** 		{
4928:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4930:Source\bsw\FreeRTOS\src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4932:Source\bsw\FreeRTOS\src/tasks.c **** 
4933:Source\bsw\FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Source\bsw\FreeRTOS\src/tasks.c **** 
4936:Source\bsw\FreeRTOS\src/tasks.c **** 			switch( eAction )
4937:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4938:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetBits	:
4939:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4941:Source\bsw\FreeRTOS\src/tasks.c **** 
4942:Source\bsw\FreeRTOS\src/tasks.c **** 				case eIncrement	:
4943:Source\bsw\FreeRTOS\src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4945:Source\bsw\FreeRTOS\src/tasks.c **** 
4946:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Source\bsw\FreeRTOS\src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4949:Source\bsw\FreeRTOS\src/tasks.c **** 
4950:Source\bsw\FreeRTOS\src/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Source\bsw\FreeRTOS\src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4953:Source\bsw\FreeRTOS\src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4955:Source\bsw\FreeRTOS\src/tasks.c **** 					else
4956:Source\bsw\FreeRTOS\src/tasks.c **** 					{
4957:Source\bsw\FreeRTOS\src/tasks.c **** 						/* The value could not be written to the task. */
4958:Source\bsw\FreeRTOS\src/tasks.c **** 						xReturn = pdFAIL;
4959:Source\bsw\FreeRTOS\src/tasks.c **** 					}
4960:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4961:Source\bsw\FreeRTOS\src/tasks.c **** 
4962:Source\bsw\FreeRTOS\src/tasks.c **** 				case eNoAction :
4963:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The task is being notified without its notify value being
4964:Source\bsw\FreeRTOS\src/tasks.c **** 					updated. */
4965:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
4966:Source\bsw\FreeRTOS\src/tasks.c **** 
4967:Source\bsw\FreeRTOS\src/tasks.c **** 				default:
4968:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Source\bsw\FreeRTOS\src/tasks.c **** 					Artificially force an assert by testing a value the
4970:Source\bsw\FreeRTOS\src/tasks.c **** 					compiler can't assume is const. */
4971:Source\bsw\FreeRTOS\src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 100


4973:Source\bsw\FreeRTOS\src/tasks.c **** 			}
4974:Source\bsw\FreeRTOS\src/tasks.c **** 
4975:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Source\bsw\FreeRTOS\src/tasks.c **** 
4977:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Source\bsw\FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
4979:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Source\bsw\FreeRTOS\src/tasks.c **** 			{
4981:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
4982:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Source\bsw\FreeRTOS\src/tasks.c **** 
4984:Source\bsw\FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4986:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4989:Source\bsw\FreeRTOS\src/tasks.c **** 				else
4990:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4991:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Source\bsw\FreeRTOS\src/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Source\bsw\FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Source\bsw\FreeRTOS\src/tasks.c **** 				}
4995:Source\bsw\FreeRTOS\src/tasks.c **** 
4996:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Source\bsw\FreeRTOS\src/tasks.c **** 				{
4998:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
4999:Source\bsw\FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
5000:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Source\bsw\FreeRTOS\src/tasks.c **** 					{
5002:Source\bsw\FreeRTOS\src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Source\bsw\FreeRTOS\src/tasks.c **** 					}
5004:Source\bsw\FreeRTOS\src/tasks.c **** 
5005:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Source\bsw\FreeRTOS\src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Source\bsw\FreeRTOS\src/tasks.c **** 					safe FreeRTOS function. */
5008:Source\bsw\FreeRTOS\src/tasks.c **** 					xYieldPending = pdTRUE;
5009:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5010:Source\bsw\FreeRTOS\src/tasks.c **** 				else
5011:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5012:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5014:Source\bsw\FreeRTOS\src/tasks.c **** 			}
5015:Source\bsw\FreeRTOS\src/tasks.c **** 		}
5016:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Source\bsw\FreeRTOS\src/tasks.c **** 
5018:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
5019:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5020:Source\bsw\FreeRTOS\src/tasks.c **** 
5021:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
5023:Source\bsw\FreeRTOS\src/tasks.c **** 
5024:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Source\bsw\FreeRTOS\src/tasks.c **** 
5026:Source\bsw\FreeRTOS\src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5028:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
5029:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 101


5030:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Source\bsw\FreeRTOS\src/tasks.c **** 
5032:Source\bsw\FreeRTOS\src/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Source\bsw\FreeRTOS\src/tasks.c **** 
5034:Source\bsw\FreeRTOS\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Source\bsw\FreeRTOS\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Source\bsw\FreeRTOS\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Source\bsw\FreeRTOS\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Source\bsw\FreeRTOS\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Source\bsw\FreeRTOS\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Source\bsw\FreeRTOS\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Source\bsw\FreeRTOS\src/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Source\bsw\FreeRTOS\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Source\bsw\FreeRTOS\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Source\bsw\FreeRTOS\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Source\bsw\FreeRTOS\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Source\bsw\FreeRTOS\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Source\bsw\FreeRTOS\src/tasks.c **** 		provided on the following link:
5049:Source\bsw\FreeRTOS\src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Source\bsw\FreeRTOS\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Source\bsw\FreeRTOS\src/tasks.c **** 
5052:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Source\bsw\FreeRTOS\src/tasks.c **** 
5054:Source\bsw\FreeRTOS\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Source\bsw\FreeRTOS\src/tasks.c **** 		{
5056:Source\bsw\FreeRTOS\src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Source\bsw\FreeRTOS\src/tasks.c **** 
5059:Source\bsw\FreeRTOS\src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Source\bsw\FreeRTOS\src/tasks.c **** 			semaphore. */
5061:Source\bsw\FreeRTOS\src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Source\bsw\FreeRTOS\src/tasks.c **** 
5063:Source\bsw\FreeRTOS\src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Source\bsw\FreeRTOS\src/tasks.c **** 
5065:Source\bsw\FreeRTOS\src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Source\bsw\FreeRTOS\src/tasks.c **** 			notification then unblock it now. */
5067:Source\bsw\FreeRTOS\src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Source\bsw\FreeRTOS\src/tasks.c **** 			{
5069:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The task should not have been on an event list. */
5070:Source\bsw\FreeRTOS\src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Source\bsw\FreeRTOS\src/tasks.c **** 
5072:Source\bsw\FreeRTOS\src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5074:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5077:Source\bsw\FreeRTOS\src/tasks.c **** 				else
5078:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5079:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Source\bsw\FreeRTOS\src/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Source\bsw\FreeRTOS\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5083:Source\bsw\FreeRTOS\src/tasks.c **** 
5084:Source\bsw\FreeRTOS\src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5086:Source\bsw\FreeRTOS\src/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 102


5087:Source\bsw\FreeRTOS\src/tasks.c **** 					executing task so a yield is required. */
5088:Source\bsw\FreeRTOS\src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Source\bsw\FreeRTOS\src/tasks.c **** 					{
5090:Source\bsw\FreeRTOS\src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Source\bsw\FreeRTOS\src/tasks.c **** 					}
5092:Source\bsw\FreeRTOS\src/tasks.c **** 
5093:Source\bsw\FreeRTOS\src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Source\bsw\FreeRTOS\src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Source\bsw\FreeRTOS\src/tasks.c **** 					safe FreeRTOS function. */
5096:Source\bsw\FreeRTOS\src/tasks.c **** 					xYieldPending = pdTRUE;
5097:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5098:Source\bsw\FreeRTOS\src/tasks.c **** 				else
5099:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5100:Source\bsw\FreeRTOS\src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Source\bsw\FreeRTOS\src/tasks.c **** 				}
5102:Source\bsw\FreeRTOS\src/tasks.c **** 			}
5103:Source\bsw\FreeRTOS\src/tasks.c **** 		}
5104:Source\bsw\FreeRTOS\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5106:Source\bsw\FreeRTOS\src/tasks.c **** 
5107:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
5109:Source\bsw\FreeRTOS\src/tasks.c **** 
5110:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Source\bsw\FreeRTOS\src/tasks.c **** 
5112:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5114:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
5115:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
5116:Source\bsw\FreeRTOS\src/tasks.c **** 
5117:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Source\bsw\FreeRTOS\src/tasks.c **** 		its notification state cleared. */
5119:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Source\bsw\FreeRTOS\src/tasks.c **** 
5121:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
5122:Source\bsw\FreeRTOS\src/tasks.c **** 		{
5123:Source\bsw\FreeRTOS\src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Source\bsw\FreeRTOS\src/tasks.c **** 			{
5125:Source\bsw\FreeRTOS\src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
5127:Source\bsw\FreeRTOS\src/tasks.c **** 			}
5128:Source\bsw\FreeRTOS\src/tasks.c **** 			else
5129:Source\bsw\FreeRTOS\src/tasks.c **** 			{
5130:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdFAIL;
5131:Source\bsw\FreeRTOS\src/tasks.c **** 			}
5132:Source\bsw\FreeRTOS\src/tasks.c **** 		}
5133:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
5134:Source\bsw\FreeRTOS\src/tasks.c **** 
5135:Source\bsw\FreeRTOS\src/tasks.c **** 		return xReturn;
5136:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5137:Source\bsw\FreeRTOS\src/tasks.c **** 
5138:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
5140:Source\bsw\FreeRTOS\src/tasks.c **** 
5141:Source\bsw\FreeRTOS\src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Source\bsw\FreeRTOS\src/tasks.c **** 
5143:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 103


5144:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5145:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
5146:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulReturn;
5147:Source\bsw\FreeRTOS\src/tasks.c **** 
5148:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Source\bsw\FreeRTOS\src/tasks.c **** 		its notification state cleared. */
5150:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Source\bsw\FreeRTOS\src/tasks.c **** 
5152:Source\bsw\FreeRTOS\src/tasks.c **** 		taskENTER_CRITICAL();
5153:Source\bsw\FreeRTOS\src/tasks.c **** 		{
5154:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Source\bsw\FreeRTOS\src/tasks.c **** 			then clear the bit mask. */
5156:Source\bsw\FreeRTOS\src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Source\bsw\FreeRTOS\src/tasks.c **** 		}
5159:Source\bsw\FreeRTOS\src/tasks.c **** 		taskEXIT_CRITICAL();
5160:Source\bsw\FreeRTOS\src/tasks.c **** 
5161:Source\bsw\FreeRTOS\src/tasks.c **** 		return ulReturn;
5162:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5163:Source\bsw\FreeRTOS\src/tasks.c **** 
5164:Source\bsw\FreeRTOS\src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
5166:Source\bsw\FreeRTOS\src/tasks.c **** 
5167:Source\bsw\FreeRTOS\src/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Source\bsw\FreeRTOS\src/tasks.c **** 
5169:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5171:Source\bsw\FreeRTOS\src/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5173:Source\bsw\FreeRTOS\src/tasks.c **** 
5174:Source\bsw\FreeRTOS\src/tasks.c **** #endif
5175:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
5176:Source\bsw\FreeRTOS\src/tasks.c **** 
5177:Source\bsw\FreeRTOS\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Source\bsw\FreeRTOS\src/tasks.c **** {
 600              		.loc 1 5178 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              	.LVL62:
 605 0000 70B5     		push	{r4, r5, r6, lr}
 606              		.cfi_def_cfa_offset 16
 607              		.cfi_offset 4, -16
 608              		.cfi_offset 5, -12
 609              		.cfi_offset 6, -8
 610              		.cfi_offset 14, -4
 611 0002 0446     		mov	r4, r0
 612 0004 0E46     		mov	r6, r1
5179:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xTimeToWake;
5180:Source\bsw\FreeRTOS\src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 613              		.loc 1 5180 0
 614 0006 1E4B     		ldr	r3, .L58
 615 0008 D3F8EC50 		ldr	r5, [r3, #236]
 616              	.LVL63:
5181:Source\bsw\FreeRTOS\src/tasks.c **** 
5182:Source\bsw\FreeRTOS\src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Source\bsw\FreeRTOS\src/tasks.c **** 	{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 104


5184:Source\bsw\FreeRTOS\src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Source\bsw\FreeRTOS\src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Source\bsw\FreeRTOS\src/tasks.c **** 		when the task leaves the Blocked state. */
5187:Source\bsw\FreeRTOS\src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5189:Source\bsw\FreeRTOS\src/tasks.c **** 	#endif
5190:Source\bsw\FreeRTOS\src/tasks.c **** 
5191:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Source\bsw\FreeRTOS\src/tasks.c **** 	as the same list item is used for both lists. */
5193:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 617              		.loc 1 5193 0
 618 000c D3F8D800 		ldr	r0, [r3, #216]
 619              	.LVL64:
 620 0010 0430     		adds	r0, r0, #4
 621 0012 FFF7FEFF 		bl	uxListRemove
 622              	.LVL65:
 623 0016 60B9     		cbnz	r0, .L53
5194:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5195:Source\bsw\FreeRTOS\src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Source\bsw\FreeRTOS\src/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Source\bsw\FreeRTOS\src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 624              		.loc 1 5197 0
 625 0018 194B     		ldr	r3, .L58
 626 001a D3F8D820 		ldr	r2, [r3, #216]
 627 001e D16A     		ldr	r1, [r2, #44]
 628 0020 0122     		movs	r2, #1
 629 0022 02FA01F1 		lsl	r1, r2, r1
 630 0026 D3F8E420 		ldr	r2, [r3, #228]
 631 002a 22EA0102 		bic	r2, r2, r1
 632 002e C3F8E420 		str	r2, [r3, #228]
 633              	.L53:
5198:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5199:Source\bsw\FreeRTOS\src/tasks.c **** 	else
5200:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5201:Source\bsw\FreeRTOS\src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Source\bsw\FreeRTOS\src/tasks.c **** 	}
5203:Source\bsw\FreeRTOS\src/tasks.c **** 
5204:Source\bsw\FreeRTOS\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Source\bsw\FreeRTOS\src/tasks.c **** 	{
5206:Source\bsw\FreeRTOS\src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 634              		.loc 1 5206 0
 635 0032 B4F1FF3F 		cmp	r4, #-1
 636 0036 07D1     		bne	.L54
 637              		.loc 1 5206 0 is_stmt 0 discriminator 1
 638 0038 36B1     		cbz	r6, .L54
5207:Source\bsw\FreeRTOS\src/tasks.c **** 		{
5208:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Source\bsw\FreeRTOS\src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Source\bsw\FreeRTOS\src/tasks.c **** 			indefinitely. */
5211:Source\bsw\FreeRTOS\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 639              		.loc 1 5211 0 is_stmt 1
 640 003a 1148     		ldr	r0, .L58
 641 003c D0F8D810 		ldr	r1, [r0, #216]
 642 0040 0431     		adds	r1, r1, #4
 643 0042 FFF7FEFF 		bl	vListInsertEnd
 644              	.LVL66:
 645 0046 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 105


 646              	.LVL67:
 647              	.L54:
5212:Source\bsw\FreeRTOS\src/tasks.c **** 		}
5213:Source\bsw\FreeRTOS\src/tasks.c **** 		else
5214:Source\bsw\FreeRTOS\src/tasks.c **** 		{
5215:Source\bsw\FreeRTOS\src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Source\bsw\FreeRTOS\src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Source\bsw\FreeRTOS\src/tasks.c **** 			kernel will manage it correctly. */
5218:Source\bsw\FreeRTOS\src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 648              		.loc 1 5218 0
 649 0048 2C44     		add	r4, r4, r5
 650              	.LVL68:
5219:Source\bsw\FreeRTOS\src/tasks.c **** 
5220:Source\bsw\FreeRTOS\src/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Source\bsw\FreeRTOS\src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 651              		.loc 1 5221 0
 652 004a 0D4B     		ldr	r3, .L58
 653 004c D3F8D830 		ldr	r3, [r3, #216]
 654 0050 5C60     		str	r4, [r3, #4]
5222:Source\bsw\FreeRTOS\src/tasks.c **** 
5223:Source\bsw\FreeRTOS\src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 655              		.loc 1 5223 0
 656 0052 A542     		cmp	r5, r4
 657 0054 08D9     		bls	.L56
5224:Source\bsw\FreeRTOS\src/tasks.c **** 			{
5225:Source\bsw\FreeRTOS\src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Source\bsw\FreeRTOS\src/tasks.c **** 				list. */
5227:Source\bsw\FreeRTOS\src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 658              		.loc 1 5227 0
 659 0056 0A4B     		ldr	r3, .L58
 660 0058 D3F8D000 		ldr	r0, [r3, #208]
 661 005c D3F8D810 		ldr	r1, [r3, #216]
 662 0060 0431     		adds	r1, r1, #4
 663 0062 FFF7FEFF 		bl	vListInsert
 664              	.LVL69:
 665 0066 70BD     		pop	{r4, r5, r6, pc}
 666              	.LVL70:
 667              	.L56:
5228:Source\bsw\FreeRTOS\src/tasks.c **** 			}
5229:Source\bsw\FreeRTOS\src/tasks.c **** 			else
5230:Source\bsw\FreeRTOS\src/tasks.c **** 			{
5231:Source\bsw\FreeRTOS\src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Source\bsw\FreeRTOS\src/tasks.c **** 				is used. */
5233:Source\bsw\FreeRTOS\src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 668              		.loc 1 5233 0
 669 0068 054D     		ldr	r5, .L58
 670              	.LVL71:
 671 006a A86A     		ldr	r0, [r5, #40]
 672 006c D5F8D810 		ldr	r1, [r5, #216]
 673 0070 0431     		adds	r1, r1, #4
 674 0072 FFF7FEFF 		bl	vListInsert
 675              	.LVL72:
5234:Source\bsw\FreeRTOS\src/tasks.c **** 
5235:Source\bsw\FreeRTOS\src/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Source\bsw\FreeRTOS\src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Source\bsw\FreeRTOS\src/tasks.c **** 				needs to be updated too. */
5238:Source\bsw\FreeRTOS\src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 106


 676              		.loc 1 5238 0
 677 0076 EB6A     		ldr	r3, [r5, #44]
 678 0078 9C42     		cmp	r4, r3
 679 007a 00D2     		bcs	.L52
5239:Source\bsw\FreeRTOS\src/tasks.c **** 				{
5240:Source\bsw\FreeRTOS\src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 680              		.loc 1 5240 0
 681 007c EC62     		str	r4, [r5, #44]
 682              	.L52:
 683 007e 70BD     		pop	{r4, r5, r6, pc}
 684              	.LVL73:
 685              	.L59:
 686              		.align	2
 687              	.L58:
 688 0080 00000000 		.word	.LANCHOR0
 689              		.cfi_endproc
 690              	.LFE121:
 691              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 692              		.section	.text.xTaskCreate,"ax",%progbits
 693              		.align	2
 694              		.global	xTaskCreate
 695              		.thumb
 696              		.thumb_func
 697              		.type	xTaskCreate, %function
 698              	xTaskCreate:
 699              	.LFB68:
 739:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxNewTCB;
 700              		.loc 1 739 0
 701              		.cfi_startproc
 702              		@ args = 8, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              	.LVL74:
 705 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 706              		.cfi_def_cfa_offset 28
 707              		.cfi_offset 4, -28
 708              		.cfi_offset 5, -24
 709              		.cfi_offset 6, -20
 710              		.cfi_offset 7, -16
 711              		.cfi_offset 8, -12
 712              		.cfi_offset 9, -8
 713              		.cfi_offset 14, -4
 714 0004 85B0     		sub	sp, sp, #20
 715              		.cfi_def_cfa_offset 48
 716 0006 0646     		mov	r6, r0
 717 0008 0F46     		mov	r7, r1
 718 000a 1546     		mov	r5, r2
 719 000c 9846     		mov	r8, r3
 720              	.LBB28:
 773:Source\bsw\FreeRTOS\src/tasks.c **** 
 721              		.loc 1 773 0
 722 000e 9000     		lsls	r0, r2, #2
 723              	.LVL75:
 724 0010 FFF7FEFF 		bl	pvPortMalloc
 725              	.LVL76:
 775:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 726              		.loc 1 775 0
 727 0014 60B1     		cbz	r0, .L64
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 107


 728 0016 8146     		mov	r9, r0
 778:Source\bsw\FreeRTOS\src/tasks.c **** 
 729              		.loc 1 778 0
 730 0018 5020     		movs	r0, #80
 731              	.LVL77:
 732 001a FFF7FEFF 		bl	pvPortMalloc
 733              	.LVL78:
 780:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 734              		.loc 1 780 0
 735 001e 0446     		mov	r4, r0
 736 0020 10B1     		cbz	r0, .L62
 783:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 737              		.loc 1 783 0
 738 0022 C0F83090 		str	r9, [r0, #48]
 739 0026 04E0     		b	.L61
 740              	.L62:
 789:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 741              		.loc 1 789 0
 742 0028 4846     		mov	r0, r9
 743              	.LVL79:
 744 002a FFF7FEFF 		bl	vPortFree
 745              	.LVL80:
 746 002e 00E0     		b	.L61
 747              	.LVL81:
 748              	.L64:
 794:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 749              		.loc 1 794 0
 750 0030 0024     		movs	r4, #0
 751              	.LVL82:
 752              	.L61:
 753              	.LBE28:
 799:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 754              		.loc 1 799 0
 755 0032 8CB1     		cbz	r4, .L65
 809:Source\bsw\FreeRTOS\src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 756              		.loc 1 809 0
 757 0034 0023     		movs	r3, #0
 758 0036 0393     		str	r3, [sp, #12]
 759 0038 0294     		str	r4, [sp, #8]
 760 003a 0D9B     		ldr	r3, [sp, #52]
 761 003c 0193     		str	r3, [sp, #4]
 762 003e 0C9B     		ldr	r3, [sp, #48]
 763 0040 0093     		str	r3, [sp]
 764 0042 4346     		mov	r3, r8
 765 0044 2A46     		mov	r2, r5
 766 0046 3946     		mov	r1, r7
 767 0048 3046     		mov	r0, r6
 768 004a FFF7FEFF 		bl	prvInitialiseNewTask
 769              	.LVL83:
 810:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdPASS;
 770              		.loc 1 810 0
 771 004e 2046     		mov	r0, r4
 772 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 773              	.LVL84:
 811:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 774              		.loc 1 811 0
 775 0054 0120     		movs	r0, #1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 108


 776 0056 01E0     		b	.L63
 777              	.LVL85:
 778              	.L65:
 815:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 779              		.loc 1 815 0
 780 0058 4FF0FF30 		mov	r0, #-1
 781              	.L63:
 782              	.LVL86:
 819:Source\bsw\FreeRTOS\src/tasks.c **** 
 783              		.loc 1 819 0
 784 005c 05B0     		add	sp, sp, #20
 785              		.cfi_def_cfa_offset 28
 786              		@ sp needed
 787 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 788              		.cfi_endproc
 789              	.LFE68:
 790              		.size	xTaskCreate, .-xTaskCreate
 791 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 792              		.align	2
 793              		.global	vTaskDelete
 794              		.thumb
 795              		.thumb_func
 796              		.type	vTaskDelete, %function
 797              	vTaskDelete:
 798              	.LFB71:
1163:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 799              		.loc 1 1163 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL87:
 804 0000 70B5     		push	{r4, r5, r6, lr}
 805              		.cfi_def_cfa_offset 16
 806              		.cfi_offset 4, -16
 807              		.cfi_offset 5, -12
 808              		.cfi_offset 6, -8
 809              		.cfi_offset 14, -4
 810 0002 0446     		mov	r4, r0
1166:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 811              		.loc 1 1166 0
 812 0004 FFF7FEFF 		bl	vPortEnterCritical
 813              	.LVL88:
1170:Source\bsw\FreeRTOS\src/tasks.c **** 
 814              		.loc 1 1170 0
 815 0008 14B9     		cbnz	r4, .L68
1170:Source\bsw\FreeRTOS\src/tasks.c **** 
 816              		.loc 1 1170 0 is_stmt 0 discriminator 1
 817 000a 2A4B     		ldr	r3, .L75
 818 000c D3F8D840 		ldr	r4, [r3, #216]
 819              	.LVL89:
 820              	.L68:
1173:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 821              		.loc 1 1173 0 is_stmt 1 discriminator 4
 822 0010 251D     		adds	r5, r4, #4
 823 0012 2846     		mov	r0, r5
 824 0014 FFF7FEFF 		bl	uxListRemove
 825              	.LVL90:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 109


 826 0018 80B9     		cbnz	r0, .L69
1175:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 827              		.loc 1 1175 0
 828 001a E26A     		ldr	r2, [r4, #44]
 829 001c 02EB8201 		add	r1, r2, r2, lsl #2
 830 0020 8B00     		lsls	r3, r1, #2
 831 0022 2449     		ldr	r1, .L75
 832 0024 0B44     		add	r3, r3, r1
 833 0026 1B6B     		ldr	r3, [r3, #48]
 834 0028 43B9     		cbnz	r3, .L69
1175:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 835              		.loc 1 1175 0 is_stmt 0 discriminator 1
 836 002a 0123     		movs	r3, #1
 837 002c 03FA02F2 		lsl	r2, r3, r2
 838 0030 D1F8E430 		ldr	r3, [r1, #228]
 839 0034 23EA0202 		bic	r2, r3, r2
 840 0038 C1F8E420 		str	r2, [r1, #228]
 841              	.L69:
1183:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 842              		.loc 1 1183 0 is_stmt 1
 843 003c A36A     		ldr	r3, [r4, #40]
 844 003e 1BB1     		cbz	r3, .L70
1185:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 845              		.loc 1 1185 0
 846 0040 04F11800 		add	r0, r4, #24
 847 0044 FFF7FEFF 		bl	uxListRemove
 848              	.LVL91:
 849              	.L70:
1196:Source\bsw\FreeRTOS\src/tasks.c **** 
 850              		.loc 1 1196 0
 851 0048 1A4B     		ldr	r3, .L75
 852 004a D3F8E020 		ldr	r2, [r3, #224]
 853 004e 0132     		adds	r2, r2, #1
 854 0050 C3F8E020 		str	r2, [r3, #224]
1198:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 855              		.loc 1 1198 0
 856 0054 D3F8D830 		ldr	r3, [r3, #216]
 857 0058 9C42     		cmp	r4, r3
 858 005a 0BD1     		bne	.L71
1205:Source\bsw\FreeRTOS\src/tasks.c **** 
 859              		.loc 1 1205 0
 860 005c 154E     		ldr	r6, .L75
 861 005e 2946     		mov	r1, r5
 862 0060 06F1BC00 		add	r0, r6, #188
 863 0064 FFF7FEFF 		bl	vListInsertEnd
 864              	.LVL92:
1210:Source\bsw\FreeRTOS\src/tasks.c **** 
 865              		.loc 1 1210 0
 866 0068 D6F8E830 		ldr	r3, [r6, #232]
 867 006c 0133     		adds	r3, r3, #1
 868 006e C6F8E830 		str	r3, [r6, #232]
 869 0072 0AE0     		b	.L72
 870              	.L71:
1225:Source\bsw\FreeRTOS\src/tasks.c **** 				traceTASK_DELETE( pxTCB );
 871              		.loc 1 1225 0
 872 0074 0F4A     		ldr	r2, .L75
 873 0076 D2F8D430 		ldr	r3, [r2, #212]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 110


 874 007a 013B     		subs	r3, r3, #1
 875 007c C2F8D430 		str	r3, [r2, #212]
1227:Source\bsw\FreeRTOS\src/tasks.c **** 
 876              		.loc 1 1227 0
 877 0080 2046     		mov	r0, r4
 878 0082 FFF7FEFF 		bl	prvDeleteTCB
 879              	.LVL93:
1231:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 880              		.loc 1 1231 0
 881 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 882              	.LVL94:
 883              	.L72:
1234:Source\bsw\FreeRTOS\src/tasks.c **** 
 884              		.loc 1 1234 0
 885 008a FFF7FEFF 		bl	vPortExitCritical
 886              	.LVL95:
1238:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 887              		.loc 1 1238 0
 888 008e 094B     		ldr	r3, .L75
 889 0090 D3F8DC30 		ldr	r3, [r3, #220]
 890 0094 63B1     		cbz	r3, .L67
1240:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 891              		.loc 1 1240 0
 892 0096 074B     		ldr	r3, .L75
 893 0098 D3F8D830 		ldr	r3, [r3, #216]
 894 009c 9C42     		cmp	r4, r3
 895 009e 07D1     		bne	.L67
1243:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 896              		.loc 1 1243 0
 897 00a0 4FF08052 		mov	r2, #268435456
 898 00a4 044B     		ldr	r3, .L75+4
 899 00a6 1A60     		str	r2, [r3]
 900              		.syntax unified
 901              	@ 1243 "Source\bsw\FreeRTOS\src\tasks.c" 1
 902 00a8 BFF34F8F 		dsb
 903              	@ 0 "" 2
 904              	@ 1243 "Source\bsw\FreeRTOS\src\tasks.c" 1
 905 00ac BFF36F8F 		isb
 906              	@ 0 "" 2
 907              		.thumb
 908              		.syntax unified
 909              	.L67:
 910 00b0 70BD     		pop	{r4, r5, r6, pc}
 911              	.LVL96:
 912              	.L76:
 913 00b2 00BF     		.align	2
 914              	.L75:
 915 00b4 00000000 		.word	.LANCHOR0
 916 00b8 04ED00E0 		.word	-536810236
 917              		.cfi_endproc
 918              	.LFE71:
 919              		.size	vTaskDelete, .-vTaskDelete
 920              		.section	.text.eTaskGetState,"ax",%progbits
 921              		.align	2
 922              		.global	eTaskGetState
 923              		.thumb
 924              		.thumb_func
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 111


 925              		.type	eTaskGetState, %function
 926              	eTaskGetState:
 927              	.LFB74:
1387:Source\bsw\FreeRTOS\src/tasks.c **** 	eTaskState eReturn;
 928              		.loc 1 1387 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              	.LVL97:
 933 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 934              		.cfi_def_cfa_offset 24
 935              		.cfi_offset 3, -24
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941              	.LVL98:
1394:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 942              		.loc 1 1394 0
 943 0002 194B     		ldr	r3, .L88
 944 0004 D3F8D830 		ldr	r3, [r3, #216]
 945 0008 9842     		cmp	r0, r3
 946 000a 1FD0     		beq	.L80
 947 000c 0446     		mov	r4, r0
1401:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 948              		.loc 1 1401 0
 949 000e FFF7FEFF 		bl	vPortEnterCritical
 950              	.LVL99:
1403:Source\bsw\FreeRTOS\src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 951              		.loc 1 1403 0
 952 0012 6569     		ldr	r5, [r4, #20]
 953              	.LVL100:
1404:Source\bsw\FreeRTOS\src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 954              		.loc 1 1404 0
 955 0014 144B     		ldr	r3, .L88
 956 0016 9E6A     		ldr	r6, [r3, #40]
 957              	.LVL101:
1405:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 958              		.loc 1 1405 0
 959 0018 D3F8D070 		ldr	r7, [r3, #208]
 960              	.LVL102:
1407:Source\bsw\FreeRTOS\src/tasks.c **** 
 961              		.loc 1 1407 0
 962 001c FFF7FEFF 		bl	vPortExitCritical
 963              	.LVL103:
1409:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 964              		.loc 1 1409 0
 965 0020 B542     		cmp	r5, r6
 966 0022 15D0     		beq	.L81
1409:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 967              		.loc 1 1409 0 is_stmt 0 discriminator 1
 968 0024 BD42     		cmp	r5, r7
 969 0026 15D0     		beq	.L82
1417:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 970              		.loc 1 1417 0 is_stmt 1
 971 0028 0F4B     		ldr	r3, .L88
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 112


 972 002a 9D42     		cmp	r5, r3
 973 002c 08D1     		bne	.L79
1422:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 974              		.loc 1 1422 0
 975 002e A36A     		ldr	r3, [r4, #40]
 976 0030 93B9     		cbnz	r3, .L83
1430:Source\bsw\FreeRTOS\src/tasks.c **** 							{
 977              		.loc 1 1430 0
 978 0032 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 979 0036 DBB2     		uxtb	r3, r3
 980 0038 012B     		cmp	r3, #1
 981 003a 0FD1     		bne	.L84
1432:Source\bsw\FreeRTOS\src/tasks.c **** 							}
 982              		.loc 1 1432 0
 983 003c 0220     		movs	r0, #2
 984 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 985              	.LVL104:
 986              	.L79:
1453:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 987              		.loc 1 1453 0
 988 0040 0A4B     		ldr	r3, .L88+4
 989 0042 9D42     		cmp	r5, r3
 990 0044 0CD0     		beq	.L85
1453:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 991              		.loc 1 1453 0 is_stmt 0 discriminator 1
 992 0046 6DB9     		cbnz	r5, .L86
1458:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 993              		.loc 1 1458 0 is_stmt 1
 994 0048 0420     		movs	r0, #4
 995 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 996              	.LVL105:
 997              	.L80:
1397:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 998              		.loc 1 1397 0
 999 004c 0020     		movs	r0, #0
 1000              	.LVL106:
 1001 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1002              	.LVL107:
 1003              	.L81:
1413:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 1004              		.loc 1 1413 0
 1005 0050 0220     		movs	r0, #2
 1006 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1007              	.LVL108:
 1008              	.L82:
 1009 0054 0220     		movs	r0, #2
 1010 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1011              	.LVL109:
 1012              	.L83:
1447:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1013              		.loc 1 1447 0
 1014 0058 0220     		movs	r0, #2
 1015 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1016              	.LVL110:
 1017              	.L84:
1436:Source\bsw\FreeRTOS\src/tasks.c **** 							}
 1018              		.loc 1 1436 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 113


 1019 005c 0320     		movs	r0, #3
 1020 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1021              	.LVL111:
 1022              	.L85:
1458:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1023              		.loc 1 1458 0
 1024 0060 0420     		movs	r0, #4
 1025 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1026              	.LVL112:
 1027              	.L86:
1466:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 1028              		.loc 1 1466 0
 1029 0064 0120     		movs	r0, #1
 1030              	.LVL113:
1471:Source\bsw\FreeRTOS\src/tasks.c **** 
 1031              		.loc 1 1471 0
 1032 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1033              	.LVL114:
 1034              	.L89:
 1035              		.align	2
 1036              	.L88:
 1037 0068 00000000 		.word	.LANCHOR0
 1038 006c BC000000 		.word	.LANCHOR0+188
 1039              		.cfi_endproc
 1040              	.LFE74:
 1041              		.size	eTaskGetState, .-eTaskGetState
 1042              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1043              		.align	2
 1044              		.global	uxTaskPriorityGet
 1045              		.thumb
 1046              		.thumb_func
 1047              		.type	uxTaskPriorityGet, %function
 1048              	uxTaskPriorityGet:
 1049              	.LFB75:
1479:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
 1050              		.loc 1 1479 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL115:
 1055 0000 10B5     		push	{r4, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0446     		mov	r4, r0
1483:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1060              		.loc 1 1483 0
 1061 0004 FFF7FEFF 		bl	vPortEnterCritical
 1062              	.LVL116:
1487:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1063              		.loc 1 1487 0
 1064 0008 14B9     		cbnz	r4, .L91
1487:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1065              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1066 000a 044B     		ldr	r3, .L94
 1067 000c D3F8D840 		ldr	r4, [r3, #216]
 1068              	.LVL117:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 114


 1069              	.L91:
1488:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 1070              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1071 0010 E46A     		ldr	r4, [r4, #44]
 1072              	.LVL118:
1490:Source\bsw\FreeRTOS\src/tasks.c **** 
 1073              		.loc 1 1490 0 discriminator 4
 1074 0012 FFF7FEFF 		bl	vPortExitCritical
 1075              	.LVL119:
1493:Source\bsw\FreeRTOS\src/tasks.c **** 
 1076              		.loc 1 1493 0 discriminator 4
 1077 0016 2046     		mov	r0, r4
 1078 0018 10BD     		pop	{r4, pc}
 1079              	.LVL120:
 1080              	.L95:
 1081 001a 00BF     		.align	2
 1082              	.L94:
 1083 001c 00000000 		.word	.LANCHOR0
 1084              		.cfi_endproc
 1085              	.LFE75:
 1086              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1087              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1088              		.align	2
 1089              		.global	uxTaskPriorityGetFromISR
 1090              		.thumb
 1091              		.thumb_func
 1092              		.type	uxTaskPriorityGetFromISR, %function
 1093              	uxTaskPriorityGetFromISR:
 1094              	.LFB76:
1501:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t const *pxTCB;
 1095              		.loc 1 1501 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100              	.LVL121:
 1101              	.LBB29:
 1102              	.LBB30:
 1103              		.file 2 ".\\Source\\bsw\\FreeRTOS\\include/portmacro.h"
   1:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*
   2:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
   5:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * subject to the following conditions:
  11:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  12:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  15:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 115


  19:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  22:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  25:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\Source\bsw\FreeRTOS\include/portmacro.h ****  */
  27:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  28:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  29:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifndef PORTMACRO_H
  30:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define PORTMACRO_H
  31:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  32:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifdef __cplusplus
  33:.\Source\bsw\FreeRTOS\include/portmacro.h **** extern "C" {
  34:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
  35:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  36:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------
  37:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * Port specific definitions.
  38:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  39:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * given hardware and compiler.
  41:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *
  42:.\Source\bsw\FreeRTOS\include/portmacro.h ****  * These settings should not be altered.
  43:.\Source\bsw\FreeRTOS\include/portmacro.h ****  *-----------------------------------------------------------
  44:.\Source\bsw\FreeRTOS\include/portmacro.h ****  */
  45:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  46:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Type definitions. */
  47:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portCHAR		char
  48:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portFLOAT		float
  49:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portDOUBLE		double
  50:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portLONG		long
  51:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portSHORT		short
  52:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portBASE_TYPE	long
  54:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  55:.\Source\bsw\FreeRTOS\include/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\Source\bsw\FreeRTOS\include/portmacro.h **** typedef long BaseType_t;
  57:.\Source\bsw\FreeRTOS\include/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  59:.\Source\bsw\FreeRTOS\include/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\Source\bsw\FreeRTOS\include/portmacro.h **** #else
  63:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  66:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
  70:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  72:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Architecture specifics. */
  73:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portBYTE_ALIGNMENT			8
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 116


  76:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  78:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Scheduler utilities. */
  79:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portYIELD() 															\
  80:.\Source\bsw\FreeRTOS\include/portmacro.h **** {																				\
  81:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\Source\bsw\FreeRTOS\include/portmacro.h **** 																				\
  84:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\Source\bsw\FreeRTOS\include/portmacro.h **** }
  89:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  90:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
  96:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Critical section management. */
  97:.\Source\bsw\FreeRTOS\include/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\Source\bsw\FreeRTOS\include/portmacro.h **** extern void vPortExitCritical( void );
  99:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 106:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 108:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\Source\bsw\FreeRTOS\include/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\Source\bsw\FreeRTOS\include/portmacro.h **** (which build with all the ports) will build. */
 111:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 115:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
 120:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 122:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* Architecture specific optimisations. */
 123:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
 126:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 127:.\Source\bsw\FreeRTOS\include/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 129:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Generic helper function. */
 130:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	{
 132:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	uint8_t ucReturn;
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 117


 133:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 134:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		return ucReturn;
 136:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	}
 137:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 138:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Check the configuration. */
 139:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#endif
 142:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 143:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 147:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 149:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 151:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 153:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 155:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifdef configASSERT
 156:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
 159:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 160:.\Source\bsw\FreeRTOS\include/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portNOP()
 162:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 163:.\Source\bsw\FreeRTOS\include/portmacro.h **** #define portINLINE	__inline
 164:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 165:.\Source\bsw\FreeRTOS\include/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\Source\bsw\FreeRTOS\include/portmacro.h **** #endif
 168:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 169:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 170:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 171:.\Source\bsw\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:.\Source\bsw\FreeRTOS\include/portmacro.h **** {
 173:.\Source\bsw\FreeRTOS\include/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:.\Source\bsw\FreeRTOS\include/portmacro.h **** BaseType_t xReturn;
 175:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 176:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 179:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	{
 181:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		xReturn = pdFALSE;
 182:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	}
 183:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	else
 184:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	{
 185:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		xReturn = pdTRUE;
 186:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	}
 187:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 188:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	return xReturn;
 189:.\Source\bsw\FreeRTOS\include/portmacro.h **** }
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 118


 190:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 191:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 192:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 193:.\Source\bsw\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:.\Source\bsw\FreeRTOS\include/portmacro.h **** {
 195:.\Source\bsw\FreeRTOS\include/portmacro.h **** uint32_t ulNewBASEPRI;
 196:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 197:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile
 198:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 199:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	mov %0, %1												\n" \
 200:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 202:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 203:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	);
 205:.\Source\bsw\FreeRTOS\include/portmacro.h **** }
 206:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 207:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 208:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 209:.\Source\bsw\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:.\Source\bsw\FreeRTOS\include/portmacro.h **** {
 211:.\Source\bsw\FreeRTOS\include/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 213:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile
 1104              		.loc 2 213 0
 1105              		.syntax unified
 1106              	@ 213 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1107 0000 EFF31183 			mrs r3, basepri											
 1108 0004 4FF0A002 		mov r2, #160												
 1109 0008 82F31188 		msr basepri, r2											
 1110 000c BFF36F8F 		isb														
 1111 0010 BFF34F8F 		dsb														
 1112              	
 1113              	@ 0 "" 2
 1114              		.thumb
 1115              		.syntax unified
 1116              	.LBE30:
 1117              	.LBE29:
1527:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1118              		.loc 1 1527 0
 1119 0014 10B9     		cbnz	r0, .L97
1527:Source\bsw\FreeRTOS\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1120              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1121 0016 034A     		ldr	r2, .L99
 1122 0018 D2F8D800 		ldr	r0, [r2, #216]
 1123              	.LVL122:
 1124              	.L97:
1528:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 1125              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1126 001c C06A     		ldr	r0, [r0, #44]
 1127              	.LVL123:
 1128              	.LBB31:
 1129              	.LBB32:
 214:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 215:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	mov %1, %2												\n" \
 217:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	msr basepri, %1											\n" \
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 119


 218:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	isb														\n" \
 219:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		"	dsb														\n" \
 220:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	);
 222:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 223:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	warnings. */
 225:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	return ulOriginalBASEPRI;
 226:.\Source\bsw\FreeRTOS\include/portmacro.h **** }
 227:.\Source\bsw\FreeRTOS\include/portmacro.h **** /*-----------------------------------------------------------*/
 228:.\Source\bsw\FreeRTOS\include/portmacro.h **** 
 229:.\Source\bsw\FreeRTOS\include/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:.\Source\bsw\FreeRTOS\include/portmacro.h **** {
 231:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	__asm volatile
 1130              		.loc 2 231 0 discriminator 4
 1131              		.syntax unified
 1132              	@ 231 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1133 001e 83F31188 			msr basepri, r3	
 1134              	@ 0 "" 2
 1135              	.LVL124:
 1136              		.thumb
 1137              		.syntax unified
 1138              	.LBE32:
 1139              	.LBE31:
1533:Source\bsw\FreeRTOS\src/tasks.c **** 
 1140              		.loc 1 1533 0 discriminator 4
 1141 0022 7047     		bx	lr
 1142              	.L100:
 1143              		.align	2
 1144              	.L99:
 1145 0024 00000000 		.word	.LANCHOR0
 1146              		.cfi_endproc
 1147              	.LFE76:
 1148              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1149              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1150              		.align	2
 1151              		.global	vTaskPrioritySet
 1152              		.thumb
 1153              		.thumb_func
 1154              		.type	vTaskPrioritySet, %function
 1155              	vTaskPrioritySet:
 1156              	.LFB77:
1541:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 1157              		.loc 1 1541 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161              	.LVL125:
 1162 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1163              		.cfi_def_cfa_offset 24
 1164              		.cfi_offset 3, -24
 1165              		.cfi_offset 4, -20
 1166              		.cfi_offset 5, -16
 1167              		.cfi_offset 6, -12
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
 1170 0002 0446     		mov	r4, r0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 120


 1171 0004 0D46     		mov	r5, r1
 1172              	.LVL126:
1549:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1173              		.loc 1 1549 0
 1174 0006 0429     		cmp	r1, #4
 1175 0008 00D9     		bls	.L102
1551:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 1176              		.loc 1 1551 0
 1177 000a 0425     		movs	r5, #4
 1178              	.L102:
 1179              	.LVL127:
1558:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1180              		.loc 1 1558 0
 1181 000c FFF7FEFF 		bl	vPortEnterCritical
 1182              	.LVL128:
1562:Source\bsw\FreeRTOS\src/tasks.c **** 
 1183              		.loc 1 1562 0
 1184 0010 14B9     		cbnz	r4, .L103
1562:Source\bsw\FreeRTOS\src/tasks.c **** 
 1185              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1186 0012 304B     		ldr	r3, .L116
 1187 0014 D3F8D840 		ldr	r4, [r3, #216]
 1188              	.LVL129:
 1189              	.L103:
1568:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 1190              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1191 0018 236C     		ldr	r3, [r4, #64]
 1192              	.LVL130:
1576:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 1193              		.loc 1 1576 0 discriminator 4
 1194 001a 9D42     		cmp	r5, r3
 1195 001c 56D0     		beq	.L104
1580:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1196              		.loc 1 1580 0
 1197 001e 0CD9     		bls	.L105
1582:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1198              		.loc 1 1582 0
 1199 0020 2C4A     		ldr	r2, .L116
 1200 0022 D2F8D820 		ldr	r2, [r2, #216]
 1201 0026 9442     		cmp	r4, r2
 1202 0028 0ED0     		beq	.L112
1587:Source\bsw\FreeRTOS\src/tasks.c **** 						{
 1203              		.loc 1 1587 0
 1204 002a 2A4A     		ldr	r2, .L116
 1205 002c D2F8D820 		ldr	r2, [r2, #216]
 1206 0030 D26A     		ldr	r2, [r2, #44]
 1207 0032 9542     		cmp	r5, r2
 1208 0034 0AD2     		bcs	.L113
1544:Source\bsw\FreeRTOS\src/tasks.c **** 
 1209              		.loc 1 1544 0
 1210 0036 0027     		movs	r7, #0
 1211 0038 0BE0     		b	.L106
 1212              	.L105:
1603:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1213              		.loc 1 1603 0
 1214 003a 264A     		ldr	r2, .L116
 1215 003c D2F8D820 		ldr	r2, [r2, #216]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 121


 1216 0040 9442     		cmp	r4, r2
 1217 0042 05D0     		beq	.L114
1544:Source\bsw\FreeRTOS\src/tasks.c **** 
 1218              		.loc 1 1544 0
 1219 0044 0027     		movs	r7, #0
 1220 0046 04E0     		b	.L106
 1221              	.L112:
 1222 0048 0027     		movs	r7, #0
 1223 004a 02E0     		b	.L106
 1224              	.L113:
1589:Source\bsw\FreeRTOS\src/tasks.c **** 						}
 1225              		.loc 1 1589 0
 1226 004c 0127     		movs	r7, #1
 1227 004e 00E0     		b	.L106
 1228              	.L114:
1608:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1229              		.loc 1 1608 0
 1230 0050 0127     		movs	r7, #1
 1231              	.L106:
 1232              	.LVL131:
1620:Source\bsw\FreeRTOS\src/tasks.c **** 
 1233              		.loc 1 1620 0
 1234 0052 E66A     		ldr	r6, [r4, #44]
 1235              	.LVL132:
1626:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1236              		.loc 1 1626 0
 1237 0054 B342     		cmp	r3, r6
 1238 0056 00D1     		bne	.L107
1628:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1239              		.loc 1 1628 0
 1240 0058 E562     		str	r5, [r4, #44]
 1241              	.L107:
1636:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1242              		.loc 1 1636 0
 1243 005a 2564     		str	r5, [r4, #64]
1646:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1244              		.loc 1 1646 0
 1245 005c A369     		ldr	r3, [r4, #24]
 1246              	.LVL133:
 1247 005e 002B     		cmp	r3, #0
 1248 0060 02DB     		blt	.L108
1648:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1249              		.loc 1 1648 0
 1250 0062 C5F10505 		rsb	r5, r5, #5
 1251              	.LVL134:
 1252 0066 A561     		str	r5, [r4, #24]
 1253              	.L108:
1659:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1254              		.loc 1 1659 0
 1255 0068 6169     		ldr	r1, [r4, #20]
 1256 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1257 006e 9300     		lsls	r3, r2, #2
 1258 0070 194A     		ldr	r2, .L116+4
 1259 0072 1344     		add	r3, r3, r2
 1260 0074 9942     		cmp	r1, r3
 1261 0076 20D1     		bne	.L109
1664:Source\bsw\FreeRTOS\src/tasks.c **** 					{
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 122


 1262              		.loc 1 1664 0
 1263 0078 251D     		adds	r5, r4, #4
 1264 007a 2846     		mov	r0, r5
 1265 007c FFF7FEFF 		bl	uxListRemove
 1266              	.LVL135:
 1267 0080 48B9     		cbnz	r0, .L110
1669:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1268              		.loc 1 1669 0
 1269 0082 0123     		movs	r3, #1
 1270 0084 03FA06F6 		lsl	r6, r3, r6
 1271              	.LVL136:
 1272 0088 124A     		ldr	r2, .L116
 1273 008a D2F8E430 		ldr	r3, [r2, #228]
 1274 008e 23EA0606 		bic	r6, r3, r6
 1275 0092 C2F8E460 		str	r6, [r2, #228]
 1276              	.L110:
1675:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1277              		.loc 1 1675 0
 1278 0096 E36A     		ldr	r3, [r4, #44]
 1279 0098 0122     		movs	r2, #1
 1280 009a 02FA03F1 		lsl	r1, r2, r3
 1281 009e 0D48     		ldr	r0, .L116
 1282 00a0 D0F8E420 		ldr	r2, [r0, #228]
 1283 00a4 0A43     		orrs	r2, r2, r1
 1284 00a6 C0F8E420 		str	r2, [r0, #228]
 1285 00aa 3030     		adds	r0, r0, #48
 1286 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 1287 00b0 9A00     		lsls	r2, r3, #2
 1288 00b2 2946     		mov	r1, r5
 1289 00b4 1044     		add	r0, r0, r2
 1290 00b6 FFF7FEFF 		bl	vListInsertEnd
 1291              	.LVL137:
 1292              	.L109:
1682:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1293              		.loc 1 1682 0
 1294 00ba 3FB1     		cbz	r7, .L104
1684:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1295              		.loc 1 1684 0
 1296 00bc 4FF08052 		mov	r2, #268435456
 1297 00c0 064B     		ldr	r3, .L116+8
 1298 00c2 1A60     		str	r2, [r3]
 1299              		.syntax unified
 1300              	@ 1684 "Source\bsw\FreeRTOS\src\tasks.c" 1
 1301 00c4 BFF34F8F 		dsb
 1302              	@ 0 "" 2
 1303              	@ 1684 "Source\bsw\FreeRTOS\src\tasks.c" 1
 1304 00c8 BFF36F8F 		isb
 1305              	@ 0 "" 2
 1306              	.LVL138:
 1307              		.thumb
 1308              		.syntax unified
 1309              	.L104:
1696:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 1310              		.loc 1 1696 0
 1311 00cc FFF7FEFF 		bl	vPortExitCritical
 1312              	.LVL139:
 1313 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 123


 1314              	.LVL140:
 1315              	.L117:
 1316 00d2 00BF     		.align	2
 1317              	.L116:
 1318 00d4 00000000 		.word	.LANCHOR0
 1319 00d8 30000000 		.word	.LANCHOR0+48
 1320 00dc 04ED00E0 		.word	-536810236
 1321              		.cfi_endproc
 1322              	.LFE77:
 1323              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1324              		.section	.text.vTaskResume,"ax",%progbits
 1325              		.align	2
 1326              		.global	vTaskResume
 1327              		.thumb
 1328              		.thumb_func
 1329              		.type	vTaskResume, %function
 1330              	vTaskResume:
 1331              	.LFB80:
1852:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1332              		.loc 1 1852 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL141:
1860:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1337              		.loc 1 1860 0
 1338 0000 1B4B     		ldr	r3, .L123
 1339 0002 D3F8D830 		ldr	r3, [r3, #216]
 1340 0006 9842     		cmp	r0, r3
 1341 0008 30D0     		beq	.L122
1860:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1342              		.loc 1 1860 0 is_stmt 0 discriminator 1
 1343 000a 78B3     		cbz	r0, .L122
1852:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1344              		.loc 1 1852 0 is_stmt 1
 1345 000c 70B5     		push	{r4, r5, r6, lr}
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 4, -16
 1348              		.cfi_offset 5, -12
 1349              		.cfi_offset 6, -8
 1350              		.cfi_offset 14, -4
 1351 000e 0446     		mov	r4, r0
1862:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 1352              		.loc 1 1862 0
 1353 0010 FFF7FEFF 		bl	vPortEnterCritical
 1354              	.LVL142:
1864:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1355              		.loc 1 1864 0
 1356 0014 2046     		mov	r0, r4
 1357 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1358              	.LVL143:
 1359 001a 20B3     		cbz	r0, .L120
1870:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1360              		.loc 1 1870 0
 1361 001c 261D     		adds	r6, r4, #4
 1362 001e 3046     		mov	r0, r6
 1363 0020 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 124


 1364              	.LVL144:
1871:Source\bsw\FreeRTOS\src/tasks.c **** 
 1365              		.loc 1 1871 0
 1366 0024 E36A     		ldr	r3, [r4, #44]
 1367 0026 0122     		movs	r2, #1
 1368 0028 02FA03F1 		lsl	r1, r2, r3
 1369 002c 104D     		ldr	r5, .L123
 1370 002e D5F8E420 		ldr	r2, [r5, #228]
 1371 0032 0A43     		orrs	r2, r2, r1
 1372 0034 C5F8E420 		str	r2, [r5, #228]
 1373 0038 05F13000 		add	r0, r5, #48
 1374 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1375 0040 9A00     		lsls	r2, r3, #2
 1376 0042 3146     		mov	r1, r6
 1377 0044 1044     		add	r0, r0, r2
 1378 0046 FFF7FEFF 		bl	vListInsertEnd
 1379              	.LVL145:
1874:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1380              		.loc 1 1874 0
 1381 004a E26A     		ldr	r2, [r4, #44]
 1382 004c D5F8D830 		ldr	r3, [r5, #216]
 1383 0050 DB6A     		ldr	r3, [r3, #44]
 1384 0052 9A42     		cmp	r2, r3
 1385 0054 07D3     		bcc	.L120
1879:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1386              		.loc 1 1879 0
 1387 0056 4FF08052 		mov	r2, #268435456
 1388 005a 064B     		ldr	r3, .L123+4
 1389 005c 1A60     		str	r2, [r3]
 1390              		.syntax unified
 1391              	@ 1879 "Source\bsw\FreeRTOS\src\tasks.c" 1
 1392 005e BFF34F8F 		dsb
 1393              	@ 0 "" 2
 1394              	@ 1879 "Source\bsw\FreeRTOS\src\tasks.c" 1
 1395 0062 BFF36F8F 		isb
 1396              	@ 0 "" 2
 1397              		.thumb
 1398              		.syntax unified
 1399              	.L120:
1891:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 1400              		.loc 1 1891 0
 1401 0066 FFF7FEFF 		bl	vPortExitCritical
 1402              	.LVL146:
 1403 006a 70BD     		pop	{r4, r5, r6, pc}
 1404              	.LVL147:
 1405              	.L122:
 1406              		.cfi_def_cfa_offset 0
 1407              		.cfi_restore 4
 1408              		.cfi_restore 5
 1409              		.cfi_restore 6
 1410              		.cfi_restore 14
 1411 006c 7047     		bx	lr
 1412              	.L124:
 1413 006e 00BF     		.align	2
 1414              	.L123:
 1415 0070 00000000 		.word	.LANCHOR0
 1416 0074 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 125


 1417              		.cfi_endproc
 1418              	.LFE80:
 1419              		.size	vTaskResume, .-vTaskResume
 1420              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1421              		.align	2
 1422              		.global	xTaskResumeFromISR
 1423              		.thumb
 1424              		.thumb_func
 1425              		.type	xTaskResumeFromISR, %function
 1426              	xTaskResumeFromISR:
 1427              	.LFB81:
1906:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1428              		.loc 1 1906 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL148:
 1433 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1434              		.cfi_def_cfa_offset 24
 1435              		.cfi_offset 3, -24
 1436              		.cfi_offset 4, -20
 1437              		.cfi_offset 5, -16
 1438              		.cfi_offset 6, -12
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 0446     		mov	r4, r0
 1442              	.LVL149:
 1443              	.LBB33:
 1444              	.LBB34:
 213:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 1445              		.loc 2 213 0
 1446              		.syntax unified
 1447              	@ 213 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1448 0004 EFF31185 			mrs r5, basepri											
 1449 0008 4FF0A003 		mov r3, #160												
 1450 000c 83F31188 		msr basepri, r3											
 1451 0010 BFF36F8F 		isb														
 1452 0014 BFF34F8F 		dsb														
 1453              	
 1454              	@ 0 "" 2
 1455              		.thumb
 1456              		.syntax unified
 1457              	.LBE34:
 1458              	.LBE33:
1933:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 1459              		.loc 1 1933 0
 1460 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1461              	.LVL150:
 1462 001c 58B3     		cbz	r0, .L129
1938:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1463              		.loc 1 1938 0
 1464 001e 184B     		ldr	r3, .L132
 1465 0020 D3F8F030 		ldr	r3, [r3, #240]
 1466 0024 03BB     		cbnz	r3, .L127
1942:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1467              		.loc 1 1942 0
 1468 0026 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 126


 1469 0028 154B     		ldr	r3, .L132
 1470 002a D3F8D830 		ldr	r3, [r3, #216]
 1471 002e DB6A     		ldr	r3, [r3, #44]
 1472 0030 9A42     		cmp	r2, r3
 1473 0032 01D2     		bcs	.L130
1907:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1474              		.loc 1 1907 0
 1475 0034 0026     		movs	r6, #0
 1476 0036 00E0     		b	.L128
 1477              	.L130:
1944:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1478              		.loc 1 1944 0
 1479 0038 0126     		movs	r6, #1
 1480              	.L128:
 1481              	.LVL151:
1951:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1482              		.loc 1 1951 0
 1483 003a 271D     		adds	r7, r4, #4
 1484 003c 3846     		mov	r0, r7
 1485 003e FFF7FEFF 		bl	uxListRemove
 1486              	.LVL152:
1952:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1487              		.loc 1 1952 0
 1488 0042 E36A     		ldr	r3, [r4, #44]
 1489 0044 0122     		movs	r2, #1
 1490 0046 02FA03F1 		lsl	r1, r2, r3
 1491 004a 0D48     		ldr	r0, .L132
 1492 004c D0F8E420 		ldr	r2, [r0, #228]
 1493 0050 0A43     		orrs	r2, r2, r1
 1494 0052 C0F8E420 		str	r2, [r0, #228]
 1495 0056 3030     		adds	r0, r0, #48
 1496 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1497 005c 9A00     		lsls	r2, r3, #2
 1498 005e 3946     		mov	r1, r7
 1499 0060 1044     		add	r0, r0, r2
 1500 0062 FFF7FEFF 		bl	vListInsertEnd
 1501              	.LVL153:
 1502 0066 07E0     		b	.L126
 1503              	.LVL154:
 1504              	.L127:
1959:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1505              		.loc 1 1959 0
 1506 0068 04F11801 		add	r1, r4, #24
 1507 006c 0548     		ldr	r0, .L132+4
 1508 006e FFF7FEFF 		bl	vListInsertEnd
 1509              	.LVL155:
1907:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1510              		.loc 1 1907 0
 1511 0072 0026     		movs	r6, #0
 1512 0074 00E0     		b	.L126
 1513              	.L129:
 1514 0076 0026     		movs	r6, #0
 1515              	.LVL156:
 1516              	.L126:
 1517              	.LBB35:
 1518              	.LBB36:
 1519              		.loc 2 231 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 127


 1520              		.syntax unified
 1521              	@ 231 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1522 0078 85F31188 			msr basepri, r5	
 1523              	@ 0 "" 2
 1524              	.LVL157:
 1525              		.thumb
 1526              		.syntax unified
 1527              	.LBE36:
 1528              	.LBE35:
1970:Source\bsw\FreeRTOS\src/tasks.c **** 
 1529              		.loc 1 1970 0
 1530 007c 3046     		mov	r0, r6
 1531 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1532              	.LVL158:
 1533              	.L133:
 1534              		.align	2
 1535              	.L132:
 1536 0080 00000000 		.word	.LANCHOR0
 1537 0084 14000000 		.word	.LANCHOR0+20
 1538              		.cfi_endproc
 1539              	.LFE81:
 1540              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1541              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1542              		.align	2
 1543              		.global	vTaskStartScheduler
 1544              		.thumb
 1545              		.thumb_func
 1546              		.type	vTaskStartScheduler, %function
 1547              	vTaskStartScheduler:
 1548              	.LFB82:
1976:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xReturn;
 1549              		.loc 1 1976 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553 0000 00B5     		push	{lr}
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 14, -4
 1556 0002 83B0     		sub	sp, sp, #12
 1557              		.cfi_def_cfa_offset 16
2009:Source\bsw\FreeRTOS\src/tasks.c **** 								configIDLE_TASK_NAME,
 1558              		.loc 1 2009 0
 1559 0004 104B     		ldr	r3, .L137
 1560 0006 0193     		str	r3, [sp, #4]
 1561 0008 0023     		movs	r3, #0
 1562 000a 0093     		str	r3, [sp]
 1563 000c 6422     		movs	r2, #100
 1564 000e 0F49     		ldr	r1, .L137+4
 1565 0010 0F48     		ldr	r0, .L137+8
 1566 0012 FFF7FEFF 		bl	xTaskCreate
 1567              	.LVL159:
2031:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 1568              		.loc 1 2031 0
 1569 0016 0128     		cmp	r0, #1
 1570 0018 13D1     		bne	.L134
 1571              	.LBB37:
 1572              	.LBB38:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 128


 197:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 1573              		.loc 2 197 0
 1574              		.syntax unified
 1575              	@ 197 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1576 001a 4FF0A003 			mov r3, #160												
 1577 001e 83F31188 		msr basepri, r3											
 1578 0022 BFF36F8F 		isb														
 1579 0026 BFF34F8F 		dsb														
 1580              	
 1581              	@ 0 "" 2
 1582              		.thumb
 1583              		.syntax unified
 1584              	.LBE38:
 1585              	.LBE37:
2059:Source\bsw\FreeRTOS\src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1586              		.loc 1 2059 0
 1587 002a 0A4B     		ldr	r3, .L137+12
 1588 002c 4FF0FF32 		mov	r2, #-1
 1589 0030 DA62     		str	r2, [r3, #44]
2060:Source\bsw\FreeRTOS\src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1590              		.loc 1 2060 0
 1591 0032 0122     		movs	r2, #1
 1592 0034 C3F8DC20 		str	r2, [r3, #220]
2061:Source\bsw\FreeRTOS\src/tasks.c **** 
 1593              		.loc 1 2061 0
 1594 0038 0022     		movs	r2, #0
 1595 003a C3F8EC20 		str	r2, [r3, #236]
2075:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1596              		.loc 1 2075 0
 1597 003e FFF7FEFF 		bl	xPortStartScheduler
 1598              	.LVL160:
 1599              	.L134:
2096:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1600              		.loc 1 2096 0
 1601 0042 03B0     		add	sp, sp, #12
 1602              		.cfi_def_cfa_offset 4
 1603              		@ sp needed
 1604 0044 5DF804FB 		ldr	pc, [sp], #4
 1605              	.L138:
 1606              		.align	2
 1607              	.L137:
 1608 0048 F4000000 		.word	.LANCHOR0+244
 1609 004c 00000000 		.word	.LC0
 1610 0050 00000000 		.word	prvIdleTask
 1611 0054 00000000 		.word	.LANCHOR0
 1612              		.cfi_endproc
 1613              	.LFE82:
 1614              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1615              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1616              		.align	2
 1617              		.global	vTaskEndScheduler
 1618              		.thumb
 1619              		.thumb_func
 1620              		.type	vTaskEndScheduler, %function
 1621              	vTaskEndScheduler:
 1622              	.LFB83:
2100:Source\bsw\FreeRTOS\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 129


 1623              		.loc 1 2100 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627 0000 08B5     		push	{r3, lr}
 1628              		.cfi_def_cfa_offset 8
 1629              		.cfi_offset 3, -8
 1630              		.cfi_offset 14, -4
 1631              	.LBB39:
 1632              	.LBB40:
 197:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 1633              		.loc 2 197 0
 1634              		.syntax unified
 1635              	@ 197 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 1636 0002 4FF0A003 			mov r3, #160												
 1637 0006 83F31188 		msr basepri, r3											
 1638 000a BFF36F8F 		isb														
 1639 000e BFF34F8F 		dsb														
 1640              	
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              		.syntax unified
 1644              	.LBE40:
 1645              	.LBE39:
2105:Source\bsw\FreeRTOS\src/tasks.c **** 	vPortEndScheduler();
 1646              		.loc 1 2105 0
 1647 0012 0022     		movs	r2, #0
 1648 0014 024B     		ldr	r3, .L141
 1649 0016 C3F8DC20 		str	r2, [r3, #220]
2106:Source\bsw\FreeRTOS\src/tasks.c **** }
 1650              		.loc 1 2106 0
 1651 001a FFF7FEFF 		bl	vPortEndScheduler
 1652              	.LVL161:
 1653 001e 08BD     		pop	{r3, pc}
 1654              	.L142:
 1655              		.align	2
 1656              	.L141:
 1657 0020 00000000 		.word	.LANCHOR0
 1658              		.cfi_endproc
 1659              	.LFE83:
 1660              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1661              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1662              		.align	2
 1663              		.global	vTaskSuspendAll
 1664              		.thumb
 1665              		.thumb_func
 1666              		.type	vTaskSuspendAll, %function
 1667              	vTaskSuspendAll:
 1668              	.LFB84:
2111:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A critical section is not required as the variable is of type
 1669              		.loc 1 2111 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
2123:Source\bsw\FreeRTOS\src/tasks.c **** 
 1674              		.loc 1 2123 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 130


 1675 0000 034A     		ldr	r2, .L144
 1676 0002 D2F8F030 		ldr	r3, [r2, #240]
 1677 0006 0133     		adds	r3, r3, #1
 1678 0008 C2F8F030 		str	r3, [r2, #240]
2127:Source\bsw\FreeRTOS\src/tasks.c **** }
 1679              		.loc 1 2127 0
 1680 000c 7047     		bx	lr
 1681              	.L145:
 1682 000e 00BF     		.align	2
 1683              	.L144:
 1684 0010 00000000 		.word	.LANCHOR0
 1685              		.cfi_endproc
 1686              	.LFE84:
 1687              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1688              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1689              		.align	2
 1690              		.global	xTaskGetTickCount
 1691              		.thumb
 1692              		.thumb_func
 1693              		.type	xTaskGetTickCount, %function
 1694              	xTaskGetTickCount:
 1695              	.LFB86:
2305:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xTicks;
 1696              		.loc 1 2305 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
2311:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 1701              		.loc 1 2311 0
 1702 0000 014B     		ldr	r3, .L147
 1703 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1704              	.LVL162:
2316:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1705              		.loc 1 2316 0
 1706 0006 7047     		bx	lr
 1707              	.L148:
 1708              		.align	2
 1709              	.L147:
 1710 0008 00000000 		.word	.LANCHOR0
 1711              		.cfi_endproc
 1712              	.LFE86:
 1713              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1714              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1715              		.align	2
 1716              		.global	xTaskGetTickCountFromISR
 1717              		.thumb
 1718              		.thumb_func
 1719              		.type	xTaskGetTickCountFromISR, %function
 1720              	xTaskGetTickCountFromISR:
 1721              	.LFB87:
2320:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t xReturn;
 1722              		.loc 1 2320 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 0
 1725              		@ frame_needed = 0, uses_anonymous_args = 0
 1726              		@ link register save eliminated.
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 131


 1727              	.LVL163:
2342:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 1728              		.loc 1 2342 0
 1729 0000 014B     		ldr	r3, .L150
 1730 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1731              	.LVL164:
2347:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1732              		.loc 1 2347 0
 1733 0006 7047     		bx	lr
 1734              	.L151:
 1735              		.align	2
 1736              	.L150:
 1737 0008 00000000 		.word	.LANCHOR0
 1738              		.cfi_endproc
 1739              	.LFE87:
 1740              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1741              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1742              		.align	2
 1743              		.global	uxTaskGetNumberOfTasks
 1744              		.thumb
 1745              		.thumb_func
 1746              		.type	uxTaskGetNumberOfTasks, %function
 1747              	uxTaskGetNumberOfTasks:
 1748              	.LFB88:
2351:Source\bsw\FreeRTOS\src/tasks.c **** 	/* A critical section is not required because the variables are of type
 1749              		.loc 1 2351 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
2354:Source\bsw\FreeRTOS\src/tasks.c **** }
 1754              		.loc 1 2354 0
 1755 0000 014B     		ldr	r3, .L153
 1756 0002 D3F8D400 		ldr	r0, [r3, #212]
2355:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1757              		.loc 1 2355 0
 1758 0006 7047     		bx	lr
 1759              	.L154:
 1760              		.align	2
 1761              	.L153:
 1762 0008 00000000 		.word	.LANCHOR0
 1763              		.cfi_endproc
 1764              	.LFE88:
 1765              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1766              		.section	.text.pcTaskGetName,"ax",%progbits
 1767              		.align	2
 1768              		.global	pcTaskGetName
 1769              		.thumb
 1770              		.thumb_func
 1771              		.type	pcTaskGetName, %function
 1772              	pcTaskGetName:
 1773              	.LFB89:
2359:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxTCB;
 1774              		.loc 1 2359 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 132


 1778              		@ link register save eliminated.
 1779              	.LVL165:
2364:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
 1780              		.loc 1 2364 0
 1781 0000 0346     		mov	r3, r0
 1782 0002 10B9     		cbnz	r0, .L156
2364:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTCB );
 1783              		.loc 1 2364 0 is_stmt 0 discriminator 1
 1784 0004 024B     		ldr	r3, .L157
 1785 0006 D3F8D830 		ldr	r3, [r3, #216]
 1786              	.LVL166:
 1787              	.L156:
2367:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1788              		.loc 1 2367 0 is_stmt 1 discriminator 4
 1789 000a 03F13400 		add	r0, r3, #52
 1790 000e 7047     		bx	lr
 1791              	.L158:
 1792              		.align	2
 1793              	.L157:
 1794 0010 00000000 		.word	.LANCHOR0
 1795              		.cfi_endproc
 1796              	.LFE89:
 1797              		.size	pcTaskGetName, .-pcTaskGetName
 1798              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1799              		.align	2
 1800              		.global	xTaskIncrementTick
 1801              		.thumb
 1802              		.thumb_func
 1803              		.type	xTaskIncrementTick, %function
 1804              	xTaskIncrementTick:
 1805              	.LFB91:
2708:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t * pxTCB;
 1806              		.loc 1 2708 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 1810 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1811              		.cfi_def_cfa_offset 24
 1812              		.cfi_offset 4, -24
 1813              		.cfi_offset 5, -20
 1814              		.cfi_offset 6, -16
 1815              		.cfi_offset 7, -12
 1816              		.cfi_offset 8, -8
 1817              		.cfi_offset 14, -4
 1818              	.LVL167:
2717:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 1819              		.loc 1 2717 0
 1820 0004 3D4B     		ldr	r3, .L176
 1821 0006 D3F8F030 		ldr	r3, [r3, #240]
 1822 000a 002B     		cmp	r3, #0
 1823 000c 68D1     		bne	.L160
 1824              	.LBB41:
2721:Source\bsw\FreeRTOS\src/tasks.c **** 
 1825              		.loc 1 2721 0
 1826 000e 3B4B     		ldr	r3, .L176
 1827 0010 D3F8EC70 		ldr	r7, [r3, #236]
 1828 0014 0137     		adds	r7, r7, #1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 133


 1829              	.LVL168:
2725:Source\bsw\FreeRTOS\src/tasks.c **** 
 1830              		.loc 1 2725 0
 1831 0016 C3F8EC70 		str	r7, [r3, #236]
2727:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1832              		.loc 1 2727 0
 1833 001a 67B9     		cbnz	r7, .L161
 1834              	.LBB42:
2729:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 1835              		.loc 1 2729 0
 1836 001c 9A6A     		ldr	r2, [r3, #40]
 1837              	.LVL169:
 1838 001e D3F8D010 		ldr	r1, [r3, #208]
 1839 0022 9962     		str	r1, [r3, #40]
 1840 0024 C3F8D020 		str	r2, [r3, #208]
 1841 0028 D3F8F820 		ldr	r2, [r3, #248]
 1842              	.LVL170:
 1843 002c 0132     		adds	r2, r2, #1
 1844 002e C3F8F820 		str	r2, [r3, #248]
 1845              	.LVL171:
 1846 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1847              	.LVL172:
 1848              	.L161:
 1849              	.LBE42:
2740:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 1850              		.loc 1 2740 0
 1851 0036 314B     		ldr	r3, .L176
 1852 0038 DB6A     		ldr	r3, [r3, #44]
 1853 003a 9F42     		cmp	r7, r3
 1854 003c 05D2     		bcs	.L171
 1855              	.LBE41:
2711:Source\bsw\FreeRTOS\src/tasks.c **** 
 1856              		.loc 1 2711 0
 1857 003e 4FF00008 		mov	r8, #0
 1858 0042 3BE0     		b	.L163
 1859              	.LVL173:
 1860              	.L172:
 1861              	.LBB43:
2806:Source\bsw\FreeRTOS\src/tasks.c **** 						}
 1862              		.loc 1 2806 0
 1863 0044 4FF00108 		mov	r8, #1
 1864              	.LVL174:
 1865 0048 01E0     		b	.L162
 1866              	.LVL175:
 1867              	.L171:
 1868 004a 4FF00008 		mov	r8, #0
 1869              	.LVL176:
 1870              	.L162:
2744:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 1871              		.loc 1 2744 0
 1872 004e 2B4B     		ldr	r3, .L176
 1873 0050 9B6A     		ldr	r3, [r3, #40]
 1874 0052 1B68     		ldr	r3, [r3]
 1875 0054 23B9     		cbnz	r3, .L164
2751:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 1876              		.loc 1 2751 0
 1877 0056 4FF0FF32 		mov	r2, #-1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 134


 1878 005a 284B     		ldr	r3, .L176
 1879 005c DA62     		str	r2, [r3, #44]
2752:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 1880              		.loc 1 2752 0
 1881 005e 2DE0     		b	.L163
 1882              	.L164:
2760:Source\bsw\FreeRTOS\src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1883              		.loc 1 2760 0
 1884 0060 264B     		ldr	r3, .L176
 1885 0062 9B6A     		ldr	r3, [r3, #40]
 1886 0064 DB68     		ldr	r3, [r3, #12]
 1887 0066 DC68     		ldr	r4, [r3, #12]
 1888              	.LVL177:
2761:Source\bsw\FreeRTOS\src/tasks.c **** 
 1889              		.loc 1 2761 0
 1890 0068 6368     		ldr	r3, [r4, #4]
 1891              	.LVL178:
2763:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1892              		.loc 1 2763 0
 1893 006a 9F42     		cmp	r7, r3
 1894 006c 02D2     		bcs	.L165
2770:Source\bsw\FreeRTOS\src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1895              		.loc 1 2770 0
 1896 006e 234A     		ldr	r2, .L176
 1897 0070 D362     		str	r3, [r2, #44]
2771:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1898              		.loc 1 2771 0
 1899 0072 23E0     		b	.L163
 1900              	.L165:
2779:Source\bsw\FreeRTOS\src/tasks.c **** 
 1901              		.loc 1 2779 0
 1902 0074 261D     		adds	r6, r4, #4
 1903 0076 3046     		mov	r0, r6
 1904 0078 FFF7FEFF 		bl	uxListRemove
 1905              	.LVL179:
2783:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 1906              		.loc 1 2783 0
 1907 007c A36A     		ldr	r3, [r4, #40]
 1908 007e 1BB1     		cbz	r3, .L166
2785:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 1909              		.loc 1 2785 0
 1910 0080 04F11800 		add	r0, r4, #24
 1911 0084 FFF7FEFF 		bl	uxListRemove
 1912              	.LVL180:
 1913              	.L166:
2794:Source\bsw\FreeRTOS\src/tasks.c **** 
 1914              		.loc 1 2794 0
 1915 0088 E36A     		ldr	r3, [r4, #44]
 1916 008a 0122     		movs	r2, #1
 1917 008c 02FA03F1 		lsl	r1, r2, r3
 1918 0090 1A4D     		ldr	r5, .L176
 1919 0092 D5F8E420 		ldr	r2, [r5, #228]
 1920 0096 0A43     		orrs	r2, r2, r1
 1921 0098 C5F8E420 		str	r2, [r5, #228]
 1922 009c 05F13000 		add	r0, r5, #48
 1923 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 1924 00a4 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 135


 1925 00a6 3146     		mov	r1, r6
 1926 00a8 1044     		add	r0, r0, r2
 1927 00aa FFF7FEFF 		bl	vListInsertEnd
 1928              	.LVL181:
2804:Source\bsw\FreeRTOS\src/tasks.c **** 						{
 1929              		.loc 1 2804 0
 1930 00ae E26A     		ldr	r2, [r4, #44]
 1931 00b0 D5F8D830 		ldr	r3, [r5, #216]
 1932 00b4 DB6A     		ldr	r3, [r3, #44]
 1933 00b6 9A42     		cmp	r2, r3
 1934 00b8 C4D2     		bcs	.L172
 1935 00ba C8E7     		b	.L162
 1936              	.LVL182:
 1937              	.L163:
2823:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 1938              		.loc 1 2823 0
 1939 00bc 0F49     		ldr	r1, .L176
 1940 00be D1F8D830 		ldr	r3, [r1, #216]
 1941 00c2 DB6A     		ldr	r3, [r3, #44]
 1942 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 1943 00c8 9A00     		lsls	r2, r3, #2
 1944 00ca 0A44     		add	r2, r2, r1
 1945 00cc 136B     		ldr	r3, [r2, #48]
 1946 00ce 012B     		cmp	r3, #1
 1947 00d0 01D9     		bls	.L169
2825:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 1948              		.loc 1 2825 0
 1949 00d2 4FF00108 		mov	r8, #1
 1950              	.LVL183:
 1951              	.L169:
2851:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 1952              		.loc 1 2851 0
 1953 00d6 094B     		ldr	r3, .L176
 1954 00d8 D3F8FC30 		ldr	r3, [r3, #252]
 1955 00dc 4BB9     		cbnz	r3, .L174
 1956 00de 0AE0     		b	.L170
 1957              	.LVL184:
 1958              	.L160:
 1959              	.LBE43:
2864:Source\bsw\FreeRTOS\src/tasks.c **** 
 1960              		.loc 1 2864 0
 1961 00e0 064A     		ldr	r2, .L176
 1962 00e2 D2F80031 		ldr	r3, [r2, #256]
 1963 00e6 0133     		adds	r3, r3, #1
 1964 00e8 C2F80031 		str	r3, [r2, #256]
2711:Source\bsw\FreeRTOS\src/tasks.c **** 
 1965              		.loc 1 2711 0
 1966 00ec 4FF00008 		mov	r8, #0
 1967 00f0 01E0     		b	.L170
 1968              	.LVL185:
 1969              	.L174:
 1970              	.LBB44:
2853:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 1971              		.loc 1 2853 0
 1972 00f2 4FF00108 		mov	r8, #1
 1973              	.LVL186:
 1974              	.L170:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 136


 1975              	.LBE44:
2876:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 1976              		.loc 1 2876 0
 1977 00f6 4046     		mov	r0, r8
 1978 00f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1979              	.LVL187:
 1980              	.L177:
 1981              		.align	2
 1982              	.L176:
 1983 00fc 00000000 		.word	.LANCHOR0
 1984              		.cfi_endproc
 1985              	.LFE91:
 1986              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1987              		.section	.text.xTaskResumeAll,"ax",%progbits
 1988              		.align	2
 1989              		.global	xTaskResumeAll
 1990              		.thumb
 1991              		.thumb_func
 1992              		.type	xTaskResumeAll, %function
 1993              	xTaskResumeAll:
 1994              	.LFB85:
2195:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxTCB = NULL;
 1995              		.loc 1 2195 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999 0000 70B5     		push	{r4, r5, r6, lr}
 2000              		.cfi_def_cfa_offset 16
 2001              		.cfi_offset 4, -16
 2002              		.cfi_offset 5, -12
 2003              		.cfi_offset 6, -8
 2004              		.cfi_offset 14, -4
 2005              	.LVL188:
2208:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2006              		.loc 1 2208 0
 2007 0002 FFF7FEFF 		bl	vPortEnterCritical
 2008              	.LVL189:
2210:Source\bsw\FreeRTOS\src/tasks.c **** 
 2009              		.loc 1 2210 0
 2010 0006 324B     		ldr	r3, .L191
 2011 0008 D3F8F020 		ldr	r2, [r3, #240]
 2012 000c 013A     		subs	r2, r2, #1
 2013 000e C3F8F020 		str	r2, [r3, #240]
2212:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2014              		.loc 1 2212 0
 2015 0012 D3F8F030 		ldr	r3, [r3, #240]
 2016 0016 002B     		cmp	r3, #0
 2017 0018 53D1     		bne	.L187
2214:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2018              		.loc 1 2214 0
 2019 001a 2D4B     		ldr	r3, .L191
 2020 001c D3F8D430 		ldr	r3, [r3, #212]
 2021 0020 43BB     		cbnz	r3, .L188
2197:Source\bsw\FreeRTOS\src/tasks.c **** 
 2022              		.loc 1 2197 0
 2023 0022 0024     		movs	r4, #0
 2024 0024 50E0     		b	.L179
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 137


 2025              	.LVL190:
 2026              	.L182:
2220:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2027              		.loc 1 2220 0
 2028 0026 2A4C     		ldr	r4, .L191
 2029 0028 236A     		ldr	r3, [r4, #32]
 2030 002a DD68     		ldr	r5, [r3, #12]
 2031              	.LVL191:
2221:Source\bsw\FreeRTOS\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2032              		.loc 1 2221 0
 2033 002c 05F11800 		add	r0, r5, #24
 2034 0030 FFF7FEFF 		bl	uxListRemove
 2035              	.LVL192:
2222:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2036              		.loc 1 2222 0
 2037 0034 2E1D     		adds	r6, r5, #4
 2038 0036 3046     		mov	r0, r6
 2039 0038 FFF7FEFF 		bl	uxListRemove
 2040              	.LVL193:
2223:Source\bsw\FreeRTOS\src/tasks.c **** 
 2041              		.loc 1 2223 0
 2042 003c EB6A     		ldr	r3, [r5, #44]
 2043 003e 0122     		movs	r2, #1
 2044 0040 02FA03F1 		lsl	r1, r2, r3
 2045 0044 D4F8E420 		ldr	r2, [r4, #228]
 2046 0048 0A43     		orrs	r2, r2, r1
 2047 004a C4F8E420 		str	r2, [r4, #228]
 2048 004e 04F13000 		add	r0, r4, #48
 2049 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2050 0056 9A00     		lsls	r2, r3, #2
 2051 0058 3146     		mov	r1, r6
 2052 005a 1044     		add	r0, r0, r2
 2053 005c FFF7FEFF 		bl	vListInsertEnd
 2054              	.LVL194:
2227:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 2055              		.loc 1 2227 0
 2056 0060 EA6A     		ldr	r2, [r5, #44]
 2057 0062 D4F8D830 		ldr	r3, [r4, #216]
 2058 0066 DB6A     		ldr	r3, [r3, #44]
 2059 0068 9A42     		cmp	r2, r3
 2060 006a 04D3     		bcc	.L180
2229:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 2061              		.loc 1 2229 0
 2062 006c 0122     		movs	r2, #1
 2063 006e C4F8FC20 		str	r2, [r4, #252]
 2064 0072 00E0     		b	.L180
 2065              	.LVL195:
 2066              	.L188:
 2067 0074 0025     		movs	r5, #0
 2068              	.LVL196:
 2069              	.L180:
2218:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2070              		.loc 1 2218 0
 2071 0076 164B     		ldr	r3, .L191
 2072 0078 5B69     		ldr	r3, [r3, #20]
 2073 007a 002B     		cmp	r3, #0
 2074 007c D3D1     		bne	.L182
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 138


2237:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2075              		.loc 1 2237 0
 2076 007e 0DB1     		cbz	r5, .L183
2245:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2077              		.loc 1 2245 0
 2078 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2079              	.LVL197:
 2080              	.L183:
 2081              	.LBB45:
2253:Source\bsw\FreeRTOS\src/tasks.c **** 
 2082              		.loc 1 2253 0
 2083 0084 124B     		ldr	r3, .L191
 2084 0086 D3F80041 		ldr	r4, [r3, #256]
 2085              	.LVL198:
2255:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 2086              		.loc 1 2255 0
 2087 008a 64B1     		cbz	r4, .L184
 2088              	.L186:
2259:Source\bsw\FreeRTOS\src/tasks.c **** 							{
 2089              		.loc 1 2259 0
 2090 008c FFF7FEFF 		bl	xTaskIncrementTick
 2091              	.LVL199:
 2092 0090 18B1     		cbz	r0, .L185
2261:Source\bsw\FreeRTOS\src/tasks.c **** 							}
 2093              		.loc 1 2261 0
 2094 0092 0122     		movs	r2, #1
 2095 0094 0E4B     		ldr	r3, .L191
 2096 0096 C3F8FC20 		str	r2, [r3, #252]
 2097              	.L185:
 2098              	.LVL200:
2268:Source\bsw\FreeRTOS\src/tasks.c **** 
 2099              		.loc 1 2268 0
 2100 009a 013C     		subs	r4, r4, #1
 2101              	.LVL201:
 2102 009c F6D1     		bne	.L186
2270:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 2103              		.loc 1 2270 0
 2104 009e 0022     		movs	r2, #0
 2105 00a0 0B4B     		ldr	r3, .L191
 2106 00a2 C3F80021 		str	r2, [r3, #256]
 2107              	.L184:
 2108              	.LBE45:
2278:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2109              		.loc 1 2278 0
 2110 00a6 0A4B     		ldr	r3, .L191
 2111 00a8 D3F8FC30 		ldr	r3, [r3, #252]
 2112 00ac 5BB1     		cbz	r3, .L189
 2113              	.LVL202:
2285:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2114              		.loc 1 2285 0
 2115 00ae 4FF08052 		mov	r2, #268435456
 2116 00b2 084B     		ldr	r3, .L191+4
 2117 00b4 1A60     		str	r2, [r3]
 2118              		.syntax unified
 2119              	@ 2285 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2120 00b6 BFF34F8F 		dsb
 2121              	@ 0 "" 2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 139


 2122              	@ 2285 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2123 00ba BFF36F8F 		isb
 2124              	@ 0 "" 2
2282:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 2125              		.loc 1 2282 0
 2126              		.thumb
 2127              		.syntax unified
 2128 00be 0124     		movs	r4, #1
 2129              	.LVL203:
 2130 00c0 02E0     		b	.L179
 2131              	.LVL204:
 2132              	.L187:
2197:Source\bsw\FreeRTOS\src/tasks.c **** 
 2133              		.loc 1 2197 0
 2134 00c2 0024     		movs	r4, #0
 2135 00c4 00E0     		b	.L179
 2136              	.LVL205:
 2137              	.L189:
 2138 00c6 0024     		movs	r4, #0
 2139              	.LVL206:
 2140              	.L179:
2298:Source\bsw\FreeRTOS\src/tasks.c **** 
 2141              		.loc 1 2298 0
 2142 00c8 FFF7FEFF 		bl	vPortExitCritical
 2143              	.LVL207:
2301:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 2144              		.loc 1 2301 0
 2145 00cc 2046     		mov	r0, r4
 2146 00ce 70BD     		pop	{r4, r5, r6, pc}
 2147              	.LVL208:
 2148              	.L192:
 2149              		.align	2
 2150              	.L191:
 2151 00d0 00000000 		.word	.LANCHOR0
 2152 00d4 04ED00E0 		.word	-536810236
 2153              		.cfi_endproc
 2154              	.LFE85:
 2155              		.size	xTaskResumeAll, .-xTaskResumeAll
 2156              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2157              		.align	2
 2158              		.global	vTaskDelayUntil
 2159              		.thumb
 2160              		.thumb_func
 2161              		.type	vTaskDelayUntil, %function
 2162              	vTaskDelayUntil:
 2163              	.LFB72:
1258:Source\bsw\FreeRTOS\src/tasks.c **** 	TickType_t xTimeToWake;
 2164              		.loc 1 1258 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168              	.LVL209:
 2169 0000 38B5     		push	{r3, r4, r5, lr}
 2170              		.cfi_def_cfa_offset 16
 2171              		.cfi_offset 3, -16
 2172              		.cfi_offset 4, -12
 2173              		.cfi_offset 5, -8
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 140


 2174              		.cfi_offset 14, -4
 2175 0002 0546     		mov	r5, r0
 2176 0004 0C46     		mov	r4, r1
 2177              	.LVL210:
1266:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2178              		.loc 1 1266 0
 2179 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2180              	.LVL211:
 2181              	.LBB46:
1270:Source\bsw\FreeRTOS\src/tasks.c **** 
 2182              		.loc 1 1270 0
 2183 000a 164B     		ldr	r3, .L203
 2184 000c D3F8EC00 		ldr	r0, [r3, #236]
 2185              	.LVL212:
1273:Source\bsw\FreeRTOS\src/tasks.c **** 
 2186              		.loc 1 1273 0
 2187 0010 2A68     		ldr	r2, [r5]
 2188 0012 1319     		adds	r3, r2, r4
 2189              	.LVL213:
1275:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2190              		.loc 1 1275 0
 2191 0014 9042     		cmp	r0, r2
 2192 0016 05D2     		bcs	.L194
1282:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2193              		.loc 1 1282 0
 2194 0018 9A42     		cmp	r2, r3
 2195 001a 09D9     		bls	.L198
1282:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2196              		.loc 1 1282 0 is_stmt 0 discriminator 1
 2197 001c 9842     		cmp	r0, r3
 2198 001e 09D3     		bcc	.L199
 2199              	.LBE46:
1260:Source\bsw\FreeRTOS\src/tasks.c **** 
 2200              		.loc 1 1260 0 is_stmt 1
 2201 0020 0022     		movs	r2, #0
 2202 0022 0CE0     		b	.L195
 2203              	.L194:
 2204              	.LBB47:
1296:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2205              		.loc 1 1296 0
 2206 0024 9A42     		cmp	r2, r3
 2207 0026 07D8     		bhi	.L200
1296:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2208              		.loc 1 1296 0 is_stmt 0 discriminator 1
 2209 0028 9842     		cmp	r0, r3
 2210 002a 07D3     		bcc	.L201
 2211              	.LBE47:
1260:Source\bsw\FreeRTOS\src/tasks.c **** 
 2212              		.loc 1 1260 0 is_stmt 1
 2213 002c 0022     		movs	r2, #0
 2214 002e 06E0     		b	.L195
 2215              	.L198:
 2216 0030 0022     		movs	r2, #0
 2217 0032 04E0     		b	.L195
 2218              	.L199:
 2219              	.LBB48:
1284:Source\bsw\FreeRTOS\src/tasks.c **** 				}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 141


 2220              		.loc 1 1284 0
 2221 0034 0122     		movs	r2, #1
 2222 0036 02E0     		b	.L195
 2223              	.L200:
1298:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2224              		.loc 1 1298 0
 2225 0038 0122     		movs	r2, #1
 2226 003a 00E0     		b	.L195
 2227              	.L201:
 2228 003c 0122     		movs	r2, #1
 2229              	.L195:
 2230              	.LVL214:
1307:Source\bsw\FreeRTOS\src/tasks.c **** 
 2231              		.loc 1 1307 0
 2232 003e 2B60     		str	r3, [r5]
1309:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2233              		.loc 1 1309 0
 2234 0040 1AB1     		cbz	r2, .L196
1315:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2235              		.loc 1 1315 0
 2236 0042 0021     		movs	r1, #0
 2237 0044 181A     		subs	r0, r3, r0
 2238              	.LVL215:
 2239 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2240              	.LVL216:
 2241              	.L196:
 2242              	.LBE48:
1322:Source\bsw\FreeRTOS\src/tasks.c **** 
 2243              		.loc 1 1322 0
 2244 004a FFF7FEFF 		bl	xTaskResumeAll
 2245              	.LVL217:
1326:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2246              		.loc 1 1326 0
 2247 004e 38B9     		cbnz	r0, .L193
1328:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 2248              		.loc 1 1328 0
 2249 0050 4FF08052 		mov	r2, #268435456
 2250 0054 044B     		ldr	r3, .L203+4
 2251 0056 1A60     		str	r2, [r3]
 2252              		.syntax unified
 2253              	@ 1328 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2254 0058 BFF34F8F 		dsb
 2255              	@ 0 "" 2
 2256              	@ 1328 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2257 005c BFF36F8F 		isb
 2258              	@ 0 "" 2
 2259              		.thumb
 2260              		.syntax unified
 2261              	.L193:
 2262 0060 38BD     		pop	{r3, r4, r5, pc}
 2263              	.LVL218:
 2264              	.L204:
 2265 0062 00BF     		.align	2
 2266              	.L203:
 2267 0064 00000000 		.word	.LANCHOR0
 2268 0068 04ED00E0 		.word	-536810236
 2269              		.cfi_endproc
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 142


 2270              	.LFE72:
 2271              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2272              		.section	.text.vTaskDelay,"ax",%progbits
 2273              		.align	2
 2274              		.global	vTaskDelay
 2275              		.thumb
 2276              		.thumb_func
 2277              		.type	vTaskDelay, %function
 2278              	vTaskDelay:
 2279              	.LFB73:
1342:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2280              		.loc 1 1342 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              	.LVL219:
 2285 0000 10B5     		push	{r4, lr}
 2286              		.cfi_def_cfa_offset 8
 2287              		.cfi_offset 4, -8
 2288              		.cfi_offset 14, -4
 2289              	.LVL220:
1346:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2290              		.loc 1 1346 0
 2291 0002 48B1     		cbz	r0, .L208
 2292 0004 0446     		mov	r4, r0
1349:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2293              		.loc 1 1349 0
 2294 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2295              	.LVL221:
1360:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2296              		.loc 1 1360 0
 2297 000a 0021     		movs	r1, #0
 2298 000c 2046     		mov	r0, r4
 2299 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2300              	.LVL222:
1362:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 2301              		.loc 1 1362 0
 2302 0012 FFF7FEFF 		bl	xTaskResumeAll
 2303              	.LVL223:
 2304 0016 00E0     		b	.L206
 2305              	.LVL224:
 2306              	.L208:
1343:Source\bsw\FreeRTOS\src/tasks.c **** 
 2307              		.loc 1 1343 0
 2308 0018 0020     		movs	r0, #0
 2309              	.LVL225:
 2310              	.L206:
1371:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2311              		.loc 1 1371 0
 2312 001a 38B9     		cbnz	r0, .L205
1373:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 2313              		.loc 1 1373 0
 2314 001c 4FF08052 		mov	r2, #268435456
 2315 0020 034B     		ldr	r3, .L210
 2316 0022 1A60     		str	r2, [r3]
 2317              		.syntax unified
 2318              	@ 1373 "Source\bsw\FreeRTOS\src\tasks.c" 1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 143


 2319 0024 BFF34F8F 		dsb
 2320              	@ 0 "" 2
 2321              	@ 1373 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2322 0028 BFF36F8F 		isb
 2323              	@ 0 "" 2
 2324              		.thumb
 2325              		.syntax unified
 2326              	.L205:
 2327 002c 10BD     		pop	{r4, pc}
 2328              	.L211:
 2329 002e 00BF     		.align	2
 2330              	.L210:
 2331 0030 04ED00E0 		.word	-536810236
 2332              		.cfi_endproc
 2333              	.LFE73:
 2334              		.size	vTaskDelay, .-vTaskDelay
 2335              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2336              		.align	2
 2337              		.global	xTaskCatchUpTicks
 2338              		.thumb
 2339              		.thumb_func
 2340              		.type	xTaskCatchUpTicks, %function
 2341              	xTaskCatchUpTicks:
 2342              	.LFB90:
2610:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2343              		.loc 1 2610 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              	.LVL226:
 2348 0000 10B5     		push	{r4, lr}
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 4, -8
 2351              		.cfi_offset 14, -4
 2352 0002 0446     		mov	r4, r0
 2353              	.LVL227:
2619:Source\bsw\FreeRTOS\src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2354              		.loc 1 2619 0
 2355 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2356              	.LVL228:
2620:Source\bsw\FreeRTOS\src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2357              		.loc 1 2620 0
 2358 0008 044B     		ldr	r3, .L214
 2359 000a D3F80021 		ldr	r2, [r3, #256]
 2360 000e 1444     		add	r4, r4, r2
 2361              	.LVL229:
 2362 0010 C3F80041 		str	r4, [r3, #256]
2621:Source\bsw\FreeRTOS\src/tasks.c **** 
 2363              		.loc 1 2621 0
 2364 0014 FFF7FEFF 		bl	xTaskResumeAll
 2365              	.LVL230:
2624:Source\bsw\FreeRTOS\src/tasks.c **** /*----------------------------------------------------------*/
 2366              		.loc 1 2624 0
 2367 0018 10BD     		pop	{r4, pc}
 2368              	.L215:
 2369 001a 00BF     		.align	2
 2370              	.L214:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 144


 2371 001c 00000000 		.word	.LANCHOR0
 2372              		.cfi_endproc
 2373              	.LFE90:
 2374              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2375              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2376              		.align	2
 2377              		.global	vTaskSwitchContext
 2378              		.thumb
 2379              		.thumb_func
 2380              		.type	vTaskSwitchContext, %function
 2381              	vTaskSwitchContext:
 2382              	.LFB92:
2990:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2383              		.loc 1 2990 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 0
 2386              		@ frame_needed = 0, uses_anonymous_args = 0
2991:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2387              		.loc 1 2991 0
 2388 0000 284B     		ldr	r3, .L223
 2389 0002 D3F8F030 		ldr	r3, [r3, #240]
 2390 0006 23B1     		cbz	r3, .L217
2995:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2391              		.loc 1 2995 0
 2392 0008 0122     		movs	r2, #1
 2393 000a 264B     		ldr	r3, .L223
 2394 000c C3F8FC20 		str	r2, [r3, #252]
 2395 0010 7047     		bx	lr
 2396              	.L217:
2990:Source\bsw\FreeRTOS\src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2397              		.loc 1 2990 0
 2398 0012 10B5     		push	{r4, lr}
 2399              		.cfi_def_cfa_offset 8
 2400              		.cfi_offset 4, -8
 2401              		.cfi_offset 14, -4
2999:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2402              		.loc 1 2999 0
 2403 0014 234B     		ldr	r3, .L223
 2404 0016 0022     		movs	r2, #0
 2405 0018 C3F8FC20 		str	r2, [r3, #252]
 2406              	.LBB49:
3030:Source\bsw\FreeRTOS\src/tasks.c **** 
 2407              		.loc 1 3030 0
 2408 001c D3F8D830 		ldr	r3, [r3, #216]
 2409 0020 1B6B     		ldr	r3, [r3, #48]
 2410              	.LVL231:
 2411 0022 1A68     		ldr	r2, [r3]
 2412 0024 B2F1A53F 		cmp	r2, #-1515870811
 2413 0028 0BD1     		bne	.L219
3030:Source\bsw\FreeRTOS\src/tasks.c **** 
 2414              		.loc 1 3030 0 is_stmt 0 discriminator 2
 2415 002a 5A68     		ldr	r2, [r3, #4]
 2416 002c B2F1A53F 		cmp	r2, #-1515870811
 2417 0030 07D1     		bne	.L219
3030:Source\bsw\FreeRTOS\src/tasks.c **** 
 2418              		.loc 1 3030 0 discriminator 4
 2419 0032 9A68     		ldr	r2, [r3, #8]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 145


 2420 0034 B2F1A53F 		cmp	r2, #-1515870811
 2421 0038 03D1     		bne	.L219
3030:Source\bsw\FreeRTOS\src/tasks.c **** 
 2422              		.loc 1 3030 0 discriminator 6
 2423 003a DB68     		ldr	r3, [r3, #12]
 2424              	.LVL232:
 2425 003c B3F1A53F 		cmp	r3, #-1515870811
 2426 0040 07D0     		beq	.L220
 2427              	.L219:
3030:Source\bsw\FreeRTOS\src/tasks.c **** 
 2428              		.loc 1 3030 0 discriminator 7
 2429 0042 184B     		ldr	r3, .L223
 2430 0044 D3F8D800 		ldr	r0, [r3, #216]
 2431 0048 D3F8D810 		ldr	r1, [r3, #216]
 2432 004c 3431     		adds	r1, r1, #52
 2433 004e FFF7FEFF 		bl	vApplicationStackOverflowHook
 2434              	.LVL233:
 2435              	.L220:
 2436              	.LBE49:
 2437              	.LBB50:
3041:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2438              		.loc 1 3041 0 is_stmt 1
 2439 0052 144A     		ldr	r2, .L223
 2440 0054 D2F8E430 		ldr	r3, [r2, #228]
 2441              	.LVL234:
 2442              	.LBB51:
 2443              	.LBB52:
 134:.\Source\bsw\FreeRTOS\include/portmacro.h **** 		return ucReturn;
 2444              		.loc 2 134 0
 2445              		.syntax unified
 2446              	@ 134 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 2447 0058 B3FA83F3 		clz r3, r3
 2448              	@ 0 "" 2
 2449              	.LVL235:
 2450              		.thumb
 2451              		.syntax unified
 2452 005c DBB2     		uxtb	r3, r3
 2453              	.LBE52:
 2454              	.LBE51:
3041:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2455              		.loc 1 3041 0
 2456 005e C3F11F03 		rsb	r3, r3, #31
 2457              	.LVL236:
 2458              	.LBB53:
 2459 0062 9800     		lsls	r0, r3, #2
 2460 0064 C418     		adds	r4, r0, r3
 2461 0066 A100     		lsls	r1, r4, #2
 2462 0068 1144     		add	r1, r1, r2
 2463 006a 4C6B     		ldr	r4, [r1, #52]
 2464 006c 6468     		ldr	r4, [r4, #4]
 2465 006e 4C63     		str	r4, [r1, #52]
 2466 0070 02F13001 		add	r1, r2, #48
 2467 0074 1844     		add	r0, r0, r3
 2468 0076 8200     		lsls	r2, r0, #2
 2469 0078 0832     		adds	r2, r2, #8
 2470 007a 0A44     		add	r2, r2, r1
 2471 007c 9442     		cmp	r4, r2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 146


 2472 007e 06D1     		bne	.L221
3041:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2473              		.loc 1 3041 0 is_stmt 0 discriminator 1
 2474 0080 6068     		ldr	r0, [r4, #4]
 2475 0082 03EB8301 		add	r1, r3, r3, lsl #2
 2476 0086 8A00     		lsls	r2, r1, #2
 2477 0088 0649     		ldr	r1, .L223
 2478 008a 0A44     		add	r2, r2, r1
 2479 008c 5063     		str	r0, [r2, #52]
 2480              	.L221:
3041:Source\bsw\FreeRTOS\src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2481              		.loc 1 3041 0 discriminator 3
 2482 008e 0549     		ldr	r1, .L223
 2483 0090 03EB8303 		add	r3, r3, r3, lsl #2
 2484              	.LVL237:
 2485 0094 9A00     		lsls	r2, r3, #2
 2486 0096 0A44     		add	r2, r2, r1
 2487 0098 536B     		ldr	r3, [r2, #52]
 2488 009a DB68     		ldr	r3, [r3, #12]
 2489 009c C1F8D830 		str	r3, [r1, #216]
 2490 00a0 10BD     		pop	{r4, pc}
 2491              	.L224:
 2492 00a2 00BF     		.align	2
 2493              	.L223:
 2494 00a4 00000000 		.word	.LANCHOR0
 2495              	.LBE53:
 2496              	.LBE50:
 2497              		.cfi_endproc
 2498              	.LFE92:
 2499              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2500              		.section	.text.vTaskSuspend,"ax",%progbits
 2501              		.align	2
 2502              		.global	vTaskSuspend
 2503              		.thumb
 2504              		.thumb_func
 2505              		.type	vTaskSuspend, %function
 2506              	vTaskSuspend:
 2507              	.LFB78:
1705:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 2508              		.loc 1 1705 0 is_stmt 1
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 0
 2511              		@ frame_needed = 0, uses_anonymous_args = 0
 2512              	.LVL238:
 2513 0000 38B5     		push	{r3, r4, r5, lr}
 2514              		.cfi_def_cfa_offset 16
 2515              		.cfi_offset 3, -16
 2516              		.cfi_offset 4, -12
 2517              		.cfi_offset 5, -8
 2518              		.cfi_offset 14, -4
 2519 0002 0446     		mov	r4, r0
1708:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2520              		.loc 1 1708 0
 2521 0004 FFF7FEFF 		bl	vPortEnterCritical
 2522              	.LVL239:
1712:Source\bsw\FreeRTOS\src/tasks.c **** 
 2523              		.loc 1 1712 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 147


 2524 0008 14B9     		cbnz	r4, .L226
1712:Source\bsw\FreeRTOS\src/tasks.c **** 
 2525              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2526 000a 2B4B     		ldr	r3, .L235
 2527 000c D3F8D840 		ldr	r4, [r3, #216]
 2528              	.LVL240:
 2529              	.L226:
1718:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2530              		.loc 1 1718 0 is_stmt 1 discriminator 4
 2531 0010 251D     		adds	r5, r4, #4
 2532 0012 2846     		mov	r0, r5
 2533 0014 FFF7FEFF 		bl	uxListRemove
 2534              	.LVL241:
 2535 0018 80B9     		cbnz	r0, .L227
1720:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2536              		.loc 1 1720 0
 2537 001a E26A     		ldr	r2, [r4, #44]
 2538 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2539 0020 8B00     		lsls	r3, r1, #2
 2540 0022 2549     		ldr	r1, .L235
 2541 0024 0B44     		add	r3, r3, r1
 2542 0026 1B6B     		ldr	r3, [r3, #48]
 2543 0028 43B9     		cbnz	r3, .L227
1720:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2544              		.loc 1 1720 0 is_stmt 0 discriminator 1
 2545 002a 0123     		movs	r3, #1
 2546 002c 03FA02F2 		lsl	r2, r3, r2
 2547 0030 D1F8E430 		ldr	r3, [r1, #228]
 2548 0034 23EA0202 		bic	r2, r3, r2
 2549 0038 C1F8E420 		str	r2, [r1, #228]
 2550              	.L227:
1728:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2551              		.loc 1 1728 0 is_stmt 1
 2552 003c A36A     		ldr	r3, [r4, #40]
 2553 003e 1BB1     		cbz	r3, .L228
1730:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2554              		.loc 1 1730 0
 2555 0040 04F11800 		add	r0, r4, #24
 2556 0044 FFF7FEFF 		bl	uxListRemove
 2557              	.LVL242:
 2558              	.L228:
1737:Source\bsw\FreeRTOS\src/tasks.c **** 
 2559              		.loc 1 1737 0
 2560 0048 2946     		mov	r1, r5
 2561 004a 1B48     		ldr	r0, .L235
 2562 004c FFF7FEFF 		bl	vListInsertEnd
 2563              	.LVL243:
1741:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2564              		.loc 1 1741 0
 2565 0050 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 2566 0054 DBB2     		uxtb	r3, r3
 2567 0056 012B     		cmp	r3, #1
 2568 0058 02D1     		bne	.L229
1745:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2569              		.loc 1 1745 0
 2570 005a 0023     		movs	r3, #0
 2571 005c 84F84C30 		strb	r3, [r4, #76]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 148


 2572              	.L229:
1750:Source\bsw\FreeRTOS\src/tasks.c **** 
 2573              		.loc 1 1750 0
 2574 0060 FFF7FEFF 		bl	vPortExitCritical
 2575              	.LVL244:
1752:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2576              		.loc 1 1752 0
 2577 0064 144B     		ldr	r3, .L235
 2578 0066 D3F8DC30 		ldr	r3, [r3, #220]
 2579 006a 2BB1     		cbz	r3, .L230
1756:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2580              		.loc 1 1756 0
 2581 006c FFF7FEFF 		bl	vPortEnterCritical
 2582              	.LVL245:
1758:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2583              		.loc 1 1758 0
 2584 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2585              	.LVL246:
1760:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 2586              		.loc 1 1760 0
 2587 0074 FFF7FEFF 		bl	vPortExitCritical
 2588              	.LVL247:
 2589              	.L230:
1767:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2590              		.loc 1 1767 0
 2591 0078 0F4B     		ldr	r3, .L235
 2592 007a D3F8D830 		ldr	r3, [r3, #216]
 2593 007e 9C42     		cmp	r4, r3
 2594 0080 19D1     		bne	.L225
1769:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2595              		.loc 1 1769 0
 2596 0082 0D4B     		ldr	r3, .L235
 2597 0084 D3F8DC30 		ldr	r3, [r3, #220]
 2598 0088 43B1     		cbz	r3, .L232
1773:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 2599              		.loc 1 1773 0
 2600 008a 4FF08052 		mov	r2, #268435456
 2601 008e 0B4B     		ldr	r3, .L235+4
 2602 0090 1A60     		str	r2, [r3]
 2603              		.syntax unified
 2604              	@ 1773 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2605 0092 BFF34F8F 		dsb
 2606              	@ 0 "" 2
 2607              	@ 1773 "Source\bsw\FreeRTOS\src\tasks.c" 1
 2608 0096 BFF36F8F 		isb
 2609              	@ 0 "" 2
 2610              		.thumb
 2611              		.syntax unified
 2612 009a 38BD     		pop	{r3, r4, r5, pc}
 2613              	.LVL248:
 2614              	.L232:
1780:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 2615              		.loc 1 1780 0
 2616 009c 064B     		ldr	r3, .L235
 2617 009e 1A68     		ldr	r2, [r3]
 2618 00a0 D3F8D430 		ldr	r3, [r3, #212]
 2619 00a4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 149


 2620 00a6 04D1     		bne	.L233
1786:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2621              		.loc 1 1786 0
 2622 00a8 0022     		movs	r2, #0
 2623 00aa 034B     		ldr	r3, .L235
 2624 00ac C3F8D820 		str	r2, [r3, #216]
 2625 00b0 38BD     		pop	{r3, r4, r5, pc}
 2626              	.LVL249:
 2627              	.L233:
1790:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 2628              		.loc 1 1790 0
 2629 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2630              	.LVL250:
 2631              	.L225:
 2632 00b6 38BD     		pop	{r3, r4, r5, pc}
 2633              	.LVL251:
 2634              	.L236:
 2635              		.align	2
 2636              	.L235:
 2637 00b8 00000000 		.word	.LANCHOR0
 2638 00bc 04ED00E0 		.word	-536810236
 2639              		.cfi_endproc
 2640              	.LFE78:
 2641              		.size	vTaskSuspend, .-vTaskSuspend
 2642              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2643              		.align	2
 2644              		.global	vTaskPlaceOnEventList
 2645              		.thumb
 2646              		.thumb_func
 2647              		.type	vTaskPlaceOnEventList, %function
 2648              	vTaskPlaceOnEventList:
 2649              	.LFB93:
3065:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
 2650              		.loc 1 3065 0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 0
 2653              		@ frame_needed = 0, uses_anonymous_args = 0
 2654              	.LVL252:
 2655 0000 10B5     		push	{r4, lr}
 2656              		.cfi_def_cfa_offset 8
 2657              		.cfi_offset 4, -8
 2658              		.cfi_offset 14, -4
 2659 0002 0C46     		mov	r4, r1
3075:Source\bsw\FreeRTOS\src/tasks.c **** 
 2660              		.loc 1 3075 0
 2661 0004 054B     		ldr	r3, .L239
 2662 0006 D3F8D810 		ldr	r1, [r3, #216]
 2663              	.LVL253:
 2664 000a 1831     		adds	r1, r1, #24
 2665 000c FFF7FEFF 		bl	vListInsert
 2666              	.LVL254:
3077:Source\bsw\FreeRTOS\src/tasks.c **** }
 2667              		.loc 1 3077 0
 2668 0010 0121     		movs	r1, #1
 2669 0012 2046     		mov	r0, r4
 2670 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2671              	.LVL255:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 150


 2672 0018 10BD     		pop	{r4, pc}
 2673              	.LVL256:
 2674              	.L240:
 2675 001a 00BF     		.align	2
 2676              	.L239:
 2677 001c 00000000 		.word	.LANCHOR0
 2678              		.cfi_endproc
 2679              	.LFE93:
 2680              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2681              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2682              		.align	2
 2683              		.global	vTaskPlaceOnUnorderedEventList
 2684              		.thumb
 2685              		.thumb_func
 2686              		.type	vTaskPlaceOnUnorderedEventList, %function
 2687              	vTaskPlaceOnUnorderedEventList:
 2688              	.LFB94:
3082:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxEventList );
 2689              		.loc 1 3082 0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 2693              	.LVL257:
 2694 0000 10B5     		push	{r4, lr}
 2695              		.cfi_def_cfa_offset 8
 2696              		.cfi_offset 4, -8
 2697              		.cfi_offset 14, -4
 2698 0002 1446     		mov	r4, r2
3092:Source\bsw\FreeRTOS\src/tasks.c **** 
 2699              		.loc 1 3092 0
 2700 0004 074B     		ldr	r3, .L243
 2701 0006 D3F8D820 		ldr	r2, [r3, #216]
 2702              	.LVL258:
 2703 000a 41F00041 		orr	r1, r1, #-2147483648
 2704              	.LVL259:
 2705 000e 9161     		str	r1, [r2, #24]
3099:Source\bsw\FreeRTOS\src/tasks.c **** 
 2706              		.loc 1 3099 0
 2707 0010 D3F8D810 		ldr	r1, [r3, #216]
 2708 0014 1831     		adds	r1, r1, #24
 2709 0016 FFF7FEFF 		bl	vListInsertEnd
 2710              	.LVL260:
3101:Source\bsw\FreeRTOS\src/tasks.c **** }
 2711              		.loc 1 3101 0
 2712 001a 0121     		movs	r1, #1
 2713 001c 2046     		mov	r0, r4
 2714 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2715              	.LVL261:
 2716 0022 10BD     		pop	{r4, pc}
 2717              	.LVL262:
 2718              	.L244:
 2719              		.align	2
 2720              	.L243:
 2721 0024 00000000 		.word	.LANCHOR0
 2722              		.cfi_endproc
 2723              	.LFE94:
 2724              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 151


 2725              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2726              		.align	2
 2727              		.global	xTaskRemoveFromEventList
 2728              		.thumb
 2729              		.thumb_func
 2730              		.type	xTaskRemoveFromEventList, %function
 2731              	xTaskRemoveFromEventList:
 2732              	.LFB95:
3139:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
 2733              		.loc 1 3139 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 0
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              	.LVL263:
 2738 0000 38B5     		push	{r3, r4, r5, lr}
 2739              		.cfi_def_cfa_offset 16
 2740              		.cfi_offset 3, -16
 2741              		.cfi_offset 4, -12
 2742              		.cfi_offset 5, -8
 2743              		.cfi_offset 14, -4
3156:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2744              		.loc 1 3156 0
 2745 0002 C368     		ldr	r3, [r0, #12]
 2746 0004 DC68     		ldr	r4, [r3, #12]
 2747              	.LVL264:
3158:Source\bsw\FreeRTOS\src/tasks.c **** 
 2748              		.loc 1 3158 0
 2749 0006 04F11805 		add	r5, r4, #24
 2750 000a 2846     		mov	r0, r5
 2751              	.LVL265:
 2752 000c FFF7FEFF 		bl	uxListRemove
 2753              	.LVL266:
3160:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2754              		.loc 1 3160 0
 2755 0010 164B     		ldr	r3, .L251
 2756 0012 D3F8F030 		ldr	r3, [r3, #240]
 2757 0016 B3B9     		cbnz	r3, .L246
3162:Source\bsw\FreeRTOS\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2758              		.loc 1 3162 0
 2759 0018 251D     		adds	r5, r4, #4
 2760 001a 2846     		mov	r0, r5
 2761 001c FFF7FEFF 		bl	uxListRemove
 2762              	.LVL267:
3163:Source\bsw\FreeRTOS\src/tasks.c **** 
 2763              		.loc 1 3163 0
 2764 0020 E36A     		ldr	r3, [r4, #44]
 2765 0022 0122     		movs	r2, #1
 2766 0024 02FA03F1 		lsl	r1, r2, r3
 2767 0028 1048     		ldr	r0, .L251
 2768 002a D0F8E420 		ldr	r2, [r0, #228]
 2769 002e 0A43     		orrs	r2, r2, r1
 2770 0030 C0F8E420 		str	r2, [r0, #228]
 2771 0034 3030     		adds	r0, r0, #48
 2772 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2773 003a 9A00     		lsls	r2, r3, #2
 2774 003c 2946     		mov	r1, r5
 2775 003e 1044     		add	r0, r0, r2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 152


 2776 0040 FFF7FEFF 		bl	vListInsertEnd
 2777              	.LVL268:
 2778 0044 03E0     		b	.L247
 2779              	.L246:
3183:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2780              		.loc 1 3183 0
 2781 0046 2946     		mov	r1, r5
 2782 0048 0948     		ldr	r0, .L251+4
 2783 004a FFF7FEFF 		bl	vListInsertEnd
 2784              	.LVL269:
 2785              	.L247:
3186:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2786              		.loc 1 3186 0
 2787 004e E26A     		ldr	r2, [r4, #44]
 2788 0050 064B     		ldr	r3, .L251
 2789 0052 D3F8D830 		ldr	r3, [r3, #216]
 2790 0056 DB6A     		ldr	r3, [r3, #44]
 2791 0058 9A42     		cmp	r2, r3
 2792 005a 04D9     		bls	.L249
 2793              	.LVL270:
3195:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2794              		.loc 1 3195 0
 2795 005c 0120     		movs	r0, #1
 2796 005e 034B     		ldr	r3, .L251
 2797 0060 C3F8FC00 		str	r0, [r3, #252]
 2798 0064 38BD     		pop	{r3, r4, r5, pc}
 2799              	.LVL271:
 2800              	.L249:
3199:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2801              		.loc 1 3199 0
 2802 0066 0020     		movs	r0, #0
 2803              	.LVL272:
3203:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 2804              		.loc 1 3203 0
 2805 0068 38BD     		pop	{r3, r4, r5, pc}
 2806              	.LVL273:
 2807              	.L252:
 2808 006a 00BF     		.align	2
 2809              	.L251:
 2810 006c 00000000 		.word	.LANCHOR0
 2811 0070 14000000 		.word	.LANCHOR0+20
 2812              		.cfi_endproc
 2813              	.LFE95:
 2814              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2815              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2816              		.align	2
 2817              		.global	vTaskRemoveFromUnorderedEventList
 2818              		.thumb
 2819              		.thumb_func
 2820              		.type	vTaskRemoveFromUnorderedEventList, %function
 2821              	vTaskRemoveFromUnorderedEventList:
 2822              	.LFB96:
3207:Source\bsw\FreeRTOS\src/tasks.c **** TCB_t *pxUnblockedTCB;
 2823              		.loc 1 3207 0
 2824              		.cfi_startproc
 2825              		@ args = 0, pretend = 0, frame = 0
 2826              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 153


 2827              	.LVL274:
 2828 0000 70B5     		push	{r4, r5, r6, lr}
 2829              		.cfi_def_cfa_offset 16
 2830              		.cfi_offset 4, -16
 2831              		.cfi_offset 5, -12
 2832              		.cfi_offset 6, -8
 2833              		.cfi_offset 14, -4
3215:Source\bsw\FreeRTOS\src/tasks.c **** 
 2834              		.loc 1 3215 0
 2835 0002 41F00041 		orr	r1, r1, #-2147483648
 2836              	.LVL275:
 2837 0006 0160     		str	r1, [r0]
3219:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2838              		.loc 1 3219 0
 2839 0008 C568     		ldr	r5, [r0, #12]
 2840              	.LVL276:
3221:Source\bsw\FreeRTOS\src/tasks.c **** 
 2841              		.loc 1 3221 0
 2842 000a FFF7FEFF 		bl	uxListRemove
 2843              	.LVL277:
3240:Source\bsw\FreeRTOS\src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2844              		.loc 1 3240 0
 2845 000e 2E1D     		adds	r6, r5, #4
 2846 0010 3046     		mov	r0, r6
 2847 0012 FFF7FEFF 		bl	uxListRemove
 2848              	.LVL278:
3241:Source\bsw\FreeRTOS\src/tasks.c **** 
 2849              		.loc 1 3241 0
 2850 0016 EB6A     		ldr	r3, [r5, #44]
 2851 0018 0122     		movs	r2, #1
 2852 001a 02FA03F1 		lsl	r1, r2, r3
 2853 001e 0C4C     		ldr	r4, .L256
 2854 0020 D4F8E420 		ldr	r2, [r4, #228]
 2855 0024 0A43     		orrs	r2, r2, r1
 2856 0026 C4F8E420 		str	r2, [r4, #228]
 2857 002a 04F13000 		add	r0, r4, #48
 2858 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2859 0032 9A00     		lsls	r2, r3, #2
 2860 0034 3146     		mov	r1, r6
 2861 0036 1044     		add	r0, r0, r2
 2862 0038 FFF7FEFF 		bl	vListInsertEnd
 2863              	.LVL279:
3243:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2864              		.loc 1 3243 0
 2865 003c EA6A     		ldr	r2, [r5, #44]
 2866 003e D4F8D830 		ldr	r3, [r4, #216]
 2867 0042 DB6A     		ldr	r3, [r3, #44]
 2868 0044 9A42     		cmp	r2, r3
 2869 0046 02D9     		bls	.L253
3249:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2870              		.loc 1 3249 0
 2871 0048 0122     		movs	r2, #1
 2872 004a C4F8FC20 		str	r2, [r4, #252]
 2873              	.L253:
 2874 004e 70BD     		pop	{r4, r5, r6, pc}
 2875              	.LVL280:
 2876              	.L257:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 154


 2877              		.align	2
 2878              	.L256:
 2879 0050 00000000 		.word	.LANCHOR0
 2880              		.cfi_endproc
 2881              	.LFE96:
 2882              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2883              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2884              		.align	2
 2885              		.global	vTaskSetTimeOutState
 2886              		.thumb
 2887              		.thumb_func
 2888              		.type	vTaskSetTimeOutState, %function
 2889              	vTaskSetTimeOutState:
 2890              	.LFB97:
3255:Source\bsw\FreeRTOS\src/tasks.c **** 	configASSERT( pxTimeOut );
 2891              		.loc 1 3255 0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 2895              	.LVL281:
 2896 0000 10B5     		push	{r4, lr}
 2897              		.cfi_def_cfa_offset 8
 2898              		.cfi_offset 4, -8
 2899              		.cfi_offset 14, -4
 2900 0002 0446     		mov	r4, r0
3257:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2901              		.loc 1 3257 0
 2902 0004 FFF7FEFF 		bl	vPortEnterCritical
 2903              	.LVL282:
3259:Source\bsw\FreeRTOS\src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2904              		.loc 1 3259 0
 2905 0008 044B     		ldr	r3, .L260
 2906 000a D3F8F820 		ldr	r2, [r3, #248]
 2907 000e 2260     		str	r2, [r4]
3260:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 2908              		.loc 1 3260 0
 2909 0010 D3F8EC30 		ldr	r3, [r3, #236]
 2910 0014 6360     		str	r3, [r4, #4]
3262:Source\bsw\FreeRTOS\src/tasks.c **** }
 2911              		.loc 1 3262 0
 2912 0016 FFF7FEFF 		bl	vPortExitCritical
 2913              	.LVL283:
 2914 001a 10BD     		pop	{r4, pc}
 2915              	.LVL284:
 2916              	.L261:
 2917              		.align	2
 2918              	.L260:
 2919 001c 00000000 		.word	.LANCHOR0
 2920              		.cfi_endproc
 2921              	.LFE97:
 2922              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2923              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2924              		.align	2
 2925              		.global	vTaskInternalSetTimeOutState
 2926              		.thumb
 2927              		.thumb_func
 2928              		.type	vTaskInternalSetTimeOutState, %function
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 155


 2929              	vTaskInternalSetTimeOutState:
 2930              	.LFB98:
3267:Source\bsw\FreeRTOS\src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2931              		.loc 1 3267 0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 2935              		@ link register save eliminated.
 2936              	.LVL285:
3269:Source\bsw\FreeRTOS\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2937              		.loc 1 3269 0
 2938 0000 034B     		ldr	r3, .L263
 2939 0002 D3F8F820 		ldr	r2, [r3, #248]
 2940 0006 0260     		str	r2, [r0]
3270:Source\bsw\FreeRTOS\src/tasks.c **** }
 2941              		.loc 1 3270 0
 2942 0008 D3F8EC30 		ldr	r3, [r3, #236]
 2943 000c 4360     		str	r3, [r0, #4]
 2944 000e 7047     		bx	lr
 2945              	.L264:
 2946              		.align	2
 2947              	.L263:
 2948 0010 00000000 		.word	.LANCHOR0
 2949              		.cfi_endproc
 2950              	.LFE98:
 2951              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2952              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2953              		.align	2
 2954              		.global	xTaskCheckForTimeOut
 2955              		.thumb
 2956              		.thumb_func
 2957              		.type	xTaskCheckForTimeOut, %function
 2958              	xTaskCheckForTimeOut:
 2959              	.LFB99:
3275:Source\bsw\FreeRTOS\src/tasks.c **** BaseType_t xReturn;
 2960              		.loc 1 3275 0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 0, uses_anonymous_args = 0
 2964              	.LVL286:
 2965 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2966              		.cfi_def_cfa_offset 24
 2967              		.cfi_offset 3, -24
 2968              		.cfi_offset 4, -20
 2969              		.cfi_offset 5, -16
 2970              		.cfi_offset 6, -12
 2971              		.cfi_offset 7, -8
 2972              		.cfi_offset 14, -4
 2973 0002 0446     		mov	r4, r0
 2974 0004 0D46     		mov	r5, r1
3281:Source\bsw\FreeRTOS\src/tasks.c **** 	{
 2975              		.loc 1 3281 0
 2976 0006 FFF7FEFF 		bl	vPortEnterCritical
 2977              	.LVL287:
 2978              	.LBB54:
3284:Source\bsw\FreeRTOS\src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2979              		.loc 1 3284 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 156


 2980 000a 124B     		ldr	r3, .L272
 2981 000c D3F8EC10 		ldr	r1, [r3, #236]
 2982              	.LVL288:
3285:Source\bsw\FreeRTOS\src/tasks.c **** 
 2983              		.loc 1 3285 0
 2984 0010 6268     		ldr	r2, [r4, #4]
 2985 0012 881A     		subs	r0, r1, r2
 2986              	.LVL289:
3299:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 2987              		.loc 1 3299 0
 2988 0014 2B68     		ldr	r3, [r5]
 2989 0016 B3F1FF3F 		cmp	r3, #-1
 2990 001a 14D0     		beq	.L269
3309:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2991              		.loc 1 3309 0
 2992 001c 2768     		ldr	r7, [r4]
 2993 001e 0D4E     		ldr	r6, .L272
 2994 0020 D6F8F860 		ldr	r6, [r6, #248]
 2995 0024 B742     		cmp	r7, r6
 2996 0026 01D0     		beq	.L267
3309:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 2997              		.loc 1 3309 0 is_stmt 0 discriminator 1
 2998 0028 9142     		cmp	r1, r2
 2999 002a 0ED2     		bcs	.L270
 3000              	.L267:
3318:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3001              		.loc 1 3318 0 is_stmt 1
 3002 002c 9842     		cmp	r0, r3
 3003 002e 06D2     		bcs	.L268
3321:Source\bsw\FreeRTOS\src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3004              		.loc 1 3321 0
 3005 0030 1B1A     		subs	r3, r3, r0
 3006 0032 2B60     		str	r3, [r5]
3322:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdFALSE;
 3007              		.loc 1 3322 0
 3008 0034 2046     		mov	r0, r4
 3009              	.LVL290:
 3010 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3011              	.LVL291:
3323:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3012              		.loc 1 3323 0
 3013 003a 0024     		movs	r4, #0
 3014              	.LVL292:
 3015 003c 06E0     		b	.L266
 3016              	.LVL293:
 3017              	.L268:
3327:Source\bsw\FreeRTOS\src/tasks.c **** 			xReturn = pdTRUE;
 3018              		.loc 1 3327 0
 3019 003e 0023     		movs	r3, #0
 3020 0040 2B60     		str	r3, [r5]
 3021              	.LVL294:
3328:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3022              		.loc 1 3328 0
 3023 0042 0124     		movs	r4, #1
 3024              	.LVL295:
 3025 0044 02E0     		b	.L266
 3026              	.LVL296:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 157


 3027              	.L269:
3304:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3028              		.loc 1 3304 0
 3029 0046 0024     		movs	r4, #0
 3030              	.LVL297:
 3031 0048 00E0     		b	.L266
 3032              	.LVL298:
 3033              	.L270:
3316:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3034              		.loc 1 3316 0
 3035 004a 0124     		movs	r4, #1
 3036              	.LVL299:
 3037              	.L266:
 3038              	.LBE54:
3331:Source\bsw\FreeRTOS\src/tasks.c **** 
 3039              		.loc 1 3331 0
 3040 004c FFF7FEFF 		bl	vPortExitCritical
 3041              	.LVL300:
3334:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 3042              		.loc 1 3334 0
 3043 0050 2046     		mov	r0, r4
 3044 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3045              	.LVL301:
 3046              	.L273:
 3047              		.align	2
 3048              	.L272:
 3049 0054 00000000 		.word	.LANCHOR0
 3050              		.cfi_endproc
 3051              	.LFE99:
 3052              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3053              		.section	.text.vTaskMissedYield,"ax",%progbits
 3054              		.align	2
 3055              		.global	vTaskMissedYield
 3056              		.thumb
 3057              		.thumb_func
 3058              		.type	vTaskMissedYield, %function
 3059              	vTaskMissedYield:
 3060              	.LFB100:
3338:Source\bsw\FreeRTOS\src/tasks.c **** 	xYieldPending = pdTRUE;
 3061              		.loc 1 3338 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              		@ link register save eliminated.
3339:Source\bsw\FreeRTOS\src/tasks.c **** }
 3066              		.loc 1 3339 0
 3067 0000 0122     		movs	r2, #1
 3068 0002 024B     		ldr	r3, .L275
 3069 0004 C3F8FC20 		str	r2, [r3, #252]
 3070 0008 7047     		bx	lr
 3071              	.L276:
 3072 000a 00BF     		.align	2
 3073              	.L275:
 3074 000c 00000000 		.word	.LANCHOR0
 3075              		.cfi_endproc
 3076              	.LFE100:
 3077              		.size	vTaskMissedYield, .-vTaskMissedYield
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 158


 3078              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3079              		.align	2
 3080              		.global	uxTaskGetStackHighWaterMark
 3081              		.thumb
 3082              		.thumb_func
 3083              		.type	uxTaskGetStackHighWaterMark, %function
 3084              	uxTaskGetStackHighWaterMark:
 3085              	.LFB105:
3860:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 3086              		.loc 1 3860 0
 3087              		.cfi_startproc
 3088              		@ args = 0, pretend = 0, frame = 0
 3089              		@ frame_needed = 0, uses_anonymous_args = 0
 3090              	.LVL302:
 3091 0000 08B5     		push	{r3, lr}
 3092              		.cfi_def_cfa_offset 8
 3093              		.cfi_offset 3, -8
 3094              		.cfi_offset 14, -4
3865:Source\bsw\FreeRTOS\src/tasks.c **** 
 3095              		.loc 1 3865 0
 3096 0002 0346     		mov	r3, r0
 3097 0004 10B9     		cbnz	r0, .L278
3865:Source\bsw\FreeRTOS\src/tasks.c **** 
 3098              		.loc 1 3865 0 is_stmt 0 discriminator 1
 3099 0006 034B     		ldr	r3, .L280
 3100 0008 D3F8D830 		ldr	r3, [r3, #216]
 3101              	.LVL303:
 3102              	.L278:
3877:Source\bsw\FreeRTOS\src/tasks.c **** 
 3103              		.loc 1 3877 0 is_stmt 1 discriminator 4
 3104 000c 186B     		ldr	r0, [r3, #48]
 3105 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3106              	.LVL304:
3880:Source\bsw\FreeRTOS\src/tasks.c **** 
 3107              		.loc 1 3880 0 discriminator 4
 3108 0012 08BD     		pop	{r3, pc}
 3109              	.L281:
 3110              		.align	2
 3111              	.L280:
 3112 0014 00000000 		.word	.LANCHOR0
 3113              		.cfi_endproc
 3114              	.LFE105:
 3115              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3116              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3117              		.align	2
 3118              		.global	xTaskGetCurrentTaskHandle
 3119              		.thumb
 3120              		.thumb_func
 3121              		.type	xTaskGetCurrentTaskHandle, %function
 3122              	xTaskGetCurrentTaskHandle:
 3123              	.LFB108:
3970:Source\bsw\FreeRTOS\src/tasks.c **** 	TaskHandle_t xReturn;
 3124              		.loc 1 3970 0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128              		@ link register save eliminated.
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 159


3976:Source\bsw\FreeRTOS\src/tasks.c **** 
 3129              		.loc 1 3976 0
 3130 0000 014B     		ldr	r3, .L283
 3131 0002 D3F8D800 		ldr	r0, [r3, #216]
 3132              	.LVL305:
3979:Source\bsw\FreeRTOS\src/tasks.c **** 
 3133              		.loc 1 3979 0
 3134 0006 7047     		bx	lr
 3135              	.L284:
 3136              		.align	2
 3137              	.L283:
 3138 0008 00000000 		.word	.LANCHOR0
 3139              		.cfi_endproc
 3140              	.LFE108:
 3141              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3142              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3143              		.align	2
 3144              		.global	xTaskPriorityInherit
 3145              		.thumb
 3146              		.thumb_func
 3147              		.type	xTaskPriorityInherit, %function
 3148              	xTaskPriorityInherit:
 3149              	.LFB109:
4015:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3150              		.loc 1 4015 0
 3151              		.cfi_startproc
 3152              		@ args = 0, pretend = 0, frame = 0
 3153              		@ frame_needed = 0, uses_anonymous_args = 0
 3154              	.LVL306:
4022:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3155              		.loc 1 4022 0
 3156 0000 0028     		cmp	r0, #0
 3157 0002 52D0     		beq	.L291
4015:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3158              		.loc 1 4015 0
 3159 0004 38B5     		push	{r3, r4, r5, lr}
 3160              		.cfi_def_cfa_offset 16
 3161              		.cfi_offset 3, -16
 3162              		.cfi_offset 4, -12
 3163              		.cfi_offset 5, -8
 3164              		.cfi_offset 14, -4
 3165 0006 0346     		mov	r3, r0
4027:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3166              		.loc 1 4027 0
 3167 0008 C26A     		ldr	r2, [r0, #44]
 3168 000a 2A49     		ldr	r1, .L294
 3169 000c D1F8D810 		ldr	r1, [r1, #216]
 3170 0010 C96A     		ldr	r1, [r1, #44]
 3171 0012 8A42     		cmp	r2, r1
 3172 0014 40D2     		bcs	.L287
4032:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3173              		.loc 1 4032 0
 3174 0016 8169     		ldr	r1, [r0, #24]
 3175 0018 0029     		cmp	r1, #0
 3176 001a 06DB     		blt	.L288
4034:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3177              		.loc 1 4034 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 160


 3178 001c 2549     		ldr	r1, .L294
 3179 001e D1F8D810 		ldr	r1, [r1, #216]
 3180 0022 C96A     		ldr	r1, [r1, #44]
 3181 0024 C1F10501 		rsb	r1, r1, #5
 3182 0028 8161     		str	r1, [r0, #24]
 3183              	.L288:
4043:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3184              		.loc 1 4043 0
 3185 002a 5869     		ldr	r0, [r3, #20]
 3186              	.LVL307:
 3187 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3188 0030 9100     		lsls	r1, r2, #2
 3189 0032 214A     		ldr	r2, .L294+4
 3190 0034 1144     		add	r1, r1, r2
 3191 0036 8842     		cmp	r0, r1
 3192 0038 27D1     		bne	.L289
 3193 003a 1C46     		mov	r4, r3
4045:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 3194              		.loc 1 4045 0
 3195 003c 1D1D     		adds	r5, r3, #4
 3196 003e 2846     		mov	r0, r5
 3197 0040 FFF7FEFF 		bl	uxListRemove
 3198              	.LVL308:
 3199 0044 50B9     		cbnz	r0, .L290
4050:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3200              		.loc 1 4050 0
 3201 0046 E26A     		ldr	r2, [r4, #44]
 3202 0048 0123     		movs	r3, #1
 3203 004a 03FA02F2 		lsl	r2, r3, r2
 3204 004e 1949     		ldr	r1, .L294
 3205 0050 D1F8E430 		ldr	r3, [r1, #228]
 3206 0054 23EA0203 		bic	r3, r3, r2
 3207 0058 C1F8E430 		str	r3, [r1, #228]
 3208              	.L290:
4058:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3209              		.loc 1 4058 0
 3210 005c 1548     		ldr	r0, .L294
 3211 005e D0F8D830 		ldr	r3, [r0, #216]
 3212 0062 DB6A     		ldr	r3, [r3, #44]
 3213 0064 E362     		str	r3, [r4, #44]
4059:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3214              		.loc 1 4059 0
 3215 0066 0124     		movs	r4, #1
 3216              	.LVL309:
 3217 0068 04FA03F1 		lsl	r1, r4, r3
 3218 006c D0F8E420 		ldr	r2, [r0, #228]
 3219 0070 0A43     		orrs	r2, r2, r1
 3220 0072 C0F8E420 		str	r2, [r0, #228]
 3221 0076 3030     		adds	r0, r0, #48
 3222 0078 03EB8303 		add	r3, r3, r3, lsl #2
 3223 007c 9A00     		lsls	r2, r3, #2
 3224 007e 2946     		mov	r1, r5
 3225 0080 1044     		add	r0, r0, r2
 3226 0082 FFF7FEFF 		bl	vListInsertEnd
 3227              	.LVL310:
4070:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3228              		.loc 1 4070 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 161


 3229 0086 2046     		mov	r0, r4
 3230 0088 38BD     		pop	{r3, r4, r5, pc}
 3231              	.LVL311:
 3232              	.L289:
4064:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3233              		.loc 1 4064 0
 3234 008a 0A4A     		ldr	r2, .L294
 3235 008c D2F8D820 		ldr	r2, [r2, #216]
 3236 0090 D26A     		ldr	r2, [r2, #44]
 3237 0092 DA62     		str	r2, [r3, #44]
4070:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3238              		.loc 1 4070 0
 3239 0094 0120     		movs	r0, #1
 3240 0096 38BD     		pop	{r3, r4, r5, pc}
 3241              	.LVL312:
 3242              	.L287:
4074:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3243              		.loc 1 4074 0
 3244 0098 026C     		ldr	r2, [r0, #64]
 3245 009a 064B     		ldr	r3, .L294
 3246 009c D3F8D830 		ldr	r3, [r3, #216]
 3247 00a0 DB6A     		ldr	r3, [r3, #44]
 3248 00a2 9A42     		cmp	r2, r3
 3249 00a4 03D3     		bcc	.L292
4017:Source\bsw\FreeRTOS\src/tasks.c **** 
 3250              		.loc 1 4017 0
 3251 00a6 0020     		movs	r0, #0
 3252              	.LVL313:
 3253 00a8 38BD     		pop	{r3, r4, r5, pc}
 3254              	.LVL314:
 3255              	.L291:
 3256              		.cfi_def_cfa_offset 0
 3257              		.cfi_restore 3
 3258              		.cfi_restore 4
 3259              		.cfi_restore 5
 3260              		.cfi_restore 14
 3261 00aa 0020     		movs	r0, #0
 3262              	.LVL315:
4097:Source\bsw\FreeRTOS\src/tasks.c **** 
 3263              		.loc 1 4097 0
 3264 00ac 7047     		bx	lr
 3265              	.LVL316:
 3266              	.L292:
 3267              		.cfi_def_cfa_offset 16
 3268              		.cfi_offset 3, -16
 3269              		.cfi_offset 4, -12
 3270              		.cfi_offset 5, -8
 3271              		.cfi_offset 14, -4
4083:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3272              		.loc 1 4083 0
 3273 00ae 0120     		movs	r0, #1
 3274              	.LVL317:
4097:Source\bsw\FreeRTOS\src/tasks.c **** 
 3275              		.loc 1 4097 0
 3276 00b0 38BD     		pop	{r3, r4, r5, pc}
 3277              	.L295:
 3278 00b2 00BF     		.align	2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 162


 3279              	.L294:
 3280 00b4 00000000 		.word	.LANCHOR0
 3281 00b8 30000000 		.word	.LANCHOR0+48
 3282              		.cfi_endproc
 3283              	.LFE109:
 3284              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3285              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3286              		.align	2
 3287              		.global	xTaskPriorityDisinherit
 3288              		.thumb
 3289              		.thumb_func
 3290              		.type	xTaskPriorityDisinherit, %function
 3291              	xTaskPriorityDisinherit:
 3292              	.LFB110:
4105:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3293              		.loc 1 4105 0
 3294              		.cfi_startproc
 3295              		@ args = 0, pretend = 0, frame = 0
 3296              		@ frame_needed = 0, uses_anonymous_args = 0
 3297              	.LVL318:
4109:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3298              		.loc 1 4109 0
 3299 0000 0028     		cmp	r0, #0
 3300 0002 38D0     		beq	.L299
4105:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3301              		.loc 1 4105 0
 3302 0004 38B5     		push	{r3, r4, r5, lr}
 3303              		.cfi_def_cfa_offset 16
 3304              		.cfi_offset 3, -16
 3305              		.cfi_offset 4, -12
 3306              		.cfi_offset 5, -8
 3307              		.cfi_offset 14, -4
 3308 0006 0346     		mov	r3, r0
4117:Source\bsw\FreeRTOS\src/tasks.c **** 
 3309              		.loc 1 4117 0
 3310 0008 426C     		ldr	r2, [r0, #68]
 3311 000a 013A     		subs	r2, r2, #1
 3312 000c 4264     		str	r2, [r0, #68]
4121:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3313              		.loc 1 4121 0
 3314 000e C06A     		ldr	r0, [r0, #44]
 3315              	.LVL319:
 3316 0010 196C     		ldr	r1, [r3, #64]
 3317 0012 8842     		cmp	r0, r1
 3318 0014 31D0     		beq	.L300
4124:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3319              		.loc 1 4124 0
 3320 0016 92BB     		cbnz	r2, .L301
 3321 0018 1C46     		mov	r4, r3
4131:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 3322              		.loc 1 4131 0
 3323 001a 1D1D     		adds	r5, r3, #4
 3324 001c 2846     		mov	r0, r5
 3325 001e FFF7FEFF 		bl	uxListRemove
 3326              	.LVL320:
 3327 0022 80B9     		cbnz	r0, .L298
4133:Source\bsw\FreeRTOS\src/tasks.c **** 					}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 163


 3328              		.loc 1 4133 0
 3329 0024 E26A     		ldr	r2, [r4, #44]
 3330 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3331 002a 8B00     		lsls	r3, r1, #2
 3332 002c 1549     		ldr	r1, .L303
 3333 002e 0B44     		add	r3, r3, r1
 3334 0030 1B6B     		ldr	r3, [r3, #48]
 3335 0032 43B9     		cbnz	r3, .L298
4133:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3336              		.loc 1 4133 0 is_stmt 0 discriminator 1
 3337 0034 0123     		movs	r3, #1
 3338 0036 03FA02F2 		lsl	r2, r3, r2
 3339 003a D1F8E430 		ldr	r3, [r1, #228]
 3340 003e 23EA0202 		bic	r2, r3, r2
 3341 0042 C1F8E420 		str	r2, [r1, #228]
 3342              	.L298:
4143:Source\bsw\FreeRTOS\src/tasks.c **** 
 3343              		.loc 1 4143 0 is_stmt 1
 3344 0046 236C     		ldr	r3, [r4, #64]
 3345 0048 E362     		str	r3, [r4, #44]
4148:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3346              		.loc 1 4148 0
 3347 004a C3F10502 		rsb	r2, r3, #5
 3348 004e A261     		str	r2, [r4, #24]
4149:Source\bsw\FreeRTOS\src/tasks.c **** 
 3349              		.loc 1 4149 0
 3350 0050 0124     		movs	r4, #1
 3351              	.LVL321:
 3352 0052 04FA03F1 		lsl	r1, r4, r3
 3353 0056 0B48     		ldr	r0, .L303
 3354 0058 D0F8E420 		ldr	r2, [r0, #228]
 3355 005c 0A43     		orrs	r2, r2, r1
 3356 005e C0F8E420 		str	r2, [r0, #228]
 3357 0062 3030     		adds	r0, r0, #48
 3358 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3359 0068 9A00     		lsls	r2, r3, #2
 3360 006a 2946     		mov	r1, r5
 3361 006c 1044     		add	r0, r0, r2
 3362 006e FFF7FEFF 		bl	vListInsertEnd
 3363              	.LVL322:
4159:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3364              		.loc 1 4159 0
 3365 0072 2046     		mov	r0, r4
 3366 0074 38BD     		pop	{r3, r4, r5, pc}
 3367              	.LVL323:
 3368              	.L299:
 3369              		.cfi_def_cfa_offset 0
 3370              		.cfi_restore 3
 3371              		.cfi_restore 4
 3372              		.cfi_restore 5
 3373              		.cfi_restore 14
4107:Source\bsw\FreeRTOS\src/tasks.c **** 
 3374              		.loc 1 4107 0
 3375 0076 0020     		movs	r0, #0
 3376              	.LVL324:
4177:Source\bsw\FreeRTOS\src/tasks.c **** 
 3377              		.loc 1 4177 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 164


 3378 0078 7047     		bx	lr
 3379              	.LVL325:
 3380              	.L300:
 3381              		.cfi_def_cfa_offset 16
 3382              		.cfi_offset 3, -16
 3383              		.cfi_offset 4, -12
 3384              		.cfi_offset 5, -8
 3385              		.cfi_offset 14, -4
4107:Source\bsw\FreeRTOS\src/tasks.c **** 
 3386              		.loc 1 4107 0
 3387 007a 0020     		movs	r0, #0
 3388 007c 38BD     		pop	{r3, r4, r5, pc}
 3389              	.LVL326:
 3390              	.L301:
 3391 007e 0020     		movs	r0, #0
 3392              	.LVL327:
4177:Source\bsw\FreeRTOS\src/tasks.c **** 
 3393              		.loc 1 4177 0
 3394 0080 38BD     		pop	{r3, r4, r5, pc}
 3395              	.LVL328:
 3396              	.L304:
 3397 0082 00BF     		.align	2
 3398              	.L303:
 3399 0084 00000000 		.word	.LANCHOR0
 3400              		.cfi_endproc
 3401              	.LFE110:
 3402              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3403              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3404              		.align	2
 3405              		.global	vTaskPriorityDisinheritAfterTimeout
 3406              		.thumb
 3407              		.thumb_func
 3408              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3409              	vTaskPriorityDisinheritAfterTimeout:
 3410              	.LFB111:
4185:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3411              		.loc 1 4185 0
 3412              		.cfi_startproc
 3413              		@ args = 0, pretend = 0, frame = 0
 3414              		@ frame_needed = 0, uses_anonymous_args = 0
 3415              	.LVL329:
4190:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3416              		.loc 1 4190 0
 3417 0000 0028     		cmp	r0, #0
 3418 0002 3ED0     		beq	.L311
4185:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3419              		.loc 1 4185 0
 3420 0004 38B5     		push	{r3, r4, r5, lr}
 3421              		.cfi_def_cfa_offset 16
 3422              		.cfi_offset 3, -16
 3423              		.cfi_offset 4, -12
 3424              		.cfi_offset 5, -8
 3425              		.cfi_offset 14, -4
 3426 0006 0346     		mov	r3, r0
4200:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3427              		.loc 1 4200 0
 3428 0008 026C     		ldr	r2, [r0, #64]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 165


 3429 000a 8A42     		cmp	r2, r1
 3430 000c 00D2     		bcs	.L307
4202:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3431              		.loc 1 4202 0
 3432 000e 0A46     		mov	r2, r1
 3433              	.L307:
 3434              	.LVL330:
4210:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3435              		.loc 1 4210 0
 3436 0010 D96A     		ldr	r1, [r3, #44]
 3437              	.LVL331:
 3438 0012 8A42     		cmp	r2, r1
 3439 0014 34D0     		beq	.L305
4216:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3440              		.loc 1 4216 0
 3441 0016 586C     		ldr	r0, [r3, #68]
 3442              	.LVL332:
 3443 0018 0128     		cmp	r0, #1
 3444 001a 31D1     		bne	.L305
 3445              	.LVL333:
4228:Source\bsw\FreeRTOS\src/tasks.c **** 
 3446              		.loc 1 4228 0
 3447 001c DA62     		str	r2, [r3, #44]
4232:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 3448              		.loc 1 4232 0
 3449 001e 9869     		ldr	r0, [r3, #24]
 3450 0020 0028     		cmp	r0, #0
 3451 0022 02DB     		blt	.L308
4234:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3452              		.loc 1 4234 0
 3453 0024 C2F10502 		rsb	r2, r2, #5
 3454              	.LVL334:
 3455 0028 9A61     		str	r2, [r3, #24]
 3456              	.L308:
4247:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 3457              		.loc 1 4247 0
 3458 002a 5869     		ldr	r0, [r3, #20]
 3459 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3460              	.LVL335:
 3461 0030 8A00     		lsls	r2, r1, #2
 3462 0032 1449     		ldr	r1, .L312
 3463 0034 0A44     		add	r2, r2, r1
 3464 0036 9042     		cmp	r0, r2
 3465 0038 22D1     		bne	.L305
 3466 003a 1C46     		mov	r4, r3
4249:Source\bsw\FreeRTOS\src/tasks.c **** 						{
 3467              		.loc 1 4249 0
 3468 003c 1D1D     		adds	r5, r3, #4
 3469 003e 2846     		mov	r0, r5
 3470 0040 FFF7FEFF 		bl	uxListRemove
 3471              	.LVL336:
 3472 0044 50B9     		cbnz	r0, .L309
4254:Source\bsw\FreeRTOS\src/tasks.c **** 						}
 3473              		.loc 1 4254 0
 3474 0046 E26A     		ldr	r2, [r4, #44]
 3475 0048 0123     		movs	r3, #1
 3476 004a 03FA02F2 		lsl	r2, r3, r2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 166


 3477 004e 0E49     		ldr	r1, .L312+4
 3478 0050 D1F8E430 		ldr	r3, [r1, #228]
 3479 0054 23EA0203 		bic	r3, r3, r2
 3480 0058 C1F8E430 		str	r3, [r1, #228]
 3481              	.L309:
4261:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3482              		.loc 1 4261 0
 3483 005c E36A     		ldr	r3, [r4, #44]
 3484 005e 0122     		movs	r2, #1
 3485 0060 02FA03F1 		lsl	r1, r2, r3
 3486 0064 0848     		ldr	r0, .L312+4
 3487 0066 D0F8E420 		ldr	r2, [r0, #228]
 3488 006a 0A43     		orrs	r2, r2, r1
 3489 006c C0F8E420 		str	r2, [r0, #228]
 3490 0070 3030     		adds	r0, r0, #48
 3491 0072 03EB8303 		add	r3, r3, r3, lsl #2
 3492 0076 9A00     		lsls	r2, r3, #2
 3493 0078 2946     		mov	r1, r5
 3494 007a 1044     		add	r0, r0, r2
 3495 007c FFF7FEFF 		bl	vListInsertEnd
 3496              	.LVL337:
 3497              	.L305:
 3498 0080 38BD     		pop	{r3, r4, r5, pc}
 3499              	.LVL338:
 3500              	.L311:
 3501              		.cfi_def_cfa_offset 0
 3502              		.cfi_restore 3
 3503              		.cfi_restore 4
 3504              		.cfi_restore 5
 3505              		.cfi_restore 14
 3506 0082 7047     		bx	lr
 3507              	.L313:
 3508              		.align	2
 3509              	.L312:
 3510 0084 30000000 		.word	.LANCHOR0+48
 3511 0088 00000000 		.word	.LANCHOR0
 3512              		.cfi_endproc
 3513              	.LFE111:
 3514              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3515              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3516              		.align	2
 3517              		.global	uxTaskResetEventItemValue
 3518              		.thumb
 3519              		.thumb_func
 3520              		.type	uxTaskResetEventItemValue, %function
 3521              	uxTaskResetEventItemValue:
 3522              	.LFB112:
4603:Source\bsw\FreeRTOS\src/tasks.c **** TickType_t uxReturn;
 3523              		.loc 1 4603 0
 3524              		.cfi_startproc
 3525              		@ args = 0, pretend = 0, frame = 0
 3526              		@ frame_needed = 0, uses_anonymous_args = 0
 3527              		@ link register save eliminated.
4606:Source\bsw\FreeRTOS\src/tasks.c **** 
 3528              		.loc 1 4606 0
 3529 0000 064B     		ldr	r3, .L315
 3530 0002 D3F8D820 		ldr	r2, [r3, #216]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 167


 3531 0006 9069     		ldr	r0, [r2, #24]
 3532              	.LVL339:
4610:Source\bsw\FreeRTOS\src/tasks.c **** 
 3533              		.loc 1 4610 0
 3534 0008 D3F8D820 		ldr	r2, [r3, #216]
 3535 000c D3F8D830 		ldr	r3, [r3, #216]
 3536 0010 DB6A     		ldr	r3, [r3, #44]
 3537 0012 C3F10503 		rsb	r3, r3, #5
 3538 0016 9361     		str	r3, [r2, #24]
4613:Source\bsw\FreeRTOS\src/tasks.c **** /*-----------------------------------------------------------*/
 3539              		.loc 1 4613 0
 3540 0018 7047     		bx	lr
 3541              	.L316:
 3542 001a 00BF     		.align	2
 3543              	.L315:
 3544 001c 00000000 		.word	.LANCHOR0
 3545              		.cfi_endproc
 3546              	.LFE112:
 3547              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3548              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3549              		.align	2
 3550              		.global	pvTaskIncrementMutexHeldCount
 3551              		.thumb
 3552              		.thumb_func
 3553              		.type	pvTaskIncrementMutexHeldCount, %function
 3554              	pvTaskIncrementMutexHeldCount:
 3555              	.LFB113:
4619:Source\bsw\FreeRTOS\src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3556              		.loc 1 4619 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              		@ link register save eliminated.
4622:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3561              		.loc 1 4622 0
 3562 0000 064B     		ldr	r3, .L319
 3563 0002 D3F8D830 		ldr	r3, [r3, #216]
 3564 0006 2BB1     		cbz	r3, .L318
4624:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3565              		.loc 1 4624 0
 3566 0008 044B     		ldr	r3, .L319
 3567 000a D3F8D820 		ldr	r2, [r3, #216]
 3568 000e 536C     		ldr	r3, [r2, #68]
 3569 0010 0133     		adds	r3, r3, #1
 3570 0012 5364     		str	r3, [r2, #68]
 3571              	.L318:
4627:Source\bsw\FreeRTOS\src/tasks.c **** 	}
 3572              		.loc 1 4627 0
 3573 0014 014B     		ldr	r3, .L319
 3574 0016 D3F8D800 		ldr	r0, [r3, #216]
4628:Source\bsw\FreeRTOS\src/tasks.c **** 
 3575              		.loc 1 4628 0
 3576 001a 7047     		bx	lr
 3577              	.L320:
 3578              		.align	2
 3579              	.L319:
 3580 001c 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 168


 3581              		.cfi_endproc
 3582              	.LFE113:
 3583              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3584              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3585              		.align	2
 3586              		.global	ulTaskNotifyTake
 3587              		.thumb
 3588              		.thumb_func
 3589              		.type	ulTaskNotifyTake, %function
 3590              	ulTaskNotifyTake:
 3591              	.LFB114:
4636:Source\bsw\FreeRTOS\src/tasks.c **** 	uint32_t ulReturn;
 3592              		.loc 1 4636 0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              	.LVL340:
 3597 0000 38B5     		push	{r3, r4, r5, lr}
 3598              		.cfi_def_cfa_offset 16
 3599              		.cfi_offset 3, -16
 3600              		.cfi_offset 4, -12
 3601              		.cfi_offset 5, -8
 3602              		.cfi_offset 14, -4
 3603 0002 0546     		mov	r5, r0
 3604 0004 0C46     		mov	r4, r1
4639:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3605              		.loc 1 4639 0
 3606 0006 FFF7FEFF 		bl	vPortEnterCritical
 3607              	.LVL341:
4642:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3608              		.loc 1 4642 0
 3609 000a 1B4B     		ldr	r3, .L326
 3610 000c D3F8D830 		ldr	r3, [r3, #216]
 3611 0010 9B6C     		ldr	r3, [r3, #72]
 3612 0012 93B9     		cbnz	r3, .L322
4645:Source\bsw\FreeRTOS\src/tasks.c **** 
 3613              		.loc 1 4645 0
 3614 0014 184B     		ldr	r3, .L326
 3615 0016 D3F8D830 		ldr	r3, [r3, #216]
 3616 001a 0122     		movs	r2, #1
 3617 001c 83F84C20 		strb	r2, [r3, #76]
4647:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3618              		.loc 1 4647 0
 3619 0020 5CB1     		cbz	r4, .L322
4649:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3620              		.loc 1 4649 0
 3621 0022 1146     		mov	r1, r2
 3622 0024 2046     		mov	r0, r4
 3623 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3624              	.LVL342:
4656:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3625              		.loc 1 4656 0
 3626 002a 4FF08052 		mov	r2, #268435456
 3627 002e 134B     		ldr	r3, .L326+4
 3628 0030 1A60     		str	r2, [r3]
 3629              		.syntax unified
 3630              	@ 4656 "Source\bsw\FreeRTOS\src\tasks.c" 1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 169


 3631 0032 BFF34F8F 		dsb
 3632              	@ 0 "" 2
 3633              	@ 4656 "Source\bsw\FreeRTOS\src\tasks.c" 1
 3634 0036 BFF36F8F 		isb
 3635              	@ 0 "" 2
 3636              		.thumb
 3637              		.syntax unified
 3638              	.L322:
4668:Source\bsw\FreeRTOS\src/tasks.c **** 
 3639              		.loc 1 4668 0
 3640 003a FFF7FEFF 		bl	vPortExitCritical
 3641              	.LVL343:
4670:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3642              		.loc 1 4670 0
 3643 003e FFF7FEFF 		bl	vPortEnterCritical
 3644              	.LVL344:
4673:Source\bsw\FreeRTOS\src/tasks.c **** 
 3645              		.loc 1 4673 0
 3646 0042 0D4B     		ldr	r3, .L326
 3647 0044 D3F8D830 		ldr	r3, [r3, #216]
 3648 0048 9C6C     		ldr	r4, [r3, #72]
 3649              	.LVL345:
4675:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3650              		.loc 1 4675 0
 3651 004a 5CB1     		cbz	r4, .L323
4677:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3652              		.loc 1 4677 0
 3653 004c 2DB1     		cbz	r5, .L324
4679:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3654              		.loc 1 4679 0
 3655 004e 0A4B     		ldr	r3, .L326
 3656 0050 D3F8D830 		ldr	r3, [r3, #216]
 3657 0054 0022     		movs	r2, #0
 3658 0056 9A64     		str	r2, [r3, #72]
 3659 0058 04E0     		b	.L323
 3660              	.L324:
4683:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3661              		.loc 1 4683 0
 3662 005a 074B     		ldr	r3, .L326
 3663 005c D3F8D830 		ldr	r3, [r3, #216]
 3664 0060 621E     		subs	r2, r4, #1
 3665 0062 9A64     		str	r2, [r3, #72]
 3666              	.L323:
4691:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3667              		.loc 1 4691 0
 3668 0064 044B     		ldr	r3, .L326
 3669 0066 D3F8D830 		ldr	r3, [r3, #216]
 3670 006a 0022     		movs	r2, #0
 3671 006c 83F84C20 		strb	r2, [r3, #76]
4693:Source\bsw\FreeRTOS\src/tasks.c **** 
 3672              		.loc 1 4693 0
 3673 0070 FFF7FEFF 		bl	vPortExitCritical
 3674              	.LVL346:
4696:Source\bsw\FreeRTOS\src/tasks.c **** 
 3675              		.loc 1 4696 0
 3676 0074 2046     		mov	r0, r4
 3677 0076 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 170


 3678              	.LVL347:
 3679              	.L327:
 3680              		.align	2
 3681              	.L326:
 3682 0078 00000000 		.word	.LANCHOR0
 3683 007c 04ED00E0 		.word	-536810236
 3684              		.cfi_endproc
 3685              	.LFE114:
 3686              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3687              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3688              		.align	2
 3689              		.global	xTaskNotifyWait
 3690              		.thumb
 3691              		.thumb_func
 3692              		.type	xTaskNotifyWait, %function
 3693              	xTaskNotifyWait:
 3694              	.LFB115:
4704:Source\bsw\FreeRTOS\src/tasks.c **** 	BaseType_t xReturn;
 3695              		.loc 1 4704 0
 3696              		.cfi_startproc
 3697              		@ args = 0, pretend = 0, frame = 0
 3698              		@ frame_needed = 0, uses_anonymous_args = 0
 3699              	.LVL348:
 3700 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3701              		.cfi_def_cfa_offset 24
 3702              		.cfi_offset 3, -24
 3703              		.cfi_offset 4, -20
 3704              		.cfi_offset 5, -16
 3705              		.cfi_offset 6, -12
 3706              		.cfi_offset 7, -8
 3707              		.cfi_offset 14, -4
 3708 0002 0746     		mov	r7, r0
 3709 0004 0D46     		mov	r5, r1
 3710 0006 1446     		mov	r4, r2
 3711 0008 1E46     		mov	r6, r3
4707:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3712              		.loc 1 4707 0
 3713 000a FFF7FEFF 		bl	vPortEnterCritical
 3714              	.LVL349:
4710:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3715              		.loc 1 4710 0
 3716 000e 234B     		ldr	r3, .L334
 3717 0010 D3F8D830 		ldr	r3, [r3, #216]
 3718 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3719 0018 DBB2     		uxtb	r3, r3
 3720 001a 022B     		cmp	r3, #2
 3721 001c 18D0     		beq	.L329
4715:Source\bsw\FreeRTOS\src/tasks.c **** 
 3722              		.loc 1 4715 0
 3723 001e 1F4B     		ldr	r3, .L334
 3724 0020 D3F8D820 		ldr	r2, [r3, #216]
 3725 0024 906C     		ldr	r0, [r2, #72]
 3726 0026 20EA0700 		bic	r0, r0, r7
 3727 002a 9064     		str	r0, [r2, #72]
4718:Source\bsw\FreeRTOS\src/tasks.c **** 
 3728              		.loc 1 4718 0
 3729 002c D3F8D830 		ldr	r3, [r3, #216]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 171


 3730 0030 0122     		movs	r2, #1
 3731 0032 83F84C20 		strb	r2, [r3, #76]
4720:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3732              		.loc 1 4720 0
 3733 0036 5EB1     		cbz	r6, .L329
4722:Source\bsw\FreeRTOS\src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3734              		.loc 1 4722 0
 3735 0038 1146     		mov	r1, r2
 3736 003a 3046     		mov	r0, r6
 3737 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3738              	.LVL350:
4729:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3739              		.loc 1 4729 0
 3740 0040 4FF08052 		mov	r2, #268435456
 3741 0044 164B     		ldr	r3, .L334+4
 3742 0046 1A60     		str	r2, [r3]
 3743              		.syntax unified
 3744              	@ 4729 "Source\bsw\FreeRTOS\src\tasks.c" 1
 3745 0048 BFF34F8F 		dsb
 3746              	@ 0 "" 2
 3747              	@ 4729 "Source\bsw\FreeRTOS\src\tasks.c" 1
 3748 004c BFF36F8F 		isb
 3749              	@ 0 "" 2
 3750              		.thumb
 3751              		.syntax unified
 3752              	.L329:
4741:Source\bsw\FreeRTOS\src/tasks.c **** 
 3753              		.loc 1 4741 0
 3754 0050 FFF7FEFF 		bl	vPortExitCritical
 3755              	.LVL351:
4743:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3756              		.loc 1 4743 0
 3757 0054 FFF7FEFF 		bl	vPortEnterCritical
 3758              	.LVL352:
4747:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3759              		.loc 1 4747 0
 3760 0058 24B1     		cbz	r4, .L330
4751:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3761              		.loc 1 4751 0
 3762 005a 104B     		ldr	r3, .L334
 3763 005c D3F8D830 		ldr	r3, [r3, #216]
 3764 0060 9B6C     		ldr	r3, [r3, #72]
 3765 0062 2360     		str	r3, [r4]
 3766              	.L330:
4758:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3767              		.loc 1 4758 0
 3768 0064 0D4B     		ldr	r3, .L334
 3769 0066 D3F8D830 		ldr	r3, [r3, #216]
 3770 006a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3771 006e DBB2     		uxtb	r3, r3
 3772 0070 022B     		cmp	r3, #2
 3773 0072 08D1     		bne	.L332
4767:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdTRUE;
 3774              		.loc 1 4767 0
 3775 0074 094B     		ldr	r3, .L334
 3776 0076 D3F8D820 		ldr	r2, [r3, #216]
 3777 007a 936C     		ldr	r3, [r2, #72]
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 172


 3778 007c 23EA0505 		bic	r5, r3, r5
 3779              	.LVL353:
 3780 0080 9564     		str	r5, [r2, #72]
 3781              	.LVL354:
4768:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3782              		.loc 1 4768 0
 3783 0082 0124     		movs	r4, #1
 3784              	.LVL355:
 3785 0084 00E0     		b	.L331
 3786              	.LVL356:
 3787              	.L332:
4761:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3788              		.loc 1 4761 0
 3789 0086 0024     		movs	r4, #0
 3790              	.LVL357:
 3791              	.L331:
4771:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 3792              		.loc 1 4771 0
 3793 0088 044B     		ldr	r3, .L334
 3794 008a D3F8D830 		ldr	r3, [r3, #216]
 3795 008e 0022     		movs	r2, #0
 3796 0090 83F84C20 		strb	r2, [r3, #76]
4773:Source\bsw\FreeRTOS\src/tasks.c **** 
 3797              		.loc 1 4773 0
 3798 0094 FFF7FEFF 		bl	vPortExitCritical
 3799              	.LVL358:
4776:Source\bsw\FreeRTOS\src/tasks.c **** 
 3800              		.loc 1 4776 0
 3801 0098 2046     		mov	r0, r4
 3802 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3803              	.LVL359:
 3804              	.L335:
 3805              		.align	2
 3806              	.L334:
 3807 009c 00000000 		.word	.LANCHOR0
 3808 00a0 04ED00E0 		.word	-536810236
 3809              		.cfi_endproc
 3810              	.LFE115:
 3811              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3812              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3813              		.align	2
 3814              		.global	xTaskGenericNotify
 3815              		.thumb
 3816              		.thumb_func
 3817              		.type	xTaskGenericNotify, %function
 3818              	xTaskGenericNotify:
 3819              	.LFB116:
4784:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 3820              		.loc 1 4784 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 0
 3823              		@ frame_needed = 0, uses_anonymous_args = 0
 3824              	.LVL360:
 3825 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3826              		.cfi_def_cfa_offset 24
 3827              		.cfi_offset 3, -24
 3828              		.cfi_offset 4, -20
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 173


 3829              		.cfi_offset 5, -16
 3830              		.cfi_offset 6, -12
 3831              		.cfi_offset 7, -8
 3832              		.cfi_offset 14, -4
 3833 0002 0446     		mov	r4, r0
 3834 0004 0F46     		mov	r7, r1
 3835 0006 1546     		mov	r5, r2
 3836 0008 1E46     		mov	r6, r3
 3837              	.LVL361:
4792:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 3838              		.loc 1 4792 0
 3839 000a FFF7FEFF 		bl	vPortEnterCritical
 3840              	.LVL362:
4794:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3841              		.loc 1 4794 0
 3842 000e 0EB1     		cbz	r6, .L337
4796:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 3843              		.loc 1 4796 0
 3844 0010 A36C     		ldr	r3, [r4, #72]
 3845 0012 3360     		str	r3, [r6]
 3846              	.L337:
4799:Source\bsw\FreeRTOS\src/tasks.c **** 
 3847              		.loc 1 4799 0
 3848 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3849 0018 DBB2     		uxtb	r3, r3
 3850              	.LVL363:
4801:Source\bsw\FreeRTOS\src/tasks.c **** 
 3851              		.loc 1 4801 0
 3852 001a 0222     		movs	r2, #2
 3853 001c 84F84C20 		strb	r2, [r4, #76]
4803:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3854              		.loc 1 4803 0
 3855 0020 6A1E     		subs	r2, r5, #1
 3856 0022 032A     		cmp	r2, #3
 3857 0024 15D8     		bhi	.L345
 3858 0026 DFE802F0 		tbb	[pc, r2]
 3859              	.L340:
 3860 002a 02       		.byte	(.L339-.L340)/2
 3861 002b 07       		.byte	(.L341-.L340)/2
 3862 002c 0C       		.byte	(.L342-.L340)/2
 3863 002d 0F       		.byte	(.L343-.L340)/2
 3864              		.p2align 1
 3865              	.L339:
4806:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 3866              		.loc 1 4806 0
 3867 002e A26C     		ldr	r2, [r4, #72]
 3868 0030 1743     		orrs	r7, r7, r2
 3869              	.LVL364:
 3870 0032 A764     		str	r7, [r4, #72]
4786:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3871              		.loc 1 4786 0
 3872 0034 0125     		movs	r5, #1
4807:Source\bsw\FreeRTOS\src/tasks.c **** 
 3873              		.loc 1 4807 0
 3874 0036 0FE0     		b	.L338
 3875              	.LVL365:
 3876              	.L341:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 174


4810:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 3877              		.loc 1 4810 0
 3878 0038 A26C     		ldr	r2, [r4, #72]
 3879 003a 0132     		adds	r2, r2, #1
 3880 003c A264     		str	r2, [r4, #72]
4786:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3881              		.loc 1 4786 0
 3882 003e 0125     		movs	r5, #1
4811:Source\bsw\FreeRTOS\src/tasks.c **** 
 3883              		.loc 1 4811 0
 3884 0040 0AE0     		b	.L338
 3885              	.L342:
4814:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 3886              		.loc 1 4814 0
 3887 0042 A764     		str	r7, [r4, #72]
4786:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3888              		.loc 1 4786 0
 3889 0044 0125     		movs	r5, #1
4815:Source\bsw\FreeRTOS\src/tasks.c **** 
 3890              		.loc 1 4815 0
 3891 0046 07E0     		b	.L338
 3892              	.L343:
4818:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 3893              		.loc 1 4818 0
 3894 0048 022B     		cmp	r3, #2
 3895 004a 04D0     		beq	.L346
4820:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3896              		.loc 1 4820 0
 3897 004c A764     		str	r7, [r4, #72]
4786:Source\bsw\FreeRTOS\src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3898              		.loc 1 4786 0
 3899 004e 0125     		movs	r5, #1
 3900 0050 02E0     		b	.L338
 3901              	.L345:
 3902 0052 0125     		movs	r5, #1
 3903 0054 00E0     		b	.L338
 3904              	.L346:
4825:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 3905              		.loc 1 4825 0
 3906 0056 0025     		movs	r5, #0
 3907              	.LVL366:
 3908              	.L338:
4847:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 3909              		.loc 1 4847 0
 3910 0058 012B     		cmp	r3, #1
 3911 005a 24D1     		bne	.L344
4849:Source\bsw\FreeRTOS\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3912              		.loc 1 4849 0
 3913 005c 271D     		adds	r7, r4, #4
 3914 005e 3846     		mov	r0, r7
 3915 0060 FFF7FEFF 		bl	uxListRemove
 3916              	.LVL367:
4850:Source\bsw\FreeRTOS\src/tasks.c **** 
 3917              		.loc 1 4850 0
 3918 0064 E36A     		ldr	r3, [r4, #44]
 3919 0066 0122     		movs	r2, #1
 3920 0068 02FA03F1 		lsl	r1, r2, r3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 175


 3921 006c 104E     		ldr	r6, .L348
 3922              	.LVL368:
 3923 006e D6F8E420 		ldr	r2, [r6, #228]
 3924 0072 0A43     		orrs	r2, r2, r1
 3925 0074 C6F8E420 		str	r2, [r6, #228]
 3926 0078 06F13000 		add	r0, r6, #48
 3927 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3928 0080 9A00     		lsls	r2, r3, #2
 3929 0082 3946     		mov	r1, r7
 3930 0084 1044     		add	r0, r0, r2
 3931 0086 FFF7FEFF 		bl	vListInsertEnd
 3932              	.LVL369:
4871:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 3933              		.loc 1 4871 0
 3934 008a E26A     		ldr	r2, [r4, #44]
 3935 008c D6F8D830 		ldr	r3, [r6, #216]
 3936 0090 DB6A     		ldr	r3, [r3, #44]
 3937 0092 9A42     		cmp	r2, r3
 3938 0094 07D9     		bls	.L344
4875:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 3939              		.loc 1 4875 0
 3940 0096 4FF08052 		mov	r2, #268435456
 3941 009a 064B     		ldr	r3, .L348+4
 3942 009c 1A60     		str	r2, [r3]
 3943              		.syntax unified
 3944              	@ 4875 "Source\bsw\FreeRTOS\src\tasks.c" 1
 3945 009e BFF34F8F 		dsb
 3946              	@ 0 "" 2
 3947              	@ 4875 "Source\bsw\FreeRTOS\src\tasks.c" 1
 3948 00a2 BFF36F8F 		isb
 3949              	@ 0 "" 2
 3950              		.thumb
 3951              		.syntax unified
 3952              	.L344:
4887:Source\bsw\FreeRTOS\src/tasks.c **** 
 3953              		.loc 1 4887 0
 3954 00a6 FFF7FEFF 		bl	vPortExitCritical
 3955              	.LVL370:
4890:Source\bsw\FreeRTOS\src/tasks.c **** 
 3956              		.loc 1 4890 0
 3957 00aa 2846     		mov	r0, r5
 3958 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3959              	.LVL371:
 3960              	.L349:
 3961 00ae 00BF     		.align	2
 3962              	.L348:
 3963 00b0 00000000 		.word	.LANCHOR0
 3964 00b4 04ED00E0 		.word	-536810236
 3965              		.cfi_endproc
 3966              	.LFE116:
 3967              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3968              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3969              		.align	2
 3970              		.global	xTaskGenericNotifyFromISR
 3971              		.thumb
 3972              		.thumb_func
 3973              		.type	xTaskGenericNotifyFromISR, %function
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 176


 3974              	xTaskGenericNotifyFromISR:
 3975              	.LFB117:
4898:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 3976              		.loc 1 4898 0
 3977              		.cfi_startproc
 3978              		@ args = 4, pretend = 0, frame = 0
 3979              		@ frame_needed = 0, uses_anonymous_args = 0
 3980              	.LVL372:
 3981 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3982              		.cfi_def_cfa_offset 24
 3983              		.cfi_offset 3, -24
 3984              		.cfi_offset 4, -20
 3985              		.cfi_offset 5, -16
 3986              		.cfi_offset 6, -12
 3987              		.cfi_offset 7, -8
 3988              		.cfi_offset 14, -4
 3989              	.LVL373:
 3990              	.LBB55:
 3991              	.LBB56:
 213:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 3992              		.loc 2 213 0
 3993              		.syntax unified
 3994              	@ 213 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 3995 0002 EFF31185 			mrs r5, basepri											
 3996 0006 4FF0A004 		mov r4, #160												
 3997 000a 84F31188 		msr basepri, r4											
 3998 000e BFF36F8F 		isb														
 3999 0012 BFF34F8F 		dsb														
 4000              	
 4001              	@ 0 "" 2
 4002              		.thumb
 4003              		.syntax unified
 4004              	.LBE56:
 4005              	.LBE55:
4928:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 4006              		.loc 1 4928 0
 4007 0016 0BB1     		cbz	r3, .L351
4930:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 4008              		.loc 1 4930 0
 4009 0018 846C     		ldr	r4, [r0, #72]
 4010 001a 1C60     		str	r4, [r3]
 4011              	.L351:
4933:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4012              		.loc 1 4933 0
 4013 001c 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4014              	.LVL374:
 4015 0020 DBB2     		uxtb	r3, r3
 4016              	.LVL375:
4934:Source\bsw\FreeRTOS\src/tasks.c **** 
 4017              		.loc 1 4934 0
 4018 0022 0224     		movs	r4, #2
 4019 0024 80F84C40 		strb	r4, [r0, #76]
4936:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 4020              		.loc 1 4936 0
 4021 0028 013A     		subs	r2, r2, #1
 4022              	.LVL376:
 4023 002a 032A     		cmp	r2, #3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 177


 4024 002c 15D8     		bhi	.L362
 4025 002e DFE802F0 		tbb	[pc, r2]
 4026              	.L354:
 4027 0032 02       		.byte	(.L353-.L354)/2
 4028 0033 07       		.byte	(.L355-.L354)/2
 4029 0034 0C       		.byte	(.L356-.L354)/2
 4030 0035 0F       		.byte	(.L357-.L354)/2
 4031              		.p2align 1
 4032              	.L353:
4939:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 4033              		.loc 1 4939 0
 4034 0036 826C     		ldr	r2, [r0, #72]
 4035 0038 1143     		orrs	r1, r1, r2
 4036              	.LVL377:
 4037 003a 8164     		str	r1, [r0, #72]
4901:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4038              		.loc 1 4901 0
 4039 003c 0124     		movs	r4, #1
4940:Source\bsw\FreeRTOS\src/tasks.c **** 
 4040              		.loc 1 4940 0
 4041 003e 0FE0     		b	.L352
 4042              	.LVL378:
 4043              	.L355:
4943:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 4044              		.loc 1 4943 0
 4045 0040 826C     		ldr	r2, [r0, #72]
 4046 0042 0132     		adds	r2, r2, #1
 4047 0044 8264     		str	r2, [r0, #72]
4901:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4048              		.loc 1 4901 0
 4049 0046 0124     		movs	r4, #1
4944:Source\bsw\FreeRTOS\src/tasks.c **** 
 4050              		.loc 1 4944 0
 4051 0048 0AE0     		b	.L352
 4052              	.L356:
4947:Source\bsw\FreeRTOS\src/tasks.c **** 					break;
 4053              		.loc 1 4947 0
 4054 004a 8164     		str	r1, [r0, #72]
4901:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4055              		.loc 1 4901 0
 4056 004c 0124     		movs	r4, #1
4948:Source\bsw\FreeRTOS\src/tasks.c **** 
 4057              		.loc 1 4948 0
 4058 004e 07E0     		b	.L352
 4059              	.L357:
4951:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 4060              		.loc 1 4951 0
 4061 0050 022B     		cmp	r3, #2
 4062 0052 04D0     		beq	.L363
4953:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 4063              		.loc 1 4953 0
 4064 0054 8164     		str	r1, [r0, #72]
4901:Source\bsw\FreeRTOS\src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4065              		.loc 1 4901 0
 4066 0056 0124     		movs	r4, #1
 4067 0058 02E0     		b	.L352
 4068              	.L362:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 178


 4069 005a 0124     		movs	r4, #1
 4070 005c 00E0     		b	.L352
 4071              	.L363:
4958:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 4072              		.loc 1 4958 0
 4073 005e 0024     		movs	r4, #0
 4074              	.LVL379:
 4075              	.L352:
4979:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 4076              		.loc 1 4979 0
 4077 0060 012B     		cmp	r3, #1
 4078 0062 30D1     		bne	.L358
 4079 0064 0646     		mov	r6, r0
4984:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 4080              		.loc 1 4984 0
 4081 0066 1A4B     		ldr	r3, .L365
 4082              	.LVL380:
 4083 0068 D3F8F030 		ldr	r3, [r3, #240]
 4084 006c B3B9     		cbnz	r3, .L359
4986:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4085              		.loc 1 4986 0
 4086 006e 071D     		adds	r7, r0, #4
 4087 0070 3846     		mov	r0, r7
 4088              	.LVL381:
 4089 0072 FFF7FEFF 		bl	uxListRemove
 4090              	.LVL382:
4987:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4091              		.loc 1 4987 0
 4092 0076 F36A     		ldr	r3, [r6, #44]
 4093 0078 0122     		movs	r2, #1
 4094 007a 02FA03F1 		lsl	r1, r2, r3
 4095 007e 1448     		ldr	r0, .L365
 4096 0080 D0F8E420 		ldr	r2, [r0, #228]
 4097 0084 0A43     		orrs	r2, r2, r1
 4098 0086 C0F8E420 		str	r2, [r0, #228]
 4099 008a 3030     		adds	r0, r0, #48
 4100 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4101 0090 9A00     		lsls	r2, r3, #2
 4102 0092 3946     		mov	r1, r7
 4103 0094 1044     		add	r0, r0, r2
 4104 0096 FFF7FEFF 		bl	vListInsertEnd
 4105              	.LVL383:
 4106 009a 04E0     		b	.L360
 4107              	.LVL384:
 4108              	.L359:
4993:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4109              		.loc 1 4993 0
 4110 009c 00F11801 		add	r1, r0, #24
 4111 00a0 0C48     		ldr	r0, .L365+4
 4112              	.LVL385:
 4113 00a2 FFF7FEFF 		bl	vListInsertEnd
 4114              	.LVL386:
 4115              	.L360:
4996:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 4116              		.loc 1 4996 0
 4117 00a6 F26A     		ldr	r2, [r6, #44]
 4118 00a8 094B     		ldr	r3, .L365
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 179


 4119 00aa D3F8D830 		ldr	r3, [r3, #216]
 4120 00ae DB6A     		ldr	r3, [r3, #44]
 4121 00b0 9A42     		cmp	r2, r3
 4122 00b2 08D9     		bls	.L358
5000:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 4123              		.loc 1 5000 0
 4124 00b4 069B     		ldr	r3, [sp, #24]
 4125 00b6 13B1     		cbz	r3, .L361
5002:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 4126              		.loc 1 5002 0
 4127 00b8 0123     		movs	r3, #1
 4128 00ba 069A     		ldr	r2, [sp, #24]
 4129 00bc 1360     		str	r3, [r2]
 4130              	.L361:
5008:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4131              		.loc 1 5008 0
 4132 00be 0122     		movs	r2, #1
 4133 00c0 034B     		ldr	r3, .L365
 4134 00c2 C3F8FC20 		str	r2, [r3, #252]
 4135              	.LVL387:
 4136              	.L358:
 4137              	.LBB57:
 4138              	.LBB58:
 4139              		.loc 2 231 0
 4140              		.syntax unified
 4141              	@ 231 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 4142 00c6 85F31188 			msr basepri, r5	
 4143              	@ 0 "" 2
 4144              	.LVL388:
 4145              		.thumb
 4146              		.syntax unified
 4147              	.LBE58:
 4148              	.LBE57:
5019:Source\bsw\FreeRTOS\src/tasks.c **** 
 4149              		.loc 1 5019 0
 4150 00ca 2046     		mov	r0, r4
 4151 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4152              	.LVL389:
 4153              	.L366:
 4154 00ce 00BF     		.align	2
 4155              	.L365:
 4156 00d0 00000000 		.word	.LANCHOR0
 4157 00d4 14000000 		.word	.LANCHOR0+20
 4158              		.cfi_endproc
 4159              	.LFE117:
 4160              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4161              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4162              		.align	2
 4163              		.global	vTaskNotifyGiveFromISR
 4164              		.thumb
 4165              		.thumb_func
 4166              		.type	vTaskNotifyGiveFromISR, %function
 4167              	vTaskNotifyGiveFromISR:
 4168              	.LFB118:
5027:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t * pxTCB;
 4169              		.loc 1 5027 0
 4170              		.cfi_startproc
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 180


 4171              		@ args = 0, pretend = 0, frame = 0
 4172              		@ frame_needed = 0, uses_anonymous_args = 0
 4173              	.LVL390:
 4174 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4175              		.cfi_def_cfa_offset 24
 4176              		.cfi_offset 3, -24
 4177              		.cfi_offset 4, -20
 4178              		.cfi_offset 5, -16
 4179              		.cfi_offset 6, -12
 4180              		.cfi_offset 7, -8
 4181              		.cfi_offset 14, -4
 4182              	.LVL391:
 4183              	.LBB59:
 4184              	.LBB60:
 213:.\Source\bsw\FreeRTOS\include/portmacro.h **** 	(
 4185              		.loc 2 213 0
 4186              		.syntax unified
 4187              	@ 213 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 4188 0002 EFF31185 			mrs r5, basepri											
 4189 0006 4FF0A003 		mov r3, #160												
 4190 000a 83F31188 		msr basepri, r3											
 4191 000e BFF36F8F 		isb														
 4192 0012 BFF34F8F 		dsb														
 4193              	
 4194              	@ 0 "" 2
 4195              		.thumb
 4196              		.syntax unified
 4197              	.LBE60:
 4198              	.LBE59:
5056:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4199              		.loc 1 5056 0
 4200 0016 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4201 001a DBB2     		uxtb	r3, r3
 4202              	.LVL392:
5057:Source\bsw\FreeRTOS\src/tasks.c **** 
 4203              		.loc 1 5057 0
 4204 001c 0222     		movs	r2, #2
 4205 001e 80F84C20 		strb	r2, [r0, #76]
5061:Source\bsw\FreeRTOS\src/tasks.c **** 
 4206              		.loc 1 5061 0
 4207 0022 826C     		ldr	r2, [r0, #72]
 4208 0024 0132     		adds	r2, r2, #1
 4209 0026 8264     		str	r2, [r0, #72]
5067:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 4210              		.loc 1 5067 0
 4211 0028 012B     		cmp	r3, #1
 4212 002a 2FD1     		bne	.L368
 4213 002c 0E46     		mov	r6, r1
 4214 002e 0446     		mov	r4, r0
5072:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 4215              		.loc 1 5072 0
 4216 0030 184B     		ldr	r3, .L373
 4217              	.LVL393:
 4218 0032 D3F8F030 		ldr	r3, [r3, #240]
 4219 0036 B3B9     		cbnz	r3, .L369
5074:Source\bsw\FreeRTOS\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4220              		.loc 1 5074 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 181


 4221 0038 071D     		adds	r7, r0, #4
 4222 003a 3846     		mov	r0, r7
 4223              	.LVL394:
 4224 003c FFF7FEFF 		bl	uxListRemove
 4225              	.LVL395:
5075:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4226              		.loc 1 5075 0
 4227 0040 E36A     		ldr	r3, [r4, #44]
 4228 0042 0122     		movs	r2, #1
 4229 0044 02FA03F1 		lsl	r1, r2, r3
 4230 0048 1248     		ldr	r0, .L373
 4231 004a D0F8E420 		ldr	r2, [r0, #228]
 4232 004e 0A43     		orrs	r2, r2, r1
 4233 0050 C0F8E420 		str	r2, [r0, #228]
 4234 0054 3030     		adds	r0, r0, #48
 4235 0056 03EB8303 		add	r3, r3, r3, lsl #2
 4236 005a 9A00     		lsls	r2, r3, #2
 4237 005c 3946     		mov	r1, r7
 4238 005e 1044     		add	r0, r0, r2
 4239 0060 FFF7FEFF 		bl	vListInsertEnd
 4240              	.LVL396:
 4241 0064 04E0     		b	.L370
 4242              	.LVL397:
 4243              	.L369:
5081:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4244              		.loc 1 5081 0
 4245 0066 00F11801 		add	r1, r0, #24
 4246              	.LVL398:
 4247 006a 0B48     		ldr	r0, .L373+4
 4248              	.LVL399:
 4249 006c FFF7FEFF 		bl	vListInsertEnd
 4250              	.LVL400:
 4251              	.L370:
5084:Source\bsw\FreeRTOS\src/tasks.c **** 				{
 4252              		.loc 1 5084 0
 4253 0070 E26A     		ldr	r2, [r4, #44]
 4254 0072 084B     		ldr	r3, .L373
 4255 0074 D3F8D830 		ldr	r3, [r3, #216]
 4256 0078 DB6A     		ldr	r3, [r3, #44]
 4257 007a 9A42     		cmp	r2, r3
 4258 007c 06D9     		bls	.L368
5088:Source\bsw\FreeRTOS\src/tasks.c **** 					{
 4259              		.loc 1 5088 0
 4260 007e 0EB1     		cbz	r6, .L371
5090:Source\bsw\FreeRTOS\src/tasks.c **** 					}
 4261              		.loc 1 5090 0
 4262 0080 0123     		movs	r3, #1
 4263 0082 3360     		str	r3, [r6]
 4264              	.L371:
5096:Source\bsw\FreeRTOS\src/tasks.c **** 				}
 4265              		.loc 1 5096 0
 4266 0084 0122     		movs	r2, #1
 4267 0086 034B     		ldr	r3, .L373
 4268 0088 C3F8FC20 		str	r2, [r3, #252]
 4269              	.LVL401:
 4270              	.L368:
 4271              	.LBB61:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 182


 4272              	.LBB62:
 4273              		.loc 2 231 0
 4274              		.syntax unified
 4275              	@ 231 ".\Source\bsw\FreeRTOS\include/portmacro.h" 1
 4276 008c 85F31188 			msr basepri, r5	
 4277              	@ 0 "" 2
 4278              	.LVL402:
 4279              		.thumb
 4280              		.syntax unified
 4281 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4282              	.L374:
 4283 0092 00BF     		.align	2
 4284              	.L373:
 4285 0094 00000000 		.word	.LANCHOR0
 4286 0098 14000000 		.word	.LANCHOR0+20
 4287              	.LBE62:
 4288              	.LBE61:
 4289              		.cfi_endproc
 4290              	.LFE118:
 4291              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4292              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4293              		.align	2
 4294              		.global	xTaskNotifyStateClear
 4295              		.thumb
 4296              		.thumb_func
 4297              		.type	xTaskNotifyStateClear, %function
 4298              	xTaskNotifyStateClear:
 4299              	.LFB119:
5113:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 4300              		.loc 1 5113 0
 4301              		.cfi_startproc
 4302              		@ args = 0, pretend = 0, frame = 0
 4303              		@ frame_needed = 0, uses_anonymous_args = 0
 4304              	.LVL403:
 4305 0000 10B5     		push	{r4, lr}
 4306              		.cfi_def_cfa_offset 8
 4307              		.cfi_offset 4, -8
 4308              		.cfi_offset 14, -4
5119:Source\bsw\FreeRTOS\src/tasks.c **** 
 4309              		.loc 1 5119 0
 4310 0002 0446     		mov	r4, r0
 4311 0004 10B9     		cbnz	r0, .L376
5119:Source\bsw\FreeRTOS\src/tasks.c **** 
 4312              		.loc 1 5119 0 is_stmt 0 discriminator 1
 4313 0006 0A4B     		ldr	r3, .L380
 4314 0008 D3F8D840 		ldr	r4, [r3, #216]
 4315              	.LVL404:
 4316              	.L376:
5121:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 4317              		.loc 1 5121 0 is_stmt 1 discriminator 4
 4318 000c FFF7FEFF 		bl	vPortEnterCritical
 4319              	.LVL405:
5123:Source\bsw\FreeRTOS\src/tasks.c **** 			{
 4320              		.loc 1 5123 0 discriminator 4
 4321 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4322 0014 DBB2     		uxtb	r3, r3
 4323 0016 022B     		cmp	r3, #2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 183


 4324 0018 04D1     		bne	.L378
5125:Source\bsw\FreeRTOS\src/tasks.c **** 				xReturn = pdPASS;
 4325              		.loc 1 5125 0
 4326 001a 0023     		movs	r3, #0
 4327 001c 84F84C30 		strb	r3, [r4, #76]
 4328              	.LVL406:
5126:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 4329              		.loc 1 5126 0
 4330 0020 0124     		movs	r4, #1
 4331              	.LVL407:
 4332 0022 00E0     		b	.L377
 4333              	.LVL408:
 4334              	.L378:
5130:Source\bsw\FreeRTOS\src/tasks.c **** 			}
 4335              		.loc 1 5130 0
 4336 0024 0024     		movs	r4, #0
 4337              	.LVL409:
 4338              	.L377:
5133:Source\bsw\FreeRTOS\src/tasks.c **** 
 4339              		.loc 1 5133 0
 4340 0026 FFF7FEFF 		bl	vPortExitCritical
 4341              	.LVL410:
5136:Source\bsw\FreeRTOS\src/tasks.c **** 
 4342              		.loc 1 5136 0
 4343 002a 2046     		mov	r0, r4
 4344 002c 10BD     		pop	{r4, pc}
 4345              	.LVL411:
 4346              	.L381:
 4347 002e 00BF     		.align	2
 4348              	.L380:
 4349 0030 00000000 		.word	.LANCHOR0
 4350              		.cfi_endproc
 4351              	.LFE119:
 4352              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4353              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 4354              		.align	2
 4355              		.global	ulTaskNotifyValueClear
 4356              		.thumb
 4357              		.thumb_func
 4358              		.type	ulTaskNotifyValueClear, %function
 4359              	ulTaskNotifyValueClear:
 4360              	.LFB120:
5144:Source\bsw\FreeRTOS\src/tasks.c **** 	TCB_t *pxTCB;
 4361              		.loc 1 5144 0
 4362              		.cfi_startproc
 4363              		@ args = 0, pretend = 0, frame = 0
 4364              		@ frame_needed = 0, uses_anonymous_args = 0
 4365              	.LVL412:
 4366 0000 70B5     		push	{r4, r5, r6, lr}
 4367              		.cfi_def_cfa_offset 16
 4368              		.cfi_offset 4, -16
 4369              		.cfi_offset 5, -12
 4370              		.cfi_offset 6, -8
 4371              		.cfi_offset 14, -4
 4372 0002 0E46     		mov	r6, r1
5150:Source\bsw\FreeRTOS\src/tasks.c **** 
 4373              		.loc 1 5150 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 184


 4374 0004 0446     		mov	r4, r0
 4375 0006 10B9     		cbnz	r0, .L383
5150:Source\bsw\FreeRTOS\src/tasks.c **** 
 4376              		.loc 1 5150 0 is_stmt 0 discriminator 1
 4377 0008 084B     		ldr	r3, .L385
 4378 000a D3F8D840 		ldr	r4, [r3, #216]
 4379              	.LVL413:
 4380              	.L383:
5152:Source\bsw\FreeRTOS\src/tasks.c **** 		{
 4381              		.loc 1 5152 0 is_stmt 1 discriminator 4
 4382 000e FFF7FEFF 		bl	vPortEnterCritical
 4383              	.LVL414:
5156:Source\bsw\FreeRTOS\src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 4384              		.loc 1 5156 0 discriminator 4
 4385 0012 064B     		ldr	r3, .L385
 4386 0014 D3F8D830 		ldr	r3, [r3, #216]
 4387 0018 9D6C     		ldr	r5, [r3, #72]
 4388              	.LVL415:
5157:Source\bsw\FreeRTOS\src/tasks.c **** 		}
 4389              		.loc 1 5157 0 discriminator 4
 4390 001a A16C     		ldr	r1, [r4, #72]
 4391 001c 21EA0601 		bic	r1, r1, r6
 4392 0020 A164     		str	r1, [r4, #72]
5159:Source\bsw\FreeRTOS\src/tasks.c **** 
 4393              		.loc 1 5159 0 discriminator 4
 4394 0022 FFF7FEFF 		bl	vPortExitCritical
 4395              	.LVL416:
5162:Source\bsw\FreeRTOS\src/tasks.c **** 
 4396              		.loc 1 5162 0 discriminator 4
 4397 0026 2846     		mov	r0, r5
 4398 0028 70BD     		pop	{r4, r5, r6, pc}
 4399              	.LVL417:
 4400              	.L386:
 4401 002a 00BF     		.align	2
 4402              	.L385:
 4403 002c 00000000 		.word	.LANCHOR0
 4404              		.cfi_endproc
 4405              	.LFE120:
 4406              		.size	ulTaskNotifyValueClear, .-ulTaskNotifyValueClear
 4407              		.global	pxCurrentTCB
 4408              		.section	.rodata.str1.4,"aMS",%progbits,1
 4409              		.align	2
 4410              	.LC0:
 4411 0000 49444C45 		.ascii	"IDLE\000"
 4411      00
 4412              		.bss
 4413              		.align	2
 4414              		.set	.LANCHOR0,. + 0
 4415              		.type	xSuspendedTaskList, %object
 4416              		.size	xSuspendedTaskList, 20
 4417              	xSuspendedTaskList:
 4418 0000 00000000 		.space	20
 4418      00000000 
 4418      00000000 
 4418      00000000 
 4418      00000000 
 4419              		.type	xPendingReadyList, %object
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 185


 4420              		.size	xPendingReadyList, 20
 4421              	xPendingReadyList:
 4422 0014 00000000 		.space	20
 4422      00000000 
 4422      00000000 
 4422      00000000 
 4422      00000000 
 4423              		.type	pxDelayedTaskList, %object
 4424              		.size	pxDelayedTaskList, 4
 4425              	pxDelayedTaskList:
 4426 0028 00000000 		.space	4
 4427              		.type	xNextTaskUnblockTime, %object
 4428              		.size	xNextTaskUnblockTime, 4
 4429              	xNextTaskUnblockTime:
 4430 002c 00000000 		.space	4
 4431              		.type	pxReadyTasksLists, %object
 4432              		.size	pxReadyTasksLists, 100
 4433              	pxReadyTasksLists:
 4434 0030 00000000 		.space	100
 4434      00000000 
 4434      00000000 
 4434      00000000 
 4434      00000000 
 4435              		.type	xDelayedTaskList1, %object
 4436              		.size	xDelayedTaskList1, 20
 4437              	xDelayedTaskList1:
 4438 0094 00000000 		.space	20
 4438      00000000 
 4438      00000000 
 4438      00000000 
 4438      00000000 
 4439              		.type	xDelayedTaskList2, %object
 4440              		.size	xDelayedTaskList2, 20
 4441              	xDelayedTaskList2:
 4442 00a8 00000000 		.space	20
 4442      00000000 
 4442      00000000 
 4442      00000000 
 4442      00000000 
 4443              		.type	xTasksWaitingTermination, %object
 4444              		.size	xTasksWaitingTermination, 20
 4445              	xTasksWaitingTermination:
 4446 00bc 00000000 		.space	20
 4446      00000000 
 4446      00000000 
 4446      00000000 
 4446      00000000 
 4447              		.type	pxOverflowDelayedTaskList, %object
 4448              		.size	pxOverflowDelayedTaskList, 4
 4449              	pxOverflowDelayedTaskList:
 4450 00d0 00000000 		.space	4
 4451              		.type	uxCurrentNumberOfTasks, %object
 4452              		.size	uxCurrentNumberOfTasks, 4
 4453              	uxCurrentNumberOfTasks:
 4454 00d4 00000000 		.space	4
 4455              		.type	pxCurrentTCB, %object
 4456              		.size	pxCurrentTCB, 4
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 186


 4457              	pxCurrentTCB:
 4458 00d8 00000000 		.space	4
 4459              		.type	xSchedulerRunning, %object
 4460              		.size	xSchedulerRunning, 4
 4461              	xSchedulerRunning:
 4462 00dc 00000000 		.space	4
 4463              		.type	uxTaskNumber, %object
 4464              		.size	uxTaskNumber, 4
 4465              	uxTaskNumber:
 4466 00e0 00000000 		.space	4
 4467              		.type	uxTopReadyPriority, %object
 4468              		.size	uxTopReadyPriority, 4
 4469              	uxTopReadyPriority:
 4470 00e4 00000000 		.space	4
 4471              		.type	uxDeletedTasksWaitingCleanUp, %object
 4472              		.size	uxDeletedTasksWaitingCleanUp, 4
 4473              	uxDeletedTasksWaitingCleanUp:
 4474 00e8 00000000 		.space	4
 4475              		.type	xTickCount, %object
 4476              		.size	xTickCount, 4
 4477              	xTickCount:
 4478 00ec 00000000 		.space	4
 4479              		.type	uxSchedulerSuspended, %object
 4480              		.size	uxSchedulerSuspended, 4
 4481              	uxSchedulerSuspended:
 4482 00f0 00000000 		.space	4
 4483              		.type	xIdleTaskHandle, %object
 4484              		.size	xIdleTaskHandle, 4
 4485              	xIdleTaskHandle:
 4486 00f4 00000000 		.space	4
 4487              		.type	xNumOfOverflows, %object
 4488              		.size	xNumOfOverflows, 4
 4489              	xNumOfOverflows:
 4490 00f8 00000000 		.space	4
 4491              		.type	xYieldPending, %object
 4492              		.size	xYieldPending, 4
 4493              	xYieldPending:
 4494 00fc 00000000 		.space	4
 4495              		.type	xPendedTicks, %object
 4496              		.size	xPendedTicks, 4
 4497              	xPendedTicks:
 4498 0100 00000000 		.space	4
 4499              		.text
 4500              	.Letext0:
 4501              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4502              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4503              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4504              		.file 6 ".\\Source\\bsw\\FreeRTOS\\include/projdefs.h"
 4505              		.file 7 ".\\Source\\bsw\\FreeRTOS\\include/list.h"
 4506              		.file 8 ".\\Source\\bsw\\FreeRTOS\\include/task.h"
 4507              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4508              		.file 10 ".\\Source\\bsw\\FreeRTOS\\include/portable.h"
 4509              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 4510              		.section	.debug_info,"",%progbits
 4511              	.Ldebug_info0:
 4512 0000 F7200000 		.4byte	0x20f7
 4513 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 187


 4514 0006 00000000 		.4byte	.Ldebug_abbrev0
 4515 000a 04       		.byte	0x4
 4516 000b 01       		.uleb128 0x1
 4517 000c 260A0000 		.4byte	.LASF247
 4518 0010 0C       		.byte	0xc
 4519 0011 C40E0000 		.4byte	.LASF248
 4520 0015 190B0000 		.4byte	.LASF249
 4521 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 4522 001d 00000000 		.4byte	0
 4523 0021 00000000 		.4byte	.Ldebug_line0
 4524 0025 02       		.uleb128 0x2
 4525 0026 50000000 		.4byte	.LASF4
 4526 002a 03       		.byte	0x3
 4527 002b D8       		.byte	0xd8
 4528 002c 30000000 		.4byte	0x30
 4529 0030 03       		.uleb128 0x3
 4530 0031 04       		.byte	0x4
 4531 0032 07       		.byte	0x7
 4532 0033 5E040000 		.4byte	.LASF0
 4533 0037 04       		.uleb128 0x4
 4534 0038 04       		.byte	0x4
 4535 0039 05       		.byte	0x5
 4536 003a 696E7400 		.ascii	"int\000"
 4537 003e 03       		.uleb128 0x3
 4538 003f 08       		.byte	0x8
 4539 0040 05       		.byte	0x5
 4540 0041 80010000 		.4byte	.LASF1
 4541 0045 03       		.uleb128 0x3
 4542 0046 08       		.byte	0x8
 4543 0047 04       		.byte	0x4
 4544 0048 18070000 		.4byte	.LASF2
 4545 004c 03       		.uleb128 0x3
 4546 004d 01       		.byte	0x1
 4547 004e 06       		.byte	0x6
 4548 004f 8E010000 		.4byte	.LASF3
 4549 0053 02       		.uleb128 0x2
 4550 0054 B7000000 		.4byte	.LASF5
 4551 0058 04       		.byte	0x4
 4552 0059 1D       		.byte	0x1d
 4553 005a 5E000000 		.4byte	0x5e
 4554 005e 03       		.uleb128 0x3
 4555 005f 01       		.byte	0x1
 4556 0060 08       		.byte	0x8
 4557 0061 4D090000 		.4byte	.LASF6
 4558 0065 03       		.uleb128 0x3
 4559 0066 02       		.byte	0x2
 4560 0067 05       		.byte	0x5
 4561 0068 D0020000 		.4byte	.LASF7
 4562 006c 02       		.uleb128 0x2
 4563 006d 7A030000 		.4byte	.LASF8
 4564 0071 04       		.byte	0x4
 4565 0072 2B       		.byte	0x2b
 4566 0073 77000000 		.4byte	0x77
 4567 0077 03       		.uleb128 0x3
 4568 0078 02       		.byte	0x2
 4569 0079 07       		.byte	0x7
 4570 007a 5E050000 		.4byte	.LASF9
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 188


 4571 007e 02       		.uleb128 0x2
 4572 007f 920C0000 		.4byte	.LASF10
 4573 0083 04       		.byte	0x4
 4574 0084 3F       		.byte	0x3f
 4575 0085 89000000 		.4byte	0x89
 4576 0089 03       		.uleb128 0x3
 4577 008a 04       		.byte	0x4
 4578 008b 05       		.byte	0x5
 4579 008c 33020000 		.4byte	.LASF11
 4580 0090 02       		.uleb128 0x2
 4581 0091 2B040000 		.4byte	.LASF12
 4582 0095 04       		.byte	0x4
 4583 0096 41       		.byte	0x41
 4584 0097 9B000000 		.4byte	0x9b
 4585 009b 03       		.uleb128 0x3
 4586 009c 04       		.byte	0x4
 4587 009d 07       		.byte	0x7
 4588 009e D2040000 		.4byte	.LASF13
 4589 00a2 03       		.uleb128 0x3
 4590 00a3 08       		.byte	0x8
 4591 00a4 07       		.byte	0x7
 4592 00a5 F5010000 		.4byte	.LASF14
 4593 00a9 03       		.uleb128 0x3
 4594 00aa 04       		.byte	0x4
 4595 00ab 07       		.byte	0x7
 4596 00ac F2060000 		.4byte	.LASF15
 4597 00b0 05       		.uleb128 0x5
 4598 00b1 04       		.byte	0x4
 4599 00b2 06       		.uleb128 0x6
 4600 00b3 04       		.byte	0x4
 4601 00b4 B8000000 		.4byte	0xb8
 4602 00b8 03       		.uleb128 0x3
 4603 00b9 01       		.byte	0x1
 4604 00ba 08       		.byte	0x8
 4605 00bb F70B0000 		.4byte	.LASF16
 4606 00bf 06       		.uleb128 0x6
 4607 00c0 04       		.byte	0x4
 4608 00c1 C5000000 		.4byte	0xc5
 4609 00c5 07       		.uleb128 0x7
 4610 00c6 B8000000 		.4byte	0xb8
 4611 00ca 02       		.uleb128 0x2
 4612 00cb 5D0E0000 		.4byte	.LASF17
 4613 00cf 05       		.byte	0x5
 4614 00d0 18       		.byte	0x18
 4615 00d1 53000000 		.4byte	0x53
 4616 00d5 02       		.uleb128 0x2
 4617 00d6 FC020000 		.4byte	.LASF18
 4618 00da 05       		.byte	0x5
 4619 00db 24       		.byte	0x24
 4620 00dc 6C000000 		.4byte	0x6c
 4621 00e0 02       		.uleb128 0x2
 4622 00e1 45090000 		.4byte	.LASF19
 4623 00e5 05       		.byte	0x5
 4624 00e6 2C       		.byte	0x2c
 4625 00e7 7E000000 		.4byte	0x7e
 4626 00eb 02       		.uleb128 0x2
 4627 00ec C20F0000 		.4byte	.LASF20
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 189


 4628 00f0 05       		.byte	0x5
 4629 00f1 30       		.byte	0x30
 4630 00f2 90000000 		.4byte	0x90
 4631 00f6 03       		.uleb128 0x3
 4632 00f7 04       		.byte	0x4
 4633 00f8 04       		.byte	0x4
 4634 00f9 CC080000 		.4byte	.LASF21
 4635 00fd 03       		.uleb128 0x3
 4636 00fe 08       		.byte	0x8
 4637 00ff 04       		.byte	0x4
 4638 0100 BB0F0000 		.4byte	.LASF22
 4639 0104 08       		.uleb128 0x8
 4640 0105 EB000000 		.4byte	0xeb
 4641 0109 08       		.uleb128 0x8
 4642 010a CA000000 		.4byte	0xca
 4643 010e 02       		.uleb128 0x2
 4644 010f F8090000 		.4byte	.LASF23
 4645 0113 06       		.byte	0x6
 4646 0114 23       		.byte	0x23
 4647 0115 19010000 		.4byte	0x119
 4648 0119 06       		.uleb128 0x6
 4649 011a 04       		.byte	0x4
 4650 011b 1F010000 		.4byte	0x11f
 4651 011f 09       		.uleb128 0x9
 4652 0120 2A010000 		.4byte	0x12a
 4653 0124 0A       		.uleb128 0xa
 4654 0125 B0000000 		.4byte	0xb0
 4655 0129 00       		.byte	0
 4656 012a 02       		.uleb128 0x2
 4657 012b 71050000 		.4byte	.LASF24
 4658 012f 02       		.byte	0x2
 4659 0130 37       		.byte	0x37
 4660 0131 EB000000 		.4byte	0xeb
 4661 0135 02       		.uleb128 0x2
 4662 0136 13030000 		.4byte	.LASF25
 4663 013a 02       		.byte	0x2
 4664 013b 38       		.byte	0x38
 4665 013c 89000000 		.4byte	0x89
 4666 0140 02       		.uleb128 0x2
 4667 0141 AF0F0000 		.4byte	.LASF26
 4668 0145 02       		.byte	0x2
 4669 0146 39       		.byte	0x39
 4670 0147 9B000000 		.4byte	0x9b
 4671 014b 02       		.uleb128 0x2
 4672 014c C5020000 		.4byte	.LASF27
 4673 0150 02       		.byte	0x2
 4674 0151 3F       		.byte	0x3f
 4675 0152 EB000000 		.4byte	0xeb
 4676 0156 06       		.uleb128 0x6
 4677 0157 04       		.byte	0x4
 4678 0158 CA000000 		.4byte	0xca
 4679 015c 0B       		.uleb128 0xb
 4680 015d 070D0000 		.4byte	.LASF33
 4681 0161 14       		.byte	0x14
 4682 0162 07       		.byte	0x7
 4683 0163 8C       		.byte	0x8c
 4684 0164 A5010000 		.4byte	0x1a5
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 190


 4685 0168 0C       		.uleb128 0xc
 4686 0169 D20D0000 		.4byte	.LASF28
 4687 016d 07       		.byte	0x7
 4688 016e 8F       		.byte	0x8f
 4689 016f 4B010000 		.4byte	0x14b
 4690 0173 00       		.byte	0
 4691 0174 0C       		.uleb128 0xc
 4692 0175 940E0000 		.4byte	.LASF29
 4693 0179 07       		.byte	0x7
 4694 017a 90       		.byte	0x90
 4695 017b A5010000 		.4byte	0x1a5
 4696 017f 04       		.byte	0x4
 4697 0180 0C       		.uleb128 0xc
 4698 0181 A5080000 		.4byte	.LASF30
 4699 0185 07       		.byte	0x7
 4700 0186 91       		.byte	0x91
 4701 0187 A5010000 		.4byte	0x1a5
 4702 018b 08       		.byte	0x8
 4703 018c 0C       		.uleb128 0xc
 4704 018d CA0D0000 		.4byte	.LASF31
 4705 0191 07       		.byte	0x7
 4706 0192 92       		.byte	0x92
 4707 0193 B0000000 		.4byte	0xb0
 4708 0197 0C       		.byte	0xc
 4709 0198 0C       		.uleb128 0xc
 4710 0199 E8080000 		.4byte	.LASF32
 4711 019d 07       		.byte	0x7
 4712 019e 93       		.byte	0x93
 4713 019f DC010000 		.4byte	0x1dc
 4714 01a3 10       		.byte	0x10
 4715 01a4 00       		.byte	0
 4716 01a5 06       		.uleb128 0x6
 4717 01a6 04       		.byte	0x4
 4718 01a7 5C010000 		.4byte	0x15c
 4719 01ab 0B       		.uleb128 0xb
 4720 01ac 070A0000 		.4byte	.LASF34
 4721 01b0 14       		.byte	0x14
 4722 01b1 07       		.byte	0x7
 4723 01b2 A4       		.byte	0xa4
 4724 01b3 DC010000 		.4byte	0x1dc
 4725 01b7 0C       		.uleb128 0xc
 4726 01b8 C2040000 		.4byte	.LASF35
 4727 01bc 07       		.byte	0x7
 4728 01bd A7       		.byte	0xa7
 4729 01be 29020000 		.4byte	0x229
 4730 01c2 00       		.byte	0
 4731 01c3 0C       		.uleb128 0xc
 4732 01c4 E0080000 		.4byte	.LASF36
 4733 01c8 07       		.byte	0x7
 4734 01c9 A8       		.byte	0xa8
 4735 01ca 2E020000 		.4byte	0x22e
 4736 01ce 04       		.byte	0x4
 4737 01cf 0C       		.uleb128 0xc
 4738 01d0 3F010000 		.4byte	.LASF37
 4739 01d4 07       		.byte	0x7
 4740 01d5 A9       		.byte	0xa9
 4741 01d6 1E020000 		.4byte	0x21e
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 191


 4742 01da 08       		.byte	0x8
 4743 01db 00       		.byte	0
 4744 01dc 06       		.uleb128 0x6
 4745 01dd 04       		.byte	0x4
 4746 01de AB010000 		.4byte	0x1ab
 4747 01e2 02       		.uleb128 0x2
 4748 01e3 53080000 		.4byte	.LASF38
 4749 01e7 07       		.byte	0x7
 4750 01e8 96       		.byte	0x96
 4751 01e9 5C010000 		.4byte	0x15c
 4752 01ed 0B       		.uleb128 0xb
 4753 01ee 5F010000 		.4byte	.LASF39
 4754 01f2 0C       		.byte	0xc
 4755 01f3 07       		.byte	0x7
 4756 01f4 98       		.byte	0x98
 4757 01f5 1E020000 		.4byte	0x21e
 4758 01f9 0C       		.uleb128 0xc
 4759 01fa D20D0000 		.4byte	.LASF28
 4760 01fe 07       		.byte	0x7
 4761 01ff 9B       		.byte	0x9b
 4762 0200 4B010000 		.4byte	0x14b
 4763 0204 00       		.byte	0
 4764 0205 0C       		.uleb128 0xc
 4765 0206 940E0000 		.4byte	.LASF29
 4766 020a 07       		.byte	0x7
 4767 020b 9C       		.byte	0x9c
 4768 020c A5010000 		.4byte	0x1a5
 4769 0210 04       		.byte	0x4
 4770 0211 0C       		.uleb128 0xc
 4771 0212 A5080000 		.4byte	.LASF30
 4772 0216 07       		.byte	0x7
 4773 0217 9D       		.byte	0x9d
 4774 0218 A5010000 		.4byte	0x1a5
 4775 021c 08       		.byte	0x8
 4776 021d 00       		.byte	0
 4777 021e 02       		.uleb128 0x2
 4778 021f 57000000 		.4byte	.LASF40
 4779 0223 07       		.byte	0x7
 4780 0224 9F       		.byte	0x9f
 4781 0225 ED010000 		.4byte	0x1ed
 4782 0229 08       		.uleb128 0x8
 4783 022a 40010000 		.4byte	0x140
 4784 022e 06       		.uleb128 0x6
 4785 022f 04       		.byte	0x4
 4786 0230 E2010000 		.4byte	0x1e2
 4787 0234 02       		.uleb128 0x2
 4788 0235 3F060000 		.4byte	.LASF41
 4789 0239 07       		.byte	0x7
 4790 023a AB       		.byte	0xab
 4791 023b AB010000 		.4byte	0x1ab
 4792 023f 02       		.uleb128 0x2
 4793 0240 B8020000 		.4byte	.LASF42
 4794 0244 08       		.byte	0x8
 4795 0245 46       		.byte	0x46
 4796 0246 4A020000 		.4byte	0x24a
 4797 024a 06       		.uleb128 0x6
 4798 024b 04       		.byte	0x4
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 192


 4799 024c 50020000 		.4byte	0x250
 4800 0250 0B       		.uleb128 0xb
 4801 0251 3C020000 		.4byte	.LASF43
 4802 0255 50       		.byte	0x50
 4803 0256 01       		.byte	0x1
 4804 0257 FC       		.byte	0xfc
 4805 0258 DE020000 		.4byte	0x2de
 4806 025c 0C       		.uleb128 0xc
 4807 025d F9040000 		.4byte	.LASF44
 4808 0261 01       		.byte	0x1
 4809 0262 FE       		.byte	0xfe
 4810 0263 C7030000 		.4byte	0x3c7
 4811 0267 00       		.byte	0
 4812 0268 0D       		.uleb128 0xd
 4813 0269 0C020000 		.4byte	.LASF45
 4814 026d 01       		.byte	0x1
 4815 026e 0401     		.2byte	0x104
 4816 0270 E2010000 		.4byte	0x1e2
 4817 0274 04       		.byte	0x4
 4818 0275 0D       		.uleb128 0xd
 4819 0276 BD070000 		.4byte	.LASF46
 4820 027a 01       		.byte	0x1
 4821 027b 0501     		.2byte	0x105
 4822 027d E2010000 		.4byte	0x1e2
 4823 0281 18       		.byte	0x18
 4824 0282 0D       		.uleb128 0xd
 4825 0283 360F0000 		.4byte	.LASF47
 4826 0287 01       		.byte	0x1
 4827 0288 0601     		.2byte	0x106
 4828 028a 40010000 		.4byte	0x140
 4829 028e 2C       		.byte	0x2c
 4830 028f 0D       		.uleb128 0xd
 4831 0290 BC060000 		.4byte	.LASF48
 4832 0294 01       		.byte	0x1
 4833 0295 0701     		.2byte	0x107
 4834 0297 C1030000 		.4byte	0x3c1
 4835 029b 30       		.byte	0x30
 4836 029c 0D       		.uleb128 0xd
 4837 029d 520E0000 		.4byte	.LASF49
 4838 02a1 01       		.byte	0x1
 4839 02a2 0801     		.2byte	0x108
 4840 02a4 D2030000 		.4byte	0x3d2
 4841 02a8 34       		.byte	0x34
 4842 02a9 0D       		.uleb128 0xd
 4843 02aa B40A0000 		.4byte	.LASF50
 4844 02ae 01       		.byte	0x1
 4845 02af 1801     		.2byte	0x118
 4846 02b1 40010000 		.4byte	0x140
 4847 02b5 40       		.byte	0x40
 4848 02b6 0D       		.uleb128 0xd
 4849 02b7 BB0B0000 		.4byte	.LASF51
 4850 02bb 01       		.byte	0x1
 4851 02bc 1901     		.2byte	0x119
 4852 02be 40010000 		.4byte	0x140
 4853 02c2 44       		.byte	0x44
 4854 02c3 0D       		.uleb128 0xd
 4855 02c4 5B090000 		.4byte	.LASF52
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 193


 4856 02c8 01       		.byte	0x1
 4857 02c9 3701     		.2byte	0x137
 4858 02cb 04010000 		.4byte	0x104
 4859 02cf 48       		.byte	0x48
 4860 02d0 0D       		.uleb128 0xd
 4861 02d1 10040000 		.4byte	.LASF53
 4862 02d5 01       		.byte	0x1
 4863 02d6 3801     		.2byte	0x138
 4864 02d8 09010000 		.4byte	0x109
 4865 02dc 4C       		.byte	0x4c
 4866 02dd 00       		.byte	0
 4867 02de 0E       		.uleb128 0xe
 4868 02df 01       		.byte	0x1
 4869 02e0 5E000000 		.4byte	0x5e
 4870 02e4 08       		.byte	0x8
 4871 02e5 50       		.byte	0x50
 4872 02e6 0F030000 		.4byte	0x30f
 4873 02ea 0F       		.uleb128 0xf
 4874 02eb 630B0000 		.4byte	.LASF54
 4875 02ef 00       		.byte	0
 4876 02f0 0F       		.uleb128 0xf
 4877 02f1 E4040000 		.4byte	.LASF55
 4878 02f5 01       		.byte	0x1
 4879 02f6 0F       		.uleb128 0xf
 4880 02f7 10010000 		.4byte	.LASF56
 4881 02fb 02       		.byte	0x2
 4882 02fc 0F       		.uleb128 0xf
 4883 02fd 00000000 		.4byte	.LASF57
 4884 0301 03       		.byte	0x3
 4885 0302 0F       		.uleb128 0xf
 4886 0303 F4080000 		.4byte	.LASF58
 4887 0307 04       		.byte	0x4
 4888 0308 0F       		.uleb128 0xf
 4889 0309 490E0000 		.4byte	.LASF59
 4890 030d 05       		.byte	0x5
 4891 030e 00       		.byte	0
 4892 030f 02       		.uleb128 0x2
 4893 0310 9B0E0000 		.4byte	.LASF60
 4894 0314 08       		.byte	0x8
 4895 0315 57       		.byte	0x57
 4896 0316 DE020000 		.4byte	0x2de
 4897 031a 0E       		.uleb128 0xe
 4898 031b 01       		.byte	0x1
 4899 031c 5E000000 		.4byte	0x5e
 4900 0320 08       		.byte	0x8
 4901 0321 5B       		.byte	0x5b
 4902 0322 45030000 		.4byte	0x345
 4903 0326 0F       		.uleb128 0xf
 4904 0327 8A0E0000 		.4byte	.LASF61
 4905 032b 00       		.byte	0
 4906 032c 0F       		.uleb128 0xf
 4907 032d 72020000 		.4byte	.LASF62
 4908 0331 01       		.byte	0x1
 4909 0332 0F       		.uleb128 0xf
 4910 0333 A3060000 		.4byte	.LASF63
 4911 0337 02       		.byte	0x2
 4912 0338 0F       		.uleb128 0xf
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 194


 4913 0339 D4070000 		.4byte	.LASF64
 4914 033d 03       		.byte	0x3
 4915 033e 0F       		.uleb128 0xf
 4916 033f 2F0E0000 		.4byte	.LASF65
 4917 0343 04       		.byte	0x4
 4918 0344 00       		.byte	0
 4919 0345 02       		.uleb128 0x2
 4920 0346 B60E0000 		.4byte	.LASF66
 4921 034a 08       		.byte	0x8
 4922 034b 61       		.byte	0x61
 4923 034c 1A030000 		.4byte	0x31a
 4924 0350 0B       		.uleb128 0xb
 4925 0351 55010000 		.4byte	.LASF67
 4926 0355 08       		.byte	0x8
 4927 0356 08       		.byte	0x8
 4928 0357 66       		.byte	0x66
 4929 0358 75030000 		.4byte	0x375
 4930 035c 0C       		.uleb128 0xc
 4931 035d B0030000 		.4byte	.LASF68
 4932 0361 08       		.byte	0x8
 4933 0362 68       		.byte	0x68
 4934 0363 35010000 		.4byte	0x135
 4935 0367 00       		.byte	0
 4936 0368 0C       		.uleb128 0xc
 4937 0369 FD0E0000 		.4byte	.LASF69
 4938 036d 08       		.byte	0x8
 4939 036e 69       		.byte	0x69
 4940 036f 4B010000 		.4byte	0x14b
 4941 0373 04       		.byte	0x4
 4942 0374 00       		.byte	0
 4943 0375 02       		.uleb128 0x2
 4944 0376 66000000 		.4byte	.LASF70
 4945 037a 08       		.byte	0x8
 4946 037b 6A       		.byte	0x6a
 4947 037c 50030000 		.4byte	0x350
 4948 0380 0B       		.uleb128 0xb
 4949 0381 0B090000 		.4byte	.LASF71
 4950 0385 0C       		.byte	0xc
 4951 0386 08       		.byte	0x8
 4952 0387 6F       		.byte	0x6f
 4953 0388 B1030000 		.4byte	0x3b1
 4954 038c 0C       		.uleb128 0xc
 4955 038d C1000000 		.4byte	.LASF72
 4956 0391 08       		.byte	0x8
 4957 0392 71       		.byte	0x71
 4958 0393 B0000000 		.4byte	0xb0
 4959 0397 00       		.byte	0
 4960 0398 0C       		.uleb128 0xc
 4961 0399 33080000 		.4byte	.LASF73
 4962 039d 08       		.byte	0x8
 4963 039e 72       		.byte	0x72
 4964 039f EB000000 		.4byte	0xeb
 4965 03a3 04       		.byte	0x4
 4966 03a4 0C       		.uleb128 0xc
 4967 03a5 920B0000 		.4byte	.LASF74
 4968 03a9 08       		.byte	0x8
 4969 03aa 73       		.byte	0x73
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 195


 4970 03ab EB000000 		.4byte	0xeb
 4971 03af 08       		.byte	0x8
 4972 03b0 00       		.byte	0
 4973 03b1 02       		.uleb128 0x2
 4974 03b2 DA020000 		.4byte	.LASF75
 4975 03b6 08       		.byte	0x8
 4976 03b7 74       		.byte	0x74
 4977 03b8 80030000 		.4byte	0x380
 4978 03bc 07       		.uleb128 0x7
 4979 03bd BF000000 		.4byte	0xbf
 4980 03c1 06       		.uleb128 0x6
 4981 03c2 04       		.byte	0x4
 4982 03c3 2A010000 		.4byte	0x12a
 4983 03c7 06       		.uleb128 0x6
 4984 03c8 04       		.byte	0x4
 4985 03c9 CD030000 		.4byte	0x3cd
 4986 03cd 08       		.uleb128 0x8
 4987 03ce 2A010000 		.4byte	0x12a
 4988 03d2 10       		.uleb128 0x10
 4989 03d3 B8000000 		.4byte	0xb8
 4990 03d7 E2030000 		.4byte	0x3e2
 4991 03db 11       		.uleb128 0x11
 4992 03dc A9000000 		.4byte	0xa9
 4993 03e0 0B       		.byte	0xb
 4994 03e1 00       		.byte	0
 4995 03e2 12       		.uleb128 0x12
 4996 03e3 2D050000 		.4byte	.LASF76
 4997 03e7 01       		.byte	0x1
 4998 03e8 4901     		.2byte	0x149
 4999 03ea 50020000 		.4byte	0x250
 5000 03ee 12       		.uleb128 0x12
 5001 03ef 81090000 		.4byte	.LASF77
 5002 03f3 01       		.byte	0x1
 5003 03f4 4D01     		.2byte	0x14d
 5004 03f6 E2030000 		.4byte	0x3e2
 5005 03fa 13       		.uleb128 0x13
 5006 03fb AA070000 		.4byte	.LASF82
 5007 03ff 02       		.byte	0x2
 5008 0400 D1       		.byte	0xd1
 5009 0401 EB000000 		.4byte	0xeb
 5010 0405 03       		.byte	0x3
 5011 0406 21040000 		.4byte	0x421
 5012 040a 14       		.uleb128 0x14
 5013 040b 2A000000 		.4byte	.LASF78
 5014 040f 02       		.byte	0x2
 5015 0410 D3       		.byte	0xd3
 5016 0411 EB000000 		.4byte	0xeb
 5017 0415 14       		.uleb128 0x14
 5018 0416 03010000 		.4byte	.LASF79
 5019 041a 02       		.byte	0x2
 5020 041b D3       		.byte	0xd3
 5021 041c EB000000 		.4byte	0xeb
 5022 0420 00       		.byte	0
 5023 0421 15       		.uleb128 0x15
 5024 0422 43080000 		.4byte	.LASF80
 5025 0426 02       		.byte	0x2
 5026 0427 E5       		.byte	0xe5
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 196


 5027 0428 03       		.byte	0x3
 5028 0429 39040000 		.4byte	0x439
 5029 042d 16       		.uleb128 0x16
 5030 042e C90B0000 		.4byte	.LASF84
 5031 0432 02       		.byte	0x2
 5032 0433 E5       		.byte	0xe5
 5033 0434 EB000000 		.4byte	0xeb
 5034 0438 00       		.byte	0
 5035 0439 15       		.uleb128 0x15
 5036 043a 2D060000 		.4byte	.LASF81
 5037 043e 02       		.byte	0x2
 5038 043f C1       		.byte	0xc1
 5039 0440 03       		.byte	0x3
 5040 0441 51040000 		.4byte	0x451
 5041 0445 14       		.uleb128 0x14
 5042 0446 03010000 		.4byte	.LASF79
 5043 044a 02       		.byte	0x2
 5044 044b C3       		.byte	0xc3
 5045 044c EB000000 		.4byte	0xeb
 5046 0450 00       		.byte	0
 5047 0451 13       		.uleb128 0x13
 5048 0452 E40D0000 		.4byte	.LASF83
 5049 0456 02       		.byte	0x2
 5050 0457 82       		.byte	0x82
 5051 0458 CA000000 		.4byte	0xca
 5052 045c 03       		.byte	0x3
 5053 045d 78040000 		.4byte	0x478
 5054 0461 16       		.uleb128 0x16
 5055 0462 96090000 		.4byte	.LASF85
 5056 0466 02       		.byte	0x2
 5057 0467 82       		.byte	0x82
 5058 0468 EB000000 		.4byte	0xeb
 5059 046c 14       		.uleb128 0x14
 5060 046d 21000000 		.4byte	.LASF86
 5061 0471 02       		.byte	0x2
 5062 0472 84       		.byte	0x84
 5063 0473 CA000000 		.4byte	0xca
 5064 0477 00       		.byte	0
 5065 0478 17       		.uleb128 0x17
 5066 0479 730E0000 		.4byte	.LASF89
 5067 047d 01       		.byte	0x1
 5068 047e 0D07     		.2byte	0x70d
 5069 0480 35010000 		.4byte	0x135
 5070 0484 00000000 		.4byte	.LFB79
 5071 0488 2C000000 		.4byte	.LFE79-.LFB79
 5072 048c 01       		.uleb128 0x1
 5073 048d 9C       		.byte	0x9c
 5074 048e C3040000 		.4byte	0x4c3
 5075 0492 18       		.uleb128 0x18
 5076 0493 8C0B0000 		.4byte	.LASF91
 5077 0497 01       		.byte	0x1
 5078 0498 0D07     		.2byte	0x70d
 5079 049a C3040000 		.4byte	0x4c3
 5080 049e 00000000 		.4byte	.LLST0
 5081 04a2 19       		.uleb128 0x19
 5082 04a3 6B040000 		.4byte	.LASF87
 5083 04a7 01       		.byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 197


 5084 04a8 0F07     		.2byte	0x70f
 5085 04aa 35010000 		.4byte	0x135
 5086 04ae 6C000000 		.4byte	.LLST1
 5087 04b2 19       		.uleb128 0x19
 5088 04b3 7D050000 		.4byte	.LASF88
 5089 04b7 01       		.byte	0x1
 5090 04b8 1007     		.2byte	0x710
 5091 04ba D3040000 		.4byte	0x4d3
 5092 04be 8B000000 		.4byte	.LLST2
 5093 04c2 00       		.byte	0
 5094 04c3 07       		.uleb128 0x7
 5095 04c4 3F020000 		.4byte	0x23f
 5096 04c8 06       		.uleb128 0x6
 5097 04c9 04       		.byte	0x4
 5098 04ca CE040000 		.4byte	0x4ce
 5099 04ce 07       		.uleb128 0x7
 5100 04cf EE030000 		.4byte	0x3ee
 5101 04d3 07       		.uleb128 0x7
 5102 04d4 C8040000 		.4byte	0x4c8
 5103 04d8 17       		.uleb128 0x17
 5104 04d9 2A090000 		.4byte	.LASF90
 5105 04dd 01       		.byte	0x1
 5106 04de D70E     		.2byte	0xed7
 5107 04e0 D5000000 		.4byte	0xd5
 5108 04e4 00000000 		.4byte	.LFB104
 5109 04e8 14000000 		.4byte	.LFE104-.LFB104
 5110 04ec 01       		.uleb128 0x1
 5111 04ed 9C       		.byte	0x9c
 5112 04ee 13050000 		.4byte	0x513
 5113 04f2 18       		.uleb128 0x18
 5114 04f3 5D060000 		.4byte	.LASF92
 5115 04f7 01       		.byte	0x1
 5116 04f8 D70E     		.2byte	0xed7
 5117 04fa 13050000 		.4byte	0x513
 5118 04fe F7000000 		.4byte	.LLST3
 5119 0502 19       		.uleb128 0x19
 5120 0503 CC070000 		.4byte	.LASF93
 5121 0507 01       		.byte	0x1
 5122 0508 D90E     		.2byte	0xed9
 5123 050a EB000000 		.4byte	0xeb
 5124 050e 15010000 		.4byte	.LLST4
 5125 0512 00       		.byte	0
 5126 0513 06       		.uleb128 0x6
 5127 0514 04       		.byte	0x4
 5128 0515 19050000 		.4byte	0x519
 5129 0519 07       		.uleb128 0x7
 5130 051a CA000000 		.4byte	0xca
 5131 051e 1A       		.uleb128 0x1a
 5132 051f 5E030000 		.4byte	.LASF94
 5133 0523 01       		.byte	0x1
 5134 0524 670F     		.2byte	0xf67
 5135 0526 00000000 		.4byte	.LFB107
 5136 052a 24000000 		.4byte	.LFE107-.LFB107
 5137 052e 01       		.uleb128 0x1
 5138 052f 9C       		.byte	0x9c
 5139 0530 45050000 		.4byte	0x545
 5140 0534 19       		.uleb128 0x19
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 198


 5141 0535 7D050000 		.4byte	.LASF88
 5142 0539 01       		.byte	0x1
 5143 053a 690F     		.2byte	0xf69
 5144 053c 45050000 		.4byte	0x545
 5145 0540 43010000 		.4byte	.LLST5
 5146 0544 00       		.byte	0
 5147 0545 06       		.uleb128 0x6
 5148 0546 04       		.byte	0x4
 5149 0547 EE030000 		.4byte	0x3ee
 5150 054b 1A       		.uleb128 0x1a
 5151 054c 6A060000 		.4byte	.LASF95
 5152 0550 01       		.byte	0x1
 5153 0551 2F0F     		.2byte	0xf2f
 5154 0553 00000000 		.4byte	.LFB106
 5155 0557 12000000 		.4byte	.LFE106-.LFB106
 5156 055b 01       		.uleb128 0x1
 5157 055c 9C       		.byte	0x9c
 5158 055d 8B050000 		.4byte	0x58b
 5159 0561 18       		.uleb128 0x18
 5160 0562 7D050000 		.4byte	.LASF88
 5161 0566 01       		.byte	0x1
 5162 0567 2F0F     		.2byte	0xf2f
 5163 0569 45050000 		.4byte	0x545
 5164 056d 56010000 		.4byte	.LLST6
 5165 0571 1B       		.uleb128 0x1b
 5166 0572 0A000000 		.4byte	.LVL18
 5167 0576 5A200000 		.4byte	0x205a
 5168 057a 1C       		.uleb128 0x1c
 5169 057b 10000000 		.4byte	.LVL19
 5170 057f 5A200000 		.4byte	0x205a
 5171 0583 1D       		.uleb128 0x1d
 5172 0584 01       		.uleb128 0x1
 5173 0585 50       		.byte	0x50
 5174 0586 02       		.uleb128 0x2
 5175 0587 74       		.byte	0x74
 5176 0588 00       		.sleb128 0
 5177 0589 00       		.byte	0
 5178 058a 00       		.byte	0
 5179 058b 1A       		.uleb128 0x1a
 5180 058c D60A0000 		.4byte	.LASF96
 5181 0590 01       		.byte	0x1
 5182 0591 3803     		.2byte	0x338
 5183 0593 00000000 		.4byte	.LFB69
 5184 0597 9C000000 		.4byte	.LFE69-.LFB69
 5185 059b 01       		.uleb128 0x1
 5186 059c 9C       		.byte	0x9c
 5187 059d 9B060000 		.4byte	0x69b
 5188 05a1 18       		.uleb128 0x18
 5189 05a2 8B070000 		.4byte	.LASF97
 5190 05a6 01       		.byte	0x1
 5191 05a7 3803     		.2byte	0x338
 5192 05a9 0E010000 		.4byte	0x10e
 5193 05ad 74010000 		.4byte	.LLST7
 5194 05b1 18       		.uleb128 0x18
 5195 05b2 6D0F0000 		.4byte	.LASF98
 5196 05b6 01       		.byte	0x1
 5197 05b7 3903     		.2byte	0x339
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 199


 5198 05b9 BC030000 		.4byte	0x3bc
 5199 05bd 92010000 		.4byte	.LLST8
 5200 05c1 18       		.uleb128 0x18
 5201 05c2 1E040000 		.4byte	.LASF99
 5202 05c6 01       		.byte	0x1
 5203 05c7 3A03     		.2byte	0x33a
 5204 05c9 9B060000 		.4byte	0x69b
 5205 05cd BE010000 		.4byte	.LLST9
 5206 05d1 18       		.uleb128 0x18
 5207 05d2 06050000 		.4byte	.LASF100
 5208 05d6 01       		.byte	0x1
 5209 05d7 3B03     		.2byte	0x33b
 5210 05d9 A0060000 		.4byte	0x6a0
 5211 05dd FB010000 		.4byte	.LLST10
 5212 05e1 18       		.uleb128 0x18
 5213 05e2 360F0000 		.4byte	.LASF47
 5214 05e6 01       		.byte	0x1
 5215 05e7 3C03     		.2byte	0x33c
 5216 05e9 40010000 		.4byte	0x140
 5217 05ed 19020000 		.4byte	.LLST11
 5218 05f1 1E       		.uleb128 0x1e
 5219 05f2 B4040000 		.4byte	.LASF101
 5220 05f6 01       		.byte	0x1
 5221 05f7 3D03     		.2byte	0x33d
 5222 05f9 AB060000 		.4byte	0x6ab
 5223 05fd 02       		.uleb128 0x2
 5224 05fe 91       		.byte	0x91
 5225 05ff 04       		.sleb128 4
 5226 0600 1E       		.uleb128 0x1e
 5227 0601 69020000 		.4byte	.LASF102
 5228 0605 01       		.byte	0x1
 5229 0606 3E03     		.2byte	0x33e
 5230 0608 45050000 		.4byte	0x545
 5231 060c 02       		.uleb128 0x2
 5232 060d 91       		.byte	0x91
 5233 060e 08       		.sleb128 8
 5234 060f 1E       		.uleb128 0x1e
 5235 0610 24070000 		.4byte	.LASF103
 5236 0614 01       		.byte	0x1
 5237 0615 3F03     		.2byte	0x33f
 5238 0617 BB060000 		.4byte	0x6bb
 5239 061b 02       		.uleb128 0x2
 5240 061c 91       		.byte	0x91
 5241 061d 0C       		.sleb128 12
 5242 061e 1F       		.uleb128 0x1f
 5243 061f F9040000 		.4byte	.LASF44
 5244 0623 01       		.byte	0x1
 5245 0624 4103     		.2byte	0x341
 5246 0626 C1030000 		.4byte	0x3c1
 5247 062a 01       		.uleb128 0x1
 5248 062b 57       		.byte	0x57
 5249 062c 20       		.uleb128 0x20
 5250 062d 7800     		.ascii	"x\000"
 5251 062f 01       		.byte	0x1
 5252 0630 4203     		.2byte	0x342
 5253 0632 40010000 		.4byte	0x140
 5254 0636 38020000 		.4byte	.LLST12
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 200


 5255 063a 21       		.uleb128 0x21
 5256 063b 1E000000 		.4byte	.LVL24
 5257 063f 65200000 		.4byte	0x2065
 5258 0643 56060000 		.4byte	0x656
 5259 0647 1D       		.uleb128 0x1d
 5260 0648 01       		.uleb128 0x1
 5261 0649 51       		.byte	0x51
 5262 064a 02       		.uleb128 0x2
 5263 064b 08       		.byte	0x8
 5264 064c A5       		.byte	0xa5
 5265 064d 1D       		.uleb128 0x1d
 5266 064e 01       		.uleb128 0x1
 5267 064f 52       		.byte	0x52
 5268 0650 04       		.uleb128 0x4
 5269 0651 77       		.byte	0x77
 5270 0652 00       		.sleb128 0
 5271 0653 32       		.byte	0x32
 5272 0654 24       		.byte	0x24
 5273 0655 00       		.byte	0
 5274 0656 21       		.uleb128 0x21
 5275 0657 6A000000 		.4byte	.LVL34
 5276 065b 70200000 		.4byte	0x2070
 5277 065f 6A060000 		.4byte	0x66a
 5278 0663 1D       		.uleb128 0x1d
 5279 0664 01       		.uleb128 0x1
 5280 0665 50       		.byte	0x50
 5281 0666 02       		.uleb128 0x2
 5282 0667 74       		.byte	0x74
 5283 0668 04       		.sleb128 4
 5284 0669 00       		.byte	0
 5285 066a 21       		.uleb128 0x21
 5286 066b 72000000 		.4byte	.LVL35
 5287 066f 70200000 		.4byte	0x2070
 5288 0673 7E060000 		.4byte	0x67e
 5289 0677 1D       		.uleb128 0x1d
 5290 0678 01       		.uleb128 0x1
 5291 0679 50       		.byte	0x50
 5292 067a 02       		.uleb128 0x2
 5293 067b 74       		.byte	0x74
 5294 067c 18       		.sleb128 24
 5295 067d 00       		.byte	0
 5296 067e 1C       		.uleb128 0x1c
 5297 067f 8C000000 		.4byte	.LVL37
 5298 0683 7C200000 		.4byte	0x207c
 5299 0687 1D       		.uleb128 0x1d
 5300 0688 01       		.uleb128 0x1
 5301 0689 50       		.byte	0x50
 5302 068a 02       		.uleb128 0x2
 5303 068b 77       		.byte	0x77
 5304 068c 00       		.sleb128 0
 5305 068d 1D       		.uleb128 0x1d
 5306 068e 01       		.uleb128 0x1
 5307 068f 51       		.byte	0x51
 5308 0690 02       		.uleb128 0x2
 5309 0691 79       		.byte	0x79
 5310 0692 00       		.sleb128 0
 5311 0693 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 201


 5312 0694 01       		.uleb128 0x1
 5313 0695 52       		.byte	0x52
 5314 0696 02       		.uleb128 0x2
 5315 0697 7A       		.byte	0x7a
 5316 0698 00       		.sleb128 0
 5317 0699 00       		.byte	0
 5318 069a 00       		.byte	0
 5319 069b 07       		.uleb128 0x7
 5320 069c EB000000 		.4byte	0xeb
 5321 06a0 07       		.uleb128 0x7
 5322 06a1 B0000000 		.4byte	0xb0
 5323 06a5 06       		.uleb128 0x6
 5324 06a6 04       		.byte	0x4
 5325 06a7 3F020000 		.4byte	0x23f
 5326 06ab 07       		.uleb128 0x7
 5327 06ac A5060000 		.4byte	0x6a5
 5328 06b0 06       		.uleb128 0x6
 5329 06b1 04       		.byte	0x4
 5330 06b2 B6060000 		.4byte	0x6b6
 5331 06b6 07       		.uleb128 0x7
 5332 06b7 B1030000 		.4byte	0x3b1
 5333 06bb 07       		.uleb128 0x7
 5334 06bc B0060000 		.4byte	0x6b0
 5335 06c0 1A       		.uleb128 0x1a
 5336 06c1 F60F0000 		.4byte	.LASF104
 5337 06c5 01       		.byte	0x1
 5338 06c6 170E     		.2byte	0xe17
 5339 06c8 00000000 		.4byte	.LFB102
 5340 06cc 58000000 		.4byte	.LFE102-.LFB102
 5341 06d0 01       		.uleb128 0x1
 5342 06d1 9C       		.byte	0x9c
 5343 06d2 69070000 		.4byte	0x769
 5344 06d6 19       		.uleb128 0x19
 5345 06d7 360F0000 		.4byte	.LASF47
 5346 06db 01       		.byte	0x1
 5347 06dc 190E     		.2byte	0xe19
 5348 06de 40010000 		.4byte	0x140
 5349 06e2 56020000 		.4byte	.LLST13
 5350 06e6 21       		.uleb128 0x21
 5351 06e7 14000000 		.4byte	.LVL40
 5352 06eb 87200000 		.4byte	0x2087
 5353 06ef 07070000 		.4byte	0x707
 5354 06f3 1D       		.uleb128 0x1d
 5355 06f4 01       		.uleb128 0x1
 5356 06f5 50       		.byte	0x50
 5357 06f6 0F       		.uleb128 0xf
 5358 06f7 74       		.byte	0x74
 5359 06f8 00       		.sleb128 0
 5360 06f9 32       		.byte	0x32
 5361 06fa 24       		.byte	0x24
 5362 06fb 74       		.byte	0x74
 5363 06fc 00       		.sleb128 0
 5364 06fd 22       		.byte	0x22
 5365 06fe 32       		.byte	0x32
 5366 06ff 24       		.byte	0x24
 5367 0700 03       		.byte	0x3
 5368 0701 30000000 		.4byte	.LANCHOR0+48
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 202


 5369 0705 22       		.byte	0x22
 5370 0706 00       		.byte	0
 5371 0707 21       		.uleb128 0x21
 5372 0708 26000000 		.4byte	.LVL43
 5373 070c 87200000 		.4byte	0x2087
 5374 0710 1B070000 		.4byte	0x71b
 5375 0714 1D       		.uleb128 0x1d
 5376 0715 01       		.uleb128 0x1
 5377 0716 50       		.byte	0x50
 5378 0717 02       		.uleb128 0x2
 5379 0718 76       		.byte	0x76
 5380 0719 00       		.sleb128 0
 5381 071a 00       		.byte	0
 5382 071b 21       		.uleb128 0x21
 5383 071c 30000000 		.4byte	.LVL44
 5384 0720 87200000 		.4byte	0x2087
 5385 0724 2F070000 		.4byte	0x72f
 5386 0728 1D       		.uleb128 0x1d
 5387 0729 01       		.uleb128 0x1
 5388 072a 50       		.byte	0x50
 5389 072b 02       		.uleb128 0x2
 5390 072c 75       		.byte	0x75
 5391 072d 00       		.sleb128 0
 5392 072e 00       		.byte	0
 5393 072f 21       		.uleb128 0x21
 5394 0730 38000000 		.4byte	.LVL45
 5395 0734 87200000 		.4byte	0x2087
 5396 0738 43070000 		.4byte	0x743
 5397 073c 1D       		.uleb128 0x1d
 5398 073d 01       		.uleb128 0x1
 5399 073e 50       		.byte	0x50
 5400 073f 02       		.uleb128 0x2
 5401 0740 74       		.byte	0x74
 5402 0741 14       		.sleb128 20
 5403 0742 00       		.byte	0
 5404 0743 21       		.uleb128 0x21
 5405 0744 40000000 		.4byte	.LVL46
 5406 0748 87200000 		.4byte	0x2087
 5407 074c 58070000 		.4byte	0x758
 5408 0750 1D       		.uleb128 0x1d
 5409 0751 01       		.uleb128 0x1
 5410 0752 50       		.byte	0x50
 5411 0753 03       		.uleb128 0x3
 5412 0754 74       		.byte	0x74
 5413 0755 BC01     		.sleb128 188
 5414 0757 00       		.byte	0
 5415 0758 1C       		.uleb128 0x1c
 5416 0759 46000000 		.4byte	.LVL47
 5417 075d 87200000 		.4byte	0x2087
 5418 0761 1D       		.uleb128 0x1d
 5419 0762 01       		.uleb128 0x1
 5420 0763 50       		.byte	0x50
 5421 0764 02       		.uleb128 0x2
 5422 0765 74       		.byte	0x74
 5423 0766 00       		.sleb128 0
 5424 0767 00       		.byte	0
 5425 0768 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 203


 5426 0769 1A       		.uleb128 0x1a
 5427 076a B4050000 		.4byte	.LASF105
 5428 076e 01       		.byte	0x1
 5429 076f 3504     		.2byte	0x435
 5430 0771 00000000 		.4byte	.LFB70
 5431 0775 AC000000 		.4byte	.LFE70-.LFB70
 5432 0779 01       		.uleb128 0x1
 5433 077a 9C       		.byte	0x9c
 5434 077b BF070000 		.4byte	0x7bf
 5435 077f 18       		.uleb128 0x18
 5436 0780 69020000 		.4byte	.LASF102
 5437 0784 01       		.byte	0x1
 5438 0785 3504     		.2byte	0x435
 5439 0787 45050000 		.4byte	0x545
 5440 078b 75020000 		.4byte	.LLST14
 5441 078f 1B       		.uleb128 0x1b
 5442 0790 08000000 		.4byte	.LVL49
 5443 0794 93200000 		.4byte	0x2093
 5444 0798 1B       		.uleb128 0x1b
 5445 0799 2C000000 		.4byte	.LVL50
 5446 079d C0060000 		.4byte	0x6c0
 5447 07a1 21       		.uleb128 0x21
 5448 07a2 7A000000 		.4byte	.LVL51
 5449 07a6 9E200000 		.4byte	0x209e
 5450 07aa B5070000 		.4byte	0x7b5
 5451 07ae 1D       		.uleb128 0x1d
 5452 07af 01       		.uleb128 0x1
 5453 07b0 51       		.byte	0x51
 5454 07b1 02       		.uleb128 0x2
 5455 07b2 75       		.byte	0x75
 5456 07b3 04       		.sleb128 4
 5457 07b4 00       		.byte	0
 5458 07b5 1B       		.uleb128 0x1b
 5459 07b6 7E000000 		.4byte	.LVL52
 5460 07ba AA200000 		.4byte	0x20aa
 5461 07be 00       		.byte	0
 5462 07bf 1A       		.uleb128 0x1a
 5463 07c0 6C0B0000 		.4byte	.LASF106
 5464 07c4 01       		.byte	0x1
 5465 07c5 370E     		.2byte	0xe37
 5466 07c7 00000000 		.4byte	.LFB103
 5467 07cb 44000000 		.4byte	.LFE103-.LFB103
 5468 07cf 01       		.uleb128 0x1
 5469 07d0 9C       		.byte	0x9c
 5470 07d1 26080000 		.4byte	0x826
 5471 07d5 22       		.uleb128 0x22
 5472 07d6 02000000 		.4byte	.LBB27
 5473 07da 3C000000 		.4byte	.LBE27-.LBB27
 5474 07de 19       		.uleb128 0x19
 5475 07df 7D050000 		.4byte	.LASF88
 5476 07e3 01       		.byte	0x1
 5477 07e4 3E0E     		.2byte	0xe3e
 5478 07e6 45050000 		.4byte	0x545
 5479 07ea A1020000 		.4byte	.LLST15
 5480 07ee 1B       		.uleb128 0x1b
 5481 07ef 08000000 		.4byte	.LVL54
 5482 07f3 93200000 		.4byte	0x2093
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 204


 5483 07f7 21       		.uleb128 0x21
 5484 07f8 16000000 		.4byte	.LVL56
 5485 07fc B5200000 		.4byte	0x20b5
 5486 0800 0B080000 		.4byte	0x80b
 5487 0804 1D       		.uleb128 0x1d
 5488 0805 01       		.uleb128 0x1
 5489 0806 50       		.byte	0x50
 5490 0807 02       		.uleb128 0x2
 5491 0808 75       		.byte	0x75
 5492 0809 04       		.sleb128 4
 5493 080a 00       		.byte	0
 5494 080b 1B       		.uleb128 0x1b
 5495 080c 2E000000 		.4byte	.LVL57
 5496 0810 AA200000 		.4byte	0x20aa
 5497 0814 1C       		.uleb128 0x1c
 5498 0815 34000000 		.4byte	.LVL58
 5499 0819 4B050000 		.4byte	0x54b
 5500 081d 1D       		.uleb128 0x1d
 5501 081e 01       		.uleb128 0x1
 5502 081f 50       		.byte	0x50
 5503 0820 02       		.uleb128 0x2
 5504 0821 75       		.byte	0x75
 5505 0822 00       		.sleb128 0
 5506 0823 00       		.byte	0
 5507 0824 00       		.byte	0
 5508 0825 00       		.byte	0
 5509 0826 23       		.uleb128 0x23
 5510 0827 77060000 		.4byte	.LASF107
 5511 082b 01       		.byte	0x1
 5512 082c 400D     		.2byte	0xd40
 5513 082e 00000000 		.4byte	.LFB101
 5514 0832 08000000 		.4byte	.LFE101-.LFB101
 5515 0836 01       		.uleb128 0x1
 5516 0837 9C       		.byte	0x9c
 5517 0838 56080000 		.4byte	0x856
 5518 083c 18       		.uleb128 0x18
 5519 083d 06050000 		.4byte	.LASF100
 5520 0841 01       		.byte	0x1
 5521 0842 400D     		.2byte	0xd40
 5522 0844 B0000000 		.4byte	0xb0
 5523 0848 B4020000 		.4byte	.LLST16
 5524 084c 1B       		.uleb128 0x1b
 5525 084d 06000000 		.4byte	.LVL61
 5526 0851 BF070000 		.4byte	0x7bf
 5527 0855 00       		.byte	0
 5528 0856 1A       		.uleb128 0x1a
 5529 0857 D80B0000 		.4byte	.LASF108
 5530 085b 01       		.byte	0x1
 5531 085c 3914     		.2byte	0x1439
 5532 085e 00000000 		.4byte	.LFB121
 5533 0862 84000000 		.4byte	.LFE121-.LFB121
 5534 0866 01       		.uleb128 0x1
 5535 0867 9C       		.byte	0x9c
 5536 0868 DF080000 		.4byte	0x8df
 5537 086c 18       		.uleb128 0x18
 5538 086d C1010000 		.4byte	.LASF109
 5539 0871 01       		.byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 205


 5540 0872 3914     		.2byte	0x1439
 5541 0874 4B010000 		.4byte	0x14b
 5542 0878 D5020000 		.4byte	.LLST17
 5543 087c 18       		.uleb128 0x18
 5544 087d 0B000000 		.4byte	.LASF110
 5545 0881 01       		.byte	0x1
 5546 0882 3914     		.2byte	0x1439
 5547 0884 DF080000 		.4byte	0x8df
 5548 0888 01030000 		.4byte	.LLST18
 5549 088c 19       		.uleb128 0x19
 5550 088d 19010000 		.4byte	.LASF111
 5551 0891 01       		.byte	0x1
 5552 0892 3B14     		.2byte	0x143b
 5553 0894 4B010000 		.4byte	0x14b
 5554 0898 2D030000 		.4byte	.LLST19
 5555 089c 19       		.uleb128 0x19
 5556 089d 73040000 		.4byte	.LASF112
 5557 08a1 01       		.byte	0x1
 5558 08a2 3C14     		.2byte	0x143c
 5559 08a4 E4080000 		.4byte	0x8e4
 5560 08a8 40030000 		.4byte	.LLST20
 5561 08ac 1B       		.uleb128 0x1b
 5562 08ad 16000000 		.4byte	.LVL65
 5563 08b1 B5200000 		.4byte	0x20b5
 5564 08b5 21       		.uleb128 0x21
 5565 08b6 46000000 		.4byte	.LVL66
 5566 08ba 9E200000 		.4byte	0x209e
 5567 08be CC080000 		.4byte	0x8cc
 5568 08c2 1D       		.uleb128 0x1d
 5569 08c3 01       		.uleb128 0x1
 5570 08c4 50       		.byte	0x50
 5571 08c5 05       		.uleb128 0x5
 5572 08c6 03       		.byte	0x3
 5573 08c7 00000000 		.4byte	.LANCHOR0
 5574 08cb 00       		.byte	0
 5575 08cc 1B       		.uleb128 0x1b
 5576 08cd 66000000 		.4byte	.LVL69
 5577 08d1 C1200000 		.4byte	0x20c1
 5578 08d5 1B       		.uleb128 0x1b
 5579 08d6 76000000 		.4byte	.LVL72
 5580 08da C1200000 		.4byte	0x20c1
 5581 08de 00       		.byte	0
 5582 08df 07       		.uleb128 0x7
 5583 08e0 35010000 		.4byte	0x135
 5584 08e4 07       		.uleb128 0x7
 5585 08e5 4B010000 		.4byte	0x14b
 5586 08e9 24       		.uleb128 0x24
 5587 08ea 56070000 		.4byte	.LASF115
 5588 08ee 01       		.byte	0x1
 5589 08ef DD02     		.2byte	0x2dd
 5590 08f1 35010000 		.4byte	0x135
 5591 08f5 00000000 		.4byte	.LFB68
 5592 08f9 62000000 		.4byte	.LFE68-.LFB68
 5593 08fd 01       		.uleb128 0x1
 5594 08fe 9C       		.byte	0x9c
 5595 08ff 2D0A0000 		.4byte	0xa2d
 5596 0903 18       		.uleb128 0x18
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 206


 5597 0904 8B070000 		.4byte	.LASF97
 5598 0908 01       		.byte	0x1
 5599 0909 DD02     		.2byte	0x2dd
 5600 090b 0E010000 		.4byte	0x10e
 5601 090f 53030000 		.4byte	.LLST21
 5602 0913 18       		.uleb128 0x18
 5603 0914 6D0F0000 		.4byte	.LASF98
 5604 0918 01       		.byte	0x1
 5605 0919 DE02     		.2byte	0x2de
 5606 091b BC030000 		.4byte	0x3bc
 5607 091f 71030000 		.4byte	.LLST22
 5608 0923 18       		.uleb128 0x18
 5609 0924 85030000 		.4byte	.LASF113
 5610 0928 01       		.byte	0x1
 5611 0929 DF02     		.2byte	0x2df
 5612 092b 2D0A0000 		.4byte	0xa2d
 5613 092f 8F030000 		.4byte	.LLST23
 5614 0933 18       		.uleb128 0x18
 5615 0934 06050000 		.4byte	.LASF100
 5616 0938 01       		.byte	0x1
 5617 0939 E002     		.2byte	0x2e0
 5618 093b A0060000 		.4byte	0x6a0
 5619 093f B0030000 		.4byte	.LLST24
 5620 0943 1E       		.uleb128 0x1e
 5621 0944 360F0000 		.4byte	.LASF47
 5622 0948 01       		.byte	0x1
 5623 0949 E102     		.2byte	0x2e1
 5624 094b 40010000 		.4byte	0x140
 5625 094f 02       		.uleb128 0x2
 5626 0950 91       		.byte	0x91
 5627 0951 00       		.sleb128 0
 5628 0952 1E       		.uleb128 0x1e
 5629 0953 B4040000 		.4byte	.LASF101
 5630 0957 01       		.byte	0x1
 5631 0958 E202     		.2byte	0x2e2
 5632 095a AB060000 		.4byte	0x6ab
 5633 095e 02       		.uleb128 0x2
 5634 095f 91       		.byte	0x91
 5635 0960 04       		.sleb128 4
 5636 0961 19       		.uleb128 0x19
 5637 0962 69020000 		.4byte	.LASF102
 5638 0966 01       		.byte	0x1
 5639 0967 E402     		.2byte	0x2e4
 5640 0969 45050000 		.4byte	0x545
 5641 096d CE030000 		.4byte	.LLST25
 5642 0971 19       		.uleb128 0x19
 5643 0972 6B040000 		.4byte	.LASF87
 5644 0976 01       		.byte	0x1
 5645 0977 E502     		.2byte	0x2e5
 5646 0979 35010000 		.4byte	0x135
 5647 097d F7030000 		.4byte	.LLST26
 5648 0981 25       		.uleb128 0x25
 5649 0982 0E000000 		.4byte	.LBB28
 5650 0986 24000000 		.4byte	.LBE28-.LBB28
 5651 098a D9090000 		.4byte	0x9d9
 5652 098e 19       		.uleb128 0x19
 5653 098f BC060000 		.4byte	.LASF48
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 207


 5654 0993 01       		.byte	0x1
 5655 0994 0203     		.2byte	0x302
 5656 0996 C1030000 		.4byte	0x3c1
 5657 099a 16040000 		.4byte	.LLST27
 5658 099e 21       		.uleb128 0x21
 5659 099f 14000000 		.4byte	.LVL76
 5660 09a3 CD200000 		.4byte	0x20cd
 5661 09a7 B4090000 		.4byte	0x9b4
 5662 09ab 1D       		.uleb128 0x1d
 5663 09ac 01       		.uleb128 0x1
 5664 09ad 50       		.byte	0x50
 5665 09ae 04       		.uleb128 0x4
 5666 09af 75       		.byte	0x75
 5667 09b0 00       		.sleb128 0
 5668 09b1 32       		.byte	0x32
 5669 09b2 24       		.byte	0x24
 5670 09b3 00       		.byte	0
 5671 09b4 21       		.uleb128 0x21
 5672 09b5 1E000000 		.4byte	.LVL78
 5673 09b9 CD200000 		.4byte	0x20cd
 5674 09bd C8090000 		.4byte	0x9c8
 5675 09c1 1D       		.uleb128 0x1d
 5676 09c2 01       		.uleb128 0x1
 5677 09c3 50       		.byte	0x50
 5678 09c4 02       		.uleb128 0x2
 5679 09c5 08       		.byte	0x8
 5680 09c6 50       		.byte	0x50
 5681 09c7 00       		.byte	0
 5682 09c8 1C       		.uleb128 0x1c
 5683 09c9 2E000000 		.4byte	.LVL80
 5684 09cd 5A200000 		.4byte	0x205a
 5685 09d1 1D       		.uleb128 0x1d
 5686 09d2 01       		.uleb128 0x1
 5687 09d3 50       		.byte	0x50
 5688 09d4 02       		.uleb128 0x2
 5689 09d5 79       		.byte	0x79
 5690 09d6 00       		.sleb128 0
 5691 09d7 00       		.byte	0
 5692 09d8 00       		.byte	0
 5693 09d9 21       		.uleb128 0x21
 5694 09da 4E000000 		.4byte	.LVL83
 5695 09de 8B050000 		.4byte	0x58b
 5696 09e2 1C0A0000 		.4byte	0xa1c
 5697 09e6 1D       		.uleb128 0x1d
 5698 09e7 01       		.uleb128 0x1
 5699 09e8 50       		.byte	0x50
 5700 09e9 02       		.uleb128 0x2
 5701 09ea 76       		.byte	0x76
 5702 09eb 00       		.sleb128 0
 5703 09ec 1D       		.uleb128 0x1d
 5704 09ed 01       		.uleb128 0x1
 5705 09ee 51       		.byte	0x51
 5706 09ef 02       		.uleb128 0x2
 5707 09f0 77       		.byte	0x77
 5708 09f1 00       		.sleb128 0
 5709 09f2 1D       		.uleb128 0x1d
 5710 09f3 01       		.uleb128 0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 208


 5711 09f4 52       		.byte	0x52
 5712 09f5 02       		.uleb128 0x2
 5713 09f6 75       		.byte	0x75
 5714 09f7 00       		.sleb128 0
 5715 09f8 1D       		.uleb128 0x1d
 5716 09f9 01       		.uleb128 0x1
 5717 09fa 53       		.byte	0x53
 5718 09fb 02       		.uleb128 0x2
 5719 09fc 78       		.byte	0x78
 5720 09fd 00       		.sleb128 0
 5721 09fe 1D       		.uleb128 0x1d
 5722 09ff 02       		.uleb128 0x2
 5723 0a00 7D       		.byte	0x7d
 5724 0a01 00       		.sleb128 0
 5725 0a02 03       		.uleb128 0x3
 5726 0a03 91       		.byte	0x91
 5727 0a04 00       		.sleb128 0
 5728 0a05 06       		.byte	0x6
 5729 0a06 1D       		.uleb128 0x1d
 5730 0a07 02       		.uleb128 0x2
 5731 0a08 7D       		.byte	0x7d
 5732 0a09 04       		.sleb128 4
 5733 0a0a 03       		.uleb128 0x3
 5734 0a0b 91       		.byte	0x91
 5735 0a0c 04       		.sleb128 4
 5736 0a0d 06       		.byte	0x6
 5737 0a0e 1D       		.uleb128 0x1d
 5738 0a0f 02       		.uleb128 0x2
 5739 0a10 7D       		.byte	0x7d
 5740 0a11 08       		.sleb128 8
 5741 0a12 02       		.uleb128 0x2
 5742 0a13 74       		.byte	0x74
 5743 0a14 00       		.sleb128 0
 5744 0a15 1D       		.uleb128 0x1d
 5745 0a16 02       		.uleb128 0x2
 5746 0a17 7D       		.byte	0x7d
 5747 0a18 0C       		.sleb128 12
 5748 0a19 01       		.uleb128 0x1
 5749 0a1a 30       		.byte	0x30
 5750 0a1b 00       		.byte	0
 5751 0a1c 1C       		.uleb128 0x1c
 5752 0a1d 54000000 		.4byte	.LVL84
 5753 0a21 69070000 		.4byte	0x769
 5754 0a25 1D       		.uleb128 0x1d
 5755 0a26 01       		.uleb128 0x1
 5756 0a27 50       		.byte	0x50
 5757 0a28 02       		.uleb128 0x2
 5758 0a29 74       		.byte	0x74
 5759 0a2a 00       		.sleb128 0
 5760 0a2b 00       		.byte	0
 5761 0a2c 00       		.byte	0
 5762 0a2d 07       		.uleb128 0x7
 5763 0a2e D5000000 		.4byte	0xd5
 5764 0a32 26       		.uleb128 0x26
 5765 0a33 700C0000 		.4byte	.LASF125
 5766 0a37 01       		.byte	0x1
 5767 0a38 8A04     		.2byte	0x48a
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 209


 5768 0a3a 00000000 		.4byte	.LFB71
 5769 0a3e BC000000 		.4byte	.LFE71-.LFB71
 5770 0a42 01       		.uleb128 0x1
 5771 0a43 9C       		.byte	0x9c
 5772 0a44 DB0A0000 		.4byte	0xadb
 5773 0a48 18       		.uleb128 0x18
 5774 0a49 B0080000 		.4byte	.LASF114
 5775 0a4d 01       		.byte	0x1
 5776 0a4e 8A04     		.2byte	0x48a
 5777 0a50 3F020000 		.4byte	0x23f
 5778 0a54 3F040000 		.4byte	.LLST28
 5779 0a58 19       		.uleb128 0x19
 5780 0a59 7D050000 		.4byte	.LASF88
 5781 0a5d 01       		.byte	0x1
 5782 0a5e 8C04     		.2byte	0x48c
 5783 0a60 45050000 		.4byte	0x545
 5784 0a64 5D040000 		.4byte	.LLST29
 5785 0a68 1B       		.uleb128 0x1b
 5786 0a69 08000000 		.4byte	.LVL88
 5787 0a6d 93200000 		.4byte	0x2093
 5788 0a71 21       		.uleb128 0x21
 5789 0a72 18000000 		.4byte	.LVL90
 5790 0a76 B5200000 		.4byte	0x20b5
 5791 0a7a 850A0000 		.4byte	0xa85
 5792 0a7e 1D       		.uleb128 0x1d
 5793 0a7f 01       		.uleb128 0x1
 5794 0a80 50       		.byte	0x50
 5795 0a81 02       		.uleb128 0x2
 5796 0a82 75       		.byte	0x75
 5797 0a83 00       		.sleb128 0
 5798 0a84 00       		.byte	0
 5799 0a85 21       		.uleb128 0x21
 5800 0a86 48000000 		.4byte	.LVL91
 5801 0a8a B5200000 		.4byte	0x20b5
 5802 0a8e 990A0000 		.4byte	0xa99
 5803 0a92 1D       		.uleb128 0x1d
 5804 0a93 01       		.uleb128 0x1
 5805 0a94 50       		.byte	0x50
 5806 0a95 02       		.uleb128 0x2
 5807 0a96 74       		.byte	0x74
 5808 0a97 18       		.sleb128 24
 5809 0a98 00       		.byte	0
 5810 0a99 21       		.uleb128 0x21
 5811 0a9a 68000000 		.4byte	.LVL92
 5812 0a9e 9E200000 		.4byte	0x209e
 5813 0aa2 B40A0000 		.4byte	0xab4
 5814 0aa6 1D       		.uleb128 0x1d
 5815 0aa7 01       		.uleb128 0x1
 5816 0aa8 50       		.byte	0x50
 5817 0aa9 03       		.uleb128 0x3
 5818 0aaa 76       		.byte	0x76
 5819 0aab BC01     		.sleb128 188
 5820 0aad 1D       		.uleb128 0x1d
 5821 0aae 01       		.uleb128 0x1
 5822 0aaf 51       		.byte	0x51
 5823 0ab0 02       		.uleb128 0x2
 5824 0ab1 75       		.byte	0x75
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 210


 5825 0ab2 00       		.sleb128 0
 5826 0ab3 00       		.byte	0
 5827 0ab4 21       		.uleb128 0x21
 5828 0ab5 86000000 		.4byte	.LVL93
 5829 0ab9 4B050000 		.4byte	0x54b
 5830 0abd C80A0000 		.4byte	0xac8
 5831 0ac1 1D       		.uleb128 0x1d
 5832 0ac2 01       		.uleb128 0x1
 5833 0ac3 50       		.byte	0x50
 5834 0ac4 02       		.uleb128 0x2
 5835 0ac5 74       		.byte	0x74
 5836 0ac6 00       		.sleb128 0
 5837 0ac7 00       		.byte	0
 5838 0ac8 1B       		.uleb128 0x1b
 5839 0ac9 8A000000 		.4byte	.LVL94
 5840 0acd 1E050000 		.4byte	0x51e
 5841 0ad1 1B       		.uleb128 0x1b
 5842 0ad2 8E000000 		.4byte	.LVL95
 5843 0ad6 AA200000 		.4byte	0x20aa
 5844 0ada 00       		.byte	0
 5845 0adb 24       		.uleb128 0x24
 5846 0adc FD080000 		.4byte	.LASF116
 5847 0ae0 01       		.byte	0x1
 5848 0ae1 6A05     		.2byte	0x56a
 5849 0ae3 0F030000 		.4byte	0x30f
 5850 0ae7 00000000 		.4byte	.LFB74
 5851 0aeb 70000000 		.4byte	.LFE74-.LFB74
 5852 0aef 01       		.uleb128 0x1
 5853 0af0 9C       		.byte	0x9c
 5854 0af1 660B0000 		.4byte	0xb66
 5855 0af5 18       		.uleb128 0x18
 5856 0af6 8C0B0000 		.4byte	.LASF91
 5857 0afa 01       		.byte	0x1
 5858 0afb 6A05     		.2byte	0x56a
 5859 0afd 3F020000 		.4byte	0x23f
 5860 0b01 70040000 		.4byte	.LLST30
 5861 0b05 1F       		.uleb128 0x1f
 5862 0b06 1E030000 		.4byte	.LASF117
 5863 0b0a 01       		.byte	0x1
 5864 0b0b 6C05     		.2byte	0x56c
 5865 0b0d 0F030000 		.4byte	0x30f
 5866 0b11 01       		.uleb128 0x1
 5867 0b12 50       		.byte	0x50
 5868 0b13 19       		.uleb128 0x19
 5869 0b14 52030000 		.4byte	.LASF118
 5870 0b18 01       		.byte	0x1
 5871 0b19 6D05     		.2byte	0x56d
 5872 0b1b 660B0000 		.4byte	0xb66
 5873 0b1f C0040000 		.4byte	.LLST31
 5874 0b23 19       		.uleb128 0x19
 5875 0b24 D9050000 		.4byte	.LASF119
 5876 0b28 01       		.byte	0x1
 5877 0b29 6D05     		.2byte	0x56d
 5878 0b2b 660B0000 		.4byte	0xb66
 5879 0b2f DE040000 		.4byte	.LLST32
 5880 0b33 19       		.uleb128 0x19
 5881 0b34 9F090000 		.4byte	.LASF120
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 211


 5882 0b38 01       		.byte	0x1
 5883 0b39 6D05     		.2byte	0x56d
 5884 0b3b 660B0000 		.4byte	0xb66
 5885 0b3f FC040000 		.4byte	.LLST33
 5886 0b43 19       		.uleb128 0x19
 5887 0b44 7D050000 		.4byte	.LASF88
 5888 0b48 01       		.byte	0x1
 5889 0b49 6E05     		.2byte	0x56e
 5890 0b4b D3040000 		.4byte	0x4d3
 5891 0b4f 1A050000 		.4byte	.LLST34
 5892 0b53 1B       		.uleb128 0x1b
 5893 0b54 12000000 		.4byte	.LVL99
 5894 0b58 93200000 		.4byte	0x2093
 5895 0b5c 1B       		.uleb128 0x1b
 5896 0b5d 20000000 		.4byte	.LVL103
 5897 0b61 AA200000 		.4byte	0x20aa
 5898 0b65 00       		.byte	0
 5899 0b66 06       		.uleb128 0x6
 5900 0b67 04       		.byte	0x4
 5901 0b68 6C0B0000 		.4byte	0xb6c
 5902 0b6c 07       		.uleb128 0x7
 5903 0b6d 34020000 		.4byte	0x234
 5904 0b71 24       		.uleb128 0x24
 5905 0b72 740F0000 		.4byte	.LASF121
 5906 0b76 01       		.byte	0x1
 5907 0b77 C605     		.2byte	0x5c6
 5908 0b79 40010000 		.4byte	0x140
 5909 0b7d 00000000 		.4byte	.LFB75
 5910 0b81 20000000 		.4byte	.LFE75-.LFB75
 5911 0b85 01       		.uleb128 0x1
 5912 0b86 9C       		.byte	0x9c
 5913 0b87 CE0B0000 		.4byte	0xbce
 5914 0b8b 18       		.uleb128 0x18
 5915 0b8c 8C0B0000 		.4byte	.LASF91
 5916 0b90 01       		.byte	0x1
 5917 0b91 C605     		.2byte	0x5c6
 5918 0b93 C3040000 		.4byte	0x4c3
 5919 0b97 6A050000 		.4byte	.LLST35
 5920 0b9b 19       		.uleb128 0x19
 5921 0b9c 7D050000 		.4byte	.LASF88
 5922 0ba0 01       		.byte	0x1
 5923 0ba1 C805     		.2byte	0x5c8
 5924 0ba3 C8040000 		.4byte	0x4c8
 5925 0ba7 96050000 		.4byte	.LLST36
 5926 0bab 19       		.uleb128 0x19
 5927 0bac F4050000 		.4byte	.LASF122
 5928 0bb0 01       		.byte	0x1
 5929 0bb1 C905     		.2byte	0x5c9
 5930 0bb3 40010000 		.4byte	0x140
 5931 0bb7 A9050000 		.4byte	.LLST37
 5932 0bbb 1B       		.uleb128 0x1b
 5933 0bbc 08000000 		.4byte	.LVL116
 5934 0bc0 93200000 		.4byte	0x2093
 5935 0bc4 1B       		.uleb128 0x1b
 5936 0bc5 16000000 		.4byte	.LVL119
 5937 0bc9 AA200000 		.4byte	0x20aa
 5938 0bcd 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 212


 5939 0bce 24       		.uleb128 0x24
 5940 0bcf 0D0A0000 		.4byte	.LASF123
 5941 0bd3 01       		.byte	0x1
 5942 0bd4 DC05     		.2byte	0x5dc
 5943 0bd6 40010000 		.4byte	0x140
 5944 0bda 00000000 		.4byte	.LFB76
 5945 0bde 28000000 		.4byte	.LFE76-.LFB76
 5946 0be2 01       		.uleb128 0x1
 5947 0be3 9C       		.byte	0x9c
 5948 0be4 660C0000 		.4byte	0xc66
 5949 0be8 18       		.uleb128 0x18
 5950 0be9 8C0B0000 		.4byte	.LASF91
 5951 0bed 01       		.byte	0x1
 5952 0bee DC05     		.2byte	0x5dc
 5953 0bf0 C3040000 		.4byte	0x4c3
 5954 0bf4 C7050000 		.4byte	.LLST38
 5955 0bf8 19       		.uleb128 0x19
 5956 0bf9 7D050000 		.4byte	.LASF88
 5957 0bfd 01       		.byte	0x1
 5958 0bfe DE05     		.2byte	0x5de
 5959 0c00 C8040000 		.4byte	0x4c8
 5960 0c04 E8050000 		.4byte	.LLST39
 5961 0c08 1F       		.uleb128 0x1f
 5962 0c09 F4050000 		.4byte	.LASF122
 5963 0c0d 01       		.byte	0x1
 5964 0c0e DF05     		.2byte	0x5df
 5965 0c10 40010000 		.4byte	0x140
 5966 0c14 01       		.uleb128 0x1
 5967 0c15 50       		.byte	0x50
 5968 0c16 27       		.uleb128 0x27
 5969 0c17 7C0C0000 		.4byte	.LASF124
 5970 0c1b 01       		.byte	0x1
 5971 0c1c DF05     		.2byte	0x5df
 5972 0c1e 40010000 		.4byte	0x140
 5973 0c22 28       		.uleb128 0x28
 5974 0c23 FA030000 		.4byte	0x3fa
 5975 0c27 00000000 		.4byte	.LBB29
 5976 0c2b 14000000 		.4byte	.LBE29-.LBB29
 5977 0c2f 01       		.byte	0x1
 5978 0c30 F305     		.2byte	0x5f3
 5979 0c32 4B0C0000 		.4byte	0xc4b
 5980 0c36 22       		.uleb128 0x22
 5981 0c37 00000000 		.4byte	.LBB30
 5982 0c3b 14000000 		.4byte	.LBE30-.LBB30
 5983 0c3f 29       		.uleb128 0x29
 5984 0c40 0A040000 		.4byte	0x40a
 5985 0c44 29       		.uleb128 0x29
 5986 0c45 15040000 		.4byte	0x415
 5987 0c49 00       		.byte	0
 5988 0c4a 00       		.byte	0
 5989 0c4b 2A       		.uleb128 0x2a
 5990 0c4c 21040000 		.4byte	0x421
 5991 0c50 1E000000 		.4byte	.LBB31
 5992 0c54 04000000 		.4byte	.LBE31-.LBB31
 5993 0c58 01       		.byte	0x1
 5994 0c59 FA05     		.2byte	0x5fa
 5995 0c5b 2B       		.uleb128 0x2b
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 213


 5996 0c5c 2D040000 		.4byte	0x42d
 5997 0c60 FB050000 		.4byte	.LLST40
 5998 0c64 00       		.byte	0
 5999 0c65 00       		.byte	0
 6000 0c66 26       		.uleb128 0x26
 6001 0c67 9F030000 		.4byte	.LASF126
 6002 0c6b 01       		.byte	0x1
 6003 0c6c 0406     		.2byte	0x604
 6004 0c6e 00000000 		.4byte	.LFB77
 6005 0c72 E0000000 		.4byte	.LFE77-.LFB77
 6006 0c76 01       		.uleb128 0x1
 6007 0c77 9C       		.byte	0x9c
 6008 0c78 170D0000 		.4byte	0xd17
 6009 0c7c 18       		.uleb128 0x18
 6010 0c7d 8C0B0000 		.4byte	.LASF91
 6011 0c81 01       		.byte	0x1
 6012 0c82 0406     		.2byte	0x604
 6013 0c84 3F020000 		.4byte	0x23f
 6014 0c88 0E060000 		.4byte	.LLST41
 6015 0c8c 18       		.uleb128 0x18
 6016 0c8d BE080000 		.4byte	.LASF127
 6017 0c91 01       		.byte	0x1
 6018 0c92 0406     		.2byte	0x604
 6019 0c94 40010000 		.4byte	0x140
 6020 0c98 2C060000 		.4byte	.LLST42
 6021 0c9c 19       		.uleb128 0x19
 6022 0c9d 7D050000 		.4byte	.LASF88
 6023 0ca1 01       		.byte	0x1
 6024 0ca2 0606     		.2byte	0x606
 6025 0ca4 45050000 		.4byte	0x545
 6026 0ca8 57060000 		.4byte	.LLST43
 6027 0cac 19       		.uleb128 0x19
 6028 0cad 6B090000 		.4byte	.LASF128
 6029 0cb1 01       		.byte	0x1
 6030 0cb2 0706     		.2byte	0x607
 6031 0cb4 40010000 		.4byte	0x140
 6032 0cb8 6A060000 		.4byte	.LLST44
 6033 0cbc 19       		.uleb128 0x19
 6034 0cbd AB010000 		.4byte	.LASF129
 6035 0cc1 01       		.byte	0x1
 6036 0cc2 0706     		.2byte	0x607
 6037 0cc4 40010000 		.4byte	0x140
 6038 0cc8 7D060000 		.4byte	.LLST45
 6039 0ccc 19       		.uleb128 0x19
 6040 0ccd 83050000 		.4byte	.LASF130
 6041 0cd1 01       		.byte	0x1
 6042 0cd2 0806     		.2byte	0x608
 6043 0cd4 35010000 		.4byte	0x135
 6044 0cd8 90060000 		.4byte	.LLST46
 6045 0cdc 1B       		.uleb128 0x1b
 6046 0cdd 10000000 		.4byte	.LVL128
 6047 0ce1 93200000 		.4byte	0x2093
 6048 0ce5 21       		.uleb128 0x21
 6049 0ce6 80000000 		.4byte	.LVL135
 6050 0cea B5200000 		.4byte	0x20b5
 6051 0cee F90C0000 		.4byte	0xcf9
 6052 0cf2 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 214


 6053 0cf3 01       		.uleb128 0x1
 6054 0cf4 50       		.byte	0x50
 6055 0cf5 02       		.uleb128 0x2
 6056 0cf6 75       		.byte	0x75
 6057 0cf7 00       		.sleb128 0
 6058 0cf8 00       		.byte	0
 6059 0cf9 21       		.uleb128 0x21
 6060 0cfa BA000000 		.4byte	.LVL137
 6061 0cfe 9E200000 		.4byte	0x209e
 6062 0d02 0D0D0000 		.4byte	0xd0d
 6063 0d06 1D       		.uleb128 0x1d
 6064 0d07 01       		.uleb128 0x1
 6065 0d08 51       		.byte	0x51
 6066 0d09 02       		.uleb128 0x2
 6067 0d0a 75       		.byte	0x75
 6068 0d0b 00       		.sleb128 0
 6069 0d0c 00       		.byte	0
 6070 0d0d 1B       		.uleb128 0x1b
 6071 0d0e D0000000 		.4byte	.LVL139
 6072 0d12 AA200000 		.4byte	0x20aa
 6073 0d16 00       		.byte	0
 6074 0d17 26       		.uleb128 0x26
 6075 0d18 CD050000 		.4byte	.LASF131
 6076 0d1c 01       		.byte	0x1
 6077 0d1d 3B07     		.2byte	0x73b
 6078 0d1f 00000000 		.4byte	.LFB80
 6079 0d23 78000000 		.4byte	.LFE80-.LFB80
 6080 0d27 01       		.uleb128 0x1
 6081 0d28 9C       		.byte	0x9c
 6082 0d29 9C0D0000 		.4byte	0xd9c
 6083 0d2d 18       		.uleb128 0x18
 6084 0d2e DB090000 		.4byte	.LASF132
 6085 0d32 01       		.byte	0x1
 6086 0d33 3B07     		.2byte	0x73b
 6087 0d35 3F020000 		.4byte	0x23f
 6088 0d39 AF060000 		.4byte	.LLST47
 6089 0d3d 19       		.uleb128 0x19
 6090 0d3e 7D050000 		.4byte	.LASF88
 6091 0d42 01       		.byte	0x1
 6092 0d43 3D07     		.2byte	0x73d
 6093 0d45 9C0D0000 		.4byte	0xd9c
 6094 0d49 AF060000 		.4byte	.LLST47
 6095 0d4d 1B       		.uleb128 0x1b
 6096 0d4e 14000000 		.4byte	.LVL142
 6097 0d52 93200000 		.4byte	0x2093
 6098 0d56 21       		.uleb128 0x21
 6099 0d57 1A000000 		.4byte	.LVL143
 6100 0d5b 78040000 		.4byte	0x478
 6101 0d5f 6A0D0000 		.4byte	0xd6a
 6102 0d63 1D       		.uleb128 0x1d
 6103 0d64 01       		.uleb128 0x1
 6104 0d65 50       		.byte	0x50
 6105 0d66 02       		.uleb128 0x2
 6106 0d67 74       		.byte	0x74
 6107 0d68 00       		.sleb128 0
 6108 0d69 00       		.byte	0
 6109 0d6a 21       		.uleb128 0x21
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 215


 6110 0d6b 24000000 		.4byte	.LVL144
 6111 0d6f B5200000 		.4byte	0x20b5
 6112 0d73 7E0D0000 		.4byte	0xd7e
 6113 0d77 1D       		.uleb128 0x1d
 6114 0d78 01       		.uleb128 0x1
 6115 0d79 50       		.byte	0x50
 6116 0d7a 02       		.uleb128 0x2
 6117 0d7b 76       		.byte	0x76
 6118 0d7c 00       		.sleb128 0
 6119 0d7d 00       		.byte	0
 6120 0d7e 21       		.uleb128 0x21
 6121 0d7f 4A000000 		.4byte	.LVL145
 6122 0d83 9E200000 		.4byte	0x209e
 6123 0d87 920D0000 		.4byte	0xd92
 6124 0d8b 1D       		.uleb128 0x1d
 6125 0d8c 01       		.uleb128 0x1
 6126 0d8d 51       		.byte	0x51
 6127 0d8e 02       		.uleb128 0x2
 6128 0d8f 76       		.byte	0x76
 6129 0d90 00       		.sleb128 0
 6130 0d91 00       		.byte	0
 6131 0d92 1B       		.uleb128 0x1b
 6132 0d93 6A000000 		.4byte	.LVL146
 6133 0d97 AA200000 		.4byte	0x20aa
 6134 0d9b 00       		.byte	0
 6135 0d9c 07       		.uleb128 0x7
 6136 0d9d 45050000 		.4byte	0x545
 6137 0da1 24       		.uleb128 0x24
 6138 0da2 4B040000 		.4byte	.LASF133
 6139 0da6 01       		.byte	0x1
 6140 0da7 7107     		.2byte	0x771
 6141 0da9 35010000 		.4byte	0x135
 6142 0dad 00000000 		.4byte	.LFB81
 6143 0db1 88000000 		.4byte	.LFE81-.LFB81
 6144 0db5 01       		.uleb128 0x1
 6145 0db6 9C       		.byte	0x9c
 6146 0db7 940E0000 		.4byte	0xe94
 6147 0dbb 18       		.uleb128 0x18
 6148 0dbc DB090000 		.4byte	.LASF132
 6149 0dc0 01       		.byte	0x1
 6150 0dc1 7107     		.2byte	0x771
 6151 0dc3 3F020000 		.4byte	0x23f
 6152 0dc7 D8060000 		.4byte	.LLST49
 6153 0dcb 19       		.uleb128 0x19
 6154 0dcc 83050000 		.4byte	.LASF130
 6155 0dd0 01       		.byte	0x1
 6156 0dd1 7307     		.2byte	0x773
 6157 0dd3 35010000 		.4byte	0x135
 6158 0dd7 04070000 		.4byte	.LLST50
 6159 0ddb 19       		.uleb128 0x19
 6160 0ddc 7D050000 		.4byte	.LASF88
 6161 0de0 01       		.byte	0x1
 6162 0de1 7407     		.2byte	0x774
 6163 0de3 9C0D0000 		.4byte	0xd9c
 6164 0de7 45070000 		.4byte	.LLST51
 6165 0deb 27       		.uleb128 0x27
 6166 0dec F50A0000 		.4byte	.LASF134
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 216


 6167 0df0 01       		.byte	0x1
 6168 0df1 7507     		.2byte	0x775
 6169 0df3 40010000 		.4byte	0x140
 6170 0df7 28       		.uleb128 0x28
 6171 0df8 FA030000 		.4byte	0x3fa
 6172 0dfc 04000000 		.4byte	.LBB33
 6173 0e00 14000000 		.4byte	.LBE33-.LBB33
 6174 0e04 01       		.byte	0x1
 6175 0e05 8B07     		.2byte	0x78b
 6176 0e07 200E0000 		.4byte	0xe20
 6177 0e0b 22       		.uleb128 0x22
 6178 0e0c 04000000 		.4byte	.LBB34
 6179 0e10 14000000 		.4byte	.LBE34-.LBB34
 6180 0e14 29       		.uleb128 0x29
 6181 0e15 0A040000 		.4byte	0x40a
 6182 0e19 29       		.uleb128 0x29
 6183 0e1a 15040000 		.4byte	0x415
 6184 0e1e 00       		.byte	0
 6185 0e1f 00       		.byte	0
 6186 0e20 28       		.uleb128 0x28
 6187 0e21 21040000 		.4byte	0x421
 6188 0e25 78000000 		.4byte	.LBB35
 6189 0e29 04000000 		.4byte	.LBE35-.LBB35
 6190 0e2d 01       		.byte	0x1
 6191 0e2e AF07     		.2byte	0x7af
 6192 0e30 3E0E0000 		.4byte	0xe3e
 6193 0e34 2B       		.uleb128 0x2b
 6194 0e35 2D040000 		.4byte	0x42d
 6195 0e39 71070000 		.4byte	.LLST52
 6196 0e3d 00       		.byte	0
 6197 0e3e 21       		.uleb128 0x21
 6198 0e3f 1C000000 		.4byte	.LVL150
 6199 0e43 78040000 		.4byte	0x478
 6200 0e47 520E0000 		.4byte	0xe52
 6201 0e4b 1D       		.uleb128 0x1d
 6202 0e4c 01       		.uleb128 0x1
 6203 0e4d 50       		.byte	0x50
 6204 0e4e 02       		.uleb128 0x2
 6205 0e4f 74       		.byte	0x74
 6206 0e50 00       		.sleb128 0
 6207 0e51 00       		.byte	0
 6208 0e52 21       		.uleb128 0x21
 6209 0e53 42000000 		.4byte	.LVL152
 6210 0e57 B5200000 		.4byte	0x20b5
 6211 0e5b 660E0000 		.4byte	0xe66
 6212 0e5f 1D       		.uleb128 0x1d
 6213 0e60 01       		.uleb128 0x1
 6214 0e61 50       		.byte	0x50
 6215 0e62 02       		.uleb128 0x2
 6216 0e63 77       		.byte	0x77
 6217 0e64 00       		.sleb128 0
 6218 0e65 00       		.byte	0
 6219 0e66 21       		.uleb128 0x21
 6220 0e67 66000000 		.4byte	.LVL153
 6221 0e6b 9E200000 		.4byte	0x209e
 6222 0e6f 7A0E0000 		.4byte	0xe7a
 6223 0e73 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 217


 6224 0e74 01       		.uleb128 0x1
 6225 0e75 51       		.byte	0x51
 6226 0e76 02       		.uleb128 0x2
 6227 0e77 77       		.byte	0x77
 6228 0e78 00       		.sleb128 0
 6229 0e79 00       		.byte	0
 6230 0e7a 1C       		.uleb128 0x1c
 6231 0e7b 72000000 		.4byte	.LVL155
 6232 0e7f 9E200000 		.4byte	0x209e
 6233 0e83 1D       		.uleb128 0x1d
 6234 0e84 01       		.uleb128 0x1
 6235 0e85 50       		.byte	0x50
 6236 0e86 05       		.uleb128 0x5
 6237 0e87 03       		.byte	0x3
 6238 0e88 14000000 		.4byte	.LANCHOR0+20
 6239 0e8c 1D       		.uleb128 0x1d
 6240 0e8d 01       		.uleb128 0x1
 6241 0e8e 51       		.byte	0x51
 6242 0e8f 02       		.uleb128 0x2
 6243 0e90 74       		.byte	0x74
 6244 0e91 18       		.sleb128 24
 6245 0e92 00       		.byte	0
 6246 0e93 00       		.byte	0
 6247 0e94 26       		.uleb128 0x26
 6248 0e95 BF030000 		.4byte	.LASF135
 6249 0e99 01       		.byte	0x1
 6250 0e9a B707     		.2byte	0x7b7
 6251 0e9c 00000000 		.4byte	.LFB82
 6252 0ea0 58000000 		.4byte	.LFE82-.LFB82
 6253 0ea4 01       		.uleb128 0x1
 6254 0ea5 9C       		.byte	0x9c
 6255 0ea6 230F0000 		.4byte	0xf23
 6256 0eaa 19       		.uleb128 0x19
 6257 0eab 6B040000 		.4byte	.LASF87
 6258 0eaf 01       		.byte	0x1
 6259 0eb0 B907     		.2byte	0x7b9
 6260 0eb2 35010000 		.4byte	0x135
 6261 0eb6 84070000 		.4byte	.LLST53
 6262 0eba 28       		.uleb128 0x28
 6263 0ebb 39040000 		.4byte	0x439
 6264 0ebf 1A000000 		.4byte	.LBB37
 6265 0ec3 10000000 		.4byte	.LBE37-.LBB37
 6266 0ec7 01       		.byte	0x1
 6267 0ec8 FF07     		.2byte	0x7ff
 6268 0eca DE0E0000 		.4byte	0xede
 6269 0ece 22       		.uleb128 0x22
 6270 0ecf 1A000000 		.4byte	.LBB38
 6271 0ed3 10000000 		.4byte	.LBE38-.LBB38
 6272 0ed7 29       		.uleb128 0x29
 6273 0ed8 45040000 		.4byte	0x445
 6274 0edc 00       		.byte	0
 6275 0edd 00       		.byte	0
 6276 0ede 21       		.uleb128 0x21
 6277 0edf 16000000 		.4byte	.LVL159
 6278 0ee3 E9080000 		.4byte	0x8e9
 6279 0ee7 190F0000 		.4byte	0xf19
 6280 0eeb 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 218


 6281 0eec 01       		.uleb128 0x1
 6282 0eed 50       		.byte	0x50
 6283 0eee 05       		.uleb128 0x5
 6284 0eef 03       		.byte	0x3
 6285 0ef0 00000000 		.4byte	prvIdleTask
 6286 0ef4 1D       		.uleb128 0x1d
 6287 0ef5 01       		.uleb128 0x1
 6288 0ef6 51       		.byte	0x51
 6289 0ef7 05       		.uleb128 0x5
 6290 0ef8 03       		.byte	0x3
 6291 0ef9 00000000 		.4byte	.LC0
 6292 0efd 1D       		.uleb128 0x1d
 6293 0efe 01       		.uleb128 0x1
 6294 0eff 52       		.byte	0x52
 6295 0f00 02       		.uleb128 0x2
 6296 0f01 08       		.byte	0x8
 6297 0f02 64       		.byte	0x64
 6298 0f03 1D       		.uleb128 0x1d
 6299 0f04 01       		.uleb128 0x1
 6300 0f05 53       		.byte	0x53
 6301 0f06 01       		.uleb128 0x1
 6302 0f07 30       		.byte	0x30
 6303 0f08 1D       		.uleb128 0x1d
 6304 0f09 02       		.uleb128 0x2
 6305 0f0a 7D       		.byte	0x7d
 6306 0f0b 00       		.sleb128 0
 6307 0f0c 01       		.uleb128 0x1
 6308 0f0d 30       		.byte	0x30
 6309 0f0e 1D       		.uleb128 0x1d
 6310 0f0f 02       		.uleb128 0x2
 6311 0f10 7D       		.byte	0x7d
 6312 0f11 04       		.sleb128 4
 6313 0f12 05       		.uleb128 0x5
 6314 0f13 03       		.byte	0x3
 6315 0f14 F4000000 		.4byte	.LANCHOR0+244
 6316 0f18 00       		.byte	0
 6317 0f19 1B       		.uleb128 0x1b
 6318 0f1a 42000000 		.4byte	.LVL160
 6319 0f1e D8200000 		.4byte	0x20d8
 6320 0f22 00       		.byte	0
 6321 0f23 26       		.uleb128 0x26
 6322 0f24 C9090000 		.4byte	.LASF136
 6323 0f28 01       		.byte	0x1
 6324 0f29 3308     		.2byte	0x833
 6325 0f2b 00000000 		.4byte	.LFB83
 6326 0f2f 24000000 		.4byte	.LFE83-.LFB83
 6327 0f33 01       		.uleb128 0x1
 6328 0f34 9C       		.byte	0x9c
 6329 0f35 670F0000 		.4byte	0xf67
 6330 0f39 28       		.uleb128 0x28
 6331 0f3a 39040000 		.4byte	0x439
 6332 0f3e 02000000 		.4byte	.LBB39
 6333 0f42 10000000 		.4byte	.LBE39-.LBB39
 6334 0f46 01       		.byte	0x1
 6335 0f47 3808     		.2byte	0x838
 6336 0f49 5D0F0000 		.4byte	0xf5d
 6337 0f4d 22       		.uleb128 0x22
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 219


 6338 0f4e 02000000 		.4byte	.LBB40
 6339 0f52 10000000 		.4byte	.LBE40-.LBB40
 6340 0f56 29       		.uleb128 0x29
 6341 0f57 45040000 		.4byte	0x445
 6342 0f5b 00       		.byte	0
 6343 0f5c 00       		.byte	0
 6344 0f5d 1B       		.uleb128 0x1b
 6345 0f5e 1E000000 		.4byte	.LVL161
 6346 0f62 E3200000 		.4byte	0x20e3
 6347 0f66 00       		.byte	0
 6348 0f67 2C       		.uleb128 0x2c
 6349 0f68 AB0B0000 		.4byte	.LASF176
 6350 0f6c 01       		.byte	0x1
 6351 0f6d 3E08     		.2byte	0x83e
 6352 0f6f 00000000 		.4byte	.LFB84
 6353 0f73 14000000 		.4byte	.LFE84-.LFB84
 6354 0f77 01       		.uleb128 0x1
 6355 0f78 9C       		.byte	0x9c
 6356 0f79 24       		.uleb128 0x24
 6357 0f7a 0F060000 		.4byte	.LASF137
 6358 0f7e 01       		.byte	0x1
 6359 0f7f 0009     		.2byte	0x900
 6360 0f81 4B010000 		.4byte	0x14b
 6361 0f85 00000000 		.4byte	.LFB86
 6362 0f89 0C000000 		.4byte	.LFE86-.LFB86
 6363 0f8d 01       		.uleb128 0x1
 6364 0f8e 9C       		.byte	0x9c
 6365 0f8f A20F0000 		.4byte	0xfa2
 6366 0f93 1F       		.uleb128 0x1f
 6367 0f94 3C000000 		.4byte	.LASF138
 6368 0f98 01       		.byte	0x1
 6369 0f99 0209     		.2byte	0x902
 6370 0f9b 4B010000 		.4byte	0x14b
 6371 0f9f 01       		.uleb128 0x1
 6372 0fa0 50       		.byte	0x50
 6373 0fa1 00       		.byte	0
 6374 0fa2 24       		.uleb128 0x24
 6375 0fa3 9F020000 		.4byte	.LASF139
 6376 0fa7 01       		.byte	0x1
 6377 0fa8 0F09     		.2byte	0x90f
 6378 0faa 4B010000 		.4byte	0x14b
 6379 0fae 00000000 		.4byte	.LFB87
 6380 0fb2 0C000000 		.4byte	.LFE87-.LFB87
 6381 0fb6 01       		.uleb128 0x1
 6382 0fb7 9C       		.byte	0x9c
 6383 0fb8 D80F0000 		.4byte	0xfd8
 6384 0fbc 1F       		.uleb128 0x1f
 6385 0fbd 6B040000 		.4byte	.LASF87
 6386 0fc1 01       		.byte	0x1
 6387 0fc2 1109     		.2byte	0x911
 6388 0fc4 4B010000 		.4byte	0x14b
 6389 0fc8 01       		.uleb128 0x1
 6390 0fc9 50       		.byte	0x50
 6391 0fca 2D       		.uleb128 0x2d
 6392 0fcb F50A0000 		.4byte	.LASF134
 6393 0fcf 01       		.byte	0x1
 6394 0fd0 1209     		.2byte	0x912
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 220


 6395 0fd2 40010000 		.4byte	0x140
 6396 0fd6 00       		.byte	0
 6397 0fd7 00       		.byte	0
 6398 0fd8 2E       		.uleb128 0x2e
 6399 0fd9 240D0000 		.4byte	.LASF190
 6400 0fdd 01       		.byte	0x1
 6401 0fde 2E09     		.2byte	0x92e
 6402 0fe0 40010000 		.4byte	0x140
 6403 0fe4 00000000 		.4byte	.LFB88
 6404 0fe8 0C000000 		.4byte	.LFE88-.LFB88
 6405 0fec 01       		.uleb128 0x1
 6406 0fed 9C       		.byte	0x9c
 6407 0fee 24       		.uleb128 0x24
 6408 0fef FC0B0000 		.4byte	.LASF140
 6409 0ff3 01       		.byte	0x1
 6410 0ff4 3609     		.2byte	0x936
 6411 0ff6 B2000000 		.4byte	0xb2
 6412 0ffa 00000000 		.4byte	.LFB89
 6413 0ffe 14000000 		.4byte	.LFE89-.LFB89
 6414 1002 01       		.uleb128 0x1
 6415 1003 9C       		.byte	0x9c
 6416 1004 27100000 		.4byte	0x1027
 6417 1008 18       		.uleb128 0x18
 6418 1009 92030000 		.4byte	.LASF141
 6419 100d 01       		.byte	0x1
 6420 100e 3609     		.2byte	0x936
 6421 1010 3F020000 		.4byte	0x23f
 6422 1014 97070000 		.4byte	.LLST54
 6423 1018 1F       		.uleb128 0x1f
 6424 1019 7D050000 		.4byte	.LASF88
 6425 101d 01       		.byte	0x1
 6426 101e 3809     		.2byte	0x938
 6427 1020 45050000 		.4byte	0x545
 6428 1024 01       		.uleb128 0x1
 6429 1025 53       		.byte	0x53
 6430 1026 00       		.byte	0
 6431 1027 24       		.uleb128 0x24
 6432 1028 E9020000 		.4byte	.LASF142
 6433 102c 01       		.byte	0x1
 6434 102d 930A     		.2byte	0xa93
 6435 102f 35010000 		.4byte	0x135
 6436 1033 00000000 		.4byte	.LFB91
 6437 1037 00010000 		.4byte	.LFE91-.LFB91
 6438 103b 01       		.uleb128 0x1
 6439 103c 9C       		.byte	0x9c
 6440 103d E7100000 		.4byte	0x10e7
 6441 1041 19       		.uleb128 0x19
 6442 1042 7D050000 		.4byte	.LASF88
 6443 1046 01       		.byte	0x1
 6444 1047 950A     		.2byte	0xa95
 6445 1049 45050000 		.4byte	0x545
 6446 104d AA070000 		.4byte	.LLST55
 6447 1051 19       		.uleb128 0x19
 6448 1052 D20D0000 		.4byte	.LASF28
 6449 1056 01       		.byte	0x1
 6450 1057 960A     		.2byte	0xa96
 6451 1059 4B010000 		.4byte	0x14b
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 221


 6452 105d C8070000 		.4byte	.LLST56
 6453 1061 19       		.uleb128 0x19
 6454 1062 23020000 		.4byte	.LASF143
 6455 1066 01       		.byte	0x1
 6456 1067 970A     		.2byte	0xa97
 6457 1069 35010000 		.4byte	0x135
 6458 106d DB070000 		.4byte	.LLST57
 6459 1071 2F       		.uleb128 0x2f
 6460 1072 00000000 		.4byte	.Ldebug_ranges0+0
 6461 1076 19       		.uleb128 0x19
 6462 1077 73040000 		.4byte	.LASF112
 6463 107b 01       		.byte	0x1
 6464 107c A10A     		.2byte	0xaa1
 6465 107e E4080000 		.4byte	0x8e4
 6466 1082 33080000 		.4byte	.LLST58
 6467 1086 25       		.uleb128 0x25
 6468 1087 1C000000 		.4byte	.LBB42
 6469 108b 1A000000 		.4byte	.LBE42-.LBB42
 6470 108f AD100000 		.4byte	0x10ad
 6471 1093 19       		.uleb128 0x19
 6472 1094 DB0C0000 		.4byte	.LASF144
 6473 1098 01       		.byte	0x1
 6474 1099 A90A     		.2byte	0xaa9
 6475 109b E7100000 		.4byte	0x10e7
 6476 109f 51080000 		.4byte	.LLST59
 6477 10a3 1B       		.uleb128 0x1b
 6478 10a4 36000000 		.4byte	.LVL172
 6479 10a8 1E050000 		.4byte	0x51e
 6480 10ac 00       		.byte	0
 6481 10ad 21       		.uleb128 0x21
 6482 10ae 7C000000 		.4byte	.LVL179
 6483 10b2 B5200000 		.4byte	0x20b5
 6484 10b6 C1100000 		.4byte	0x10c1
 6485 10ba 1D       		.uleb128 0x1d
 6486 10bb 01       		.uleb128 0x1
 6487 10bc 50       		.byte	0x50
 6488 10bd 02       		.uleb128 0x2
 6489 10be 76       		.byte	0x76
 6490 10bf 00       		.sleb128 0
 6491 10c0 00       		.byte	0
 6492 10c1 21       		.uleb128 0x21
 6493 10c2 88000000 		.4byte	.LVL180
 6494 10c6 B5200000 		.4byte	0x20b5
 6495 10ca D5100000 		.4byte	0x10d5
 6496 10ce 1D       		.uleb128 0x1d
 6497 10cf 01       		.uleb128 0x1
 6498 10d0 50       		.byte	0x50
 6499 10d1 02       		.uleb128 0x2
 6500 10d2 74       		.byte	0x74
 6501 10d3 18       		.sleb128 24
 6502 10d4 00       		.byte	0
 6503 10d5 1C       		.uleb128 0x1c
 6504 10d6 AE000000 		.4byte	.LVL181
 6505 10da 9E200000 		.4byte	0x209e
 6506 10de 1D       		.uleb128 0x1d
 6507 10df 01       		.uleb128 0x1
 6508 10e0 51       		.byte	0x51
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 222


 6509 10e1 02       		.uleb128 0x2
 6510 10e2 76       		.byte	0x76
 6511 10e3 00       		.sleb128 0
 6512 10e4 00       		.byte	0
 6513 10e5 00       		.byte	0
 6514 10e6 00       		.byte	0
 6515 10e7 06       		.uleb128 0x6
 6516 10e8 04       		.byte	0x4
 6517 10e9 34020000 		.4byte	0x234
 6518 10ed 24       		.uleb128 0x24
 6519 10ee E9090000 		.4byte	.LASF145
 6520 10f2 01       		.byte	0x1
 6521 10f3 9208     		.2byte	0x892
 6522 10f5 35010000 		.4byte	0x135
 6523 10f9 00000000 		.4byte	.LFB85
 6524 10fd D8000000 		.4byte	.LFE85-.LFB85
 6525 1101 01       		.uleb128 0x1
 6526 1102 9C       		.byte	0x9c
 6527 1103 A6110000 		.4byte	0x11a6
 6528 1107 19       		.uleb128 0x19
 6529 1108 7D050000 		.4byte	.LASF88
 6530 110c 01       		.byte	0x1
 6531 110d 9408     		.2byte	0x894
 6532 110f 45050000 		.4byte	0x545
 6533 1113 73080000 		.4byte	.LLST60
 6534 1117 19       		.uleb128 0x19
 6535 1118 25010000 		.4byte	.LASF146
 6536 111c 01       		.byte	0x1
 6537 111d 9508     		.2byte	0x895
 6538 111f 35010000 		.4byte	0x135
 6539 1123 C0080000 		.4byte	.LLST61
 6540 1127 25       		.uleb128 0x25
 6541 1128 84000000 		.4byte	.LBB45
 6542 112c 22000000 		.4byte	.LBE45-.LBB45
 6543 1130 4E110000 		.4byte	0x114e
 6544 1134 19       		.uleb128 0x19
 6545 1135 D2080000 		.4byte	.LASF147
 6546 1139 01       		.byte	0x1
 6547 113a CD08     		.2byte	0x8cd
 6548 113c 4B010000 		.4byte	0x14b
 6549 1140 02090000 		.4byte	.LLST62
 6550 1144 1B       		.uleb128 0x1b
 6551 1145 90000000 		.4byte	.LVL199
 6552 1149 27100000 		.4byte	0x1027
 6553 114d 00       		.byte	0
 6554 114e 1B       		.uleb128 0x1b
 6555 114f 06000000 		.4byte	.LVL189
 6556 1153 93200000 		.4byte	0x2093
 6557 1157 21       		.uleb128 0x21
 6558 1158 34000000 		.4byte	.LVL192
 6559 115c B5200000 		.4byte	0x20b5
 6560 1160 6B110000 		.4byte	0x116b
 6561 1164 1D       		.uleb128 0x1d
 6562 1165 01       		.uleb128 0x1
 6563 1166 50       		.byte	0x50
 6564 1167 02       		.uleb128 0x2
 6565 1168 75       		.byte	0x75
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 223


 6566 1169 18       		.sleb128 24
 6567 116a 00       		.byte	0
 6568 116b 21       		.uleb128 0x21
 6569 116c 3C000000 		.4byte	.LVL193
 6570 1170 B5200000 		.4byte	0x20b5
 6571 1174 7F110000 		.4byte	0x117f
 6572 1178 1D       		.uleb128 0x1d
 6573 1179 01       		.uleb128 0x1
 6574 117a 50       		.byte	0x50
 6575 117b 02       		.uleb128 0x2
 6576 117c 76       		.byte	0x76
 6577 117d 00       		.sleb128 0
 6578 117e 00       		.byte	0
 6579 117f 21       		.uleb128 0x21
 6580 1180 60000000 		.4byte	.LVL194
 6581 1184 9E200000 		.4byte	0x209e
 6582 1188 93110000 		.4byte	0x1193
 6583 118c 1D       		.uleb128 0x1d
 6584 118d 01       		.uleb128 0x1
 6585 118e 51       		.byte	0x51
 6586 118f 02       		.uleb128 0x2
 6587 1190 76       		.byte	0x76
 6588 1191 00       		.sleb128 0
 6589 1192 00       		.byte	0
 6590 1193 1B       		.uleb128 0x1b
 6591 1194 84000000 		.4byte	.LVL197
 6592 1198 1E050000 		.4byte	0x51e
 6593 119c 1B       		.uleb128 0x1b
 6594 119d CC000000 		.4byte	.LVL207
 6595 11a1 AA200000 		.4byte	0x20aa
 6596 11a5 00       		.byte	0
 6597 11a6 26       		.uleb128 0x26
 6598 11a7 1A090000 		.4byte	.LASF148
 6599 11ab 01       		.byte	0x1
 6600 11ac E904     		.2byte	0x4e9
 6601 11ae 00000000 		.4byte	.LFB72
 6602 11b2 6C000000 		.4byte	.LFE72-.LFB72
 6603 11b6 01       		.uleb128 0x1
 6604 11b7 9C       		.byte	0x9c
 6605 11b8 46120000 		.4byte	0x1246
 6606 11bc 18       		.uleb128 0x18
 6607 11bd 20080000 		.4byte	.LASF149
 6608 11c1 01       		.byte	0x1
 6609 11c2 E904     		.2byte	0x4e9
 6610 11c4 4C120000 		.4byte	0x124c
 6611 11c8 38090000 		.4byte	.LLST63
 6612 11cc 18       		.uleb128 0x18
 6613 11cd 200E0000 		.4byte	.LASF150
 6614 11d1 01       		.byte	0x1
 6615 11d2 E904     		.2byte	0x4e9
 6616 11d4 E4080000 		.4byte	0x8e4
 6617 11d8 64090000 		.4byte	.LLST64
 6618 11dc 19       		.uleb128 0x19
 6619 11dd 19010000 		.4byte	.LASF111
 6620 11e1 01       		.byte	0x1
 6621 11e2 EB04     		.2byte	0x4eb
 6622 11e4 4B010000 		.4byte	0x14b
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 224


 6623 11e8 90090000 		.4byte	.LLST65
 6624 11ec 1F       		.uleb128 0x1f
 6625 11ed 25010000 		.4byte	.LASF146
 6626 11f1 01       		.byte	0x1
 6627 11f2 EC04     		.2byte	0x4ec
 6628 11f4 35010000 		.4byte	0x135
 6629 11f8 01       		.uleb128 0x1
 6630 11f9 50       		.byte	0x50
 6631 11fa 19       		.uleb128 0x19
 6632 11fb 0C0B0000 		.4byte	.LASF151
 6633 11ff 01       		.byte	0x1
 6634 1200 EC04     		.2byte	0x4ec
 6635 1202 35010000 		.4byte	0x135
 6636 1206 A3090000 		.4byte	.LLST66
 6637 120a 30       		.uleb128 0x30
 6638 120b 20000000 		.4byte	.Ldebug_ranges0+0x20
 6639 120f 33120000 		.4byte	0x1233
 6640 1213 19       		.uleb128 0x19
 6641 1214 73040000 		.4byte	.LASF112
 6642 1218 01       		.byte	0x1
 6643 1219 F604     		.2byte	0x4f6
 6644 121b E4080000 		.4byte	0x8e4
 6645 121f C2090000 		.4byte	.LLST67
 6646 1223 1C       		.uleb128 0x1c
 6647 1224 4A000000 		.4byte	.LVL216
 6648 1228 56080000 		.4byte	0x856
 6649 122c 1D       		.uleb128 0x1d
 6650 122d 01       		.uleb128 0x1
 6651 122e 51       		.byte	0x51
 6652 122f 01       		.uleb128 0x1
 6653 1230 30       		.byte	0x30
 6654 1231 00       		.byte	0
 6655 1232 00       		.byte	0
 6656 1233 1B       		.uleb128 0x1b
 6657 1234 0A000000 		.4byte	.LVL211
 6658 1238 670F0000 		.4byte	0xf67
 6659 123c 1B       		.uleb128 0x1b
 6660 123d 4E000000 		.4byte	.LVL217
 6661 1241 ED100000 		.4byte	0x10ed
 6662 1245 00       		.byte	0
 6663 1246 06       		.uleb128 0x6
 6664 1247 04       		.byte	0x4
 6665 1248 4B010000 		.4byte	0x14b
 6666 124c 07       		.uleb128 0x7
 6667 124d 46120000 		.4byte	0x1246
 6668 1251 26       		.uleb128 0x26
 6669 1252 E2000000 		.4byte	.LASF152
 6670 1256 01       		.byte	0x1
 6671 1257 3D05     		.2byte	0x53d
 6672 1259 00000000 		.4byte	.LFB73
 6673 125d 34000000 		.4byte	.LFE73-.LFB73
 6674 1261 01       		.uleb128 0x1
 6675 1262 9C       		.byte	0x9c
 6676 1263 B3120000 		.4byte	0x12b3
 6677 1267 18       		.uleb128 0x18
 6678 1268 FC0D0000 		.4byte	.LASF153
 6679 126c 01       		.byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 225


 6680 126d 3D05     		.2byte	0x53d
 6681 126f E4080000 		.4byte	0x8e4
 6682 1273 D5090000 		.4byte	.LLST68
 6683 1277 19       		.uleb128 0x19
 6684 1278 25010000 		.4byte	.LASF146
 6685 127c 01       		.byte	0x1
 6686 127d 3F05     		.2byte	0x53f
 6687 127f 35010000 		.4byte	0x135
 6688 1283 0C0A0000 		.4byte	.LLST69
 6689 1287 1B       		.uleb128 0x1b
 6690 1288 0A000000 		.4byte	.LVL221
 6691 128c 670F0000 		.4byte	0xf67
 6692 1290 21       		.uleb128 0x21
 6693 1291 12000000 		.4byte	.LVL222
 6694 1295 56080000 		.4byte	0x856
 6695 1299 A9120000 		.4byte	0x12a9
 6696 129d 1D       		.uleb128 0x1d
 6697 129e 01       		.uleb128 0x1
 6698 129f 50       		.byte	0x50
 6699 12a0 02       		.uleb128 0x2
 6700 12a1 74       		.byte	0x74
 6701 12a2 00       		.sleb128 0
 6702 12a3 1D       		.uleb128 0x1d
 6703 12a4 01       		.uleb128 0x1
 6704 12a5 51       		.byte	0x51
 6705 12a6 01       		.uleb128 0x1
 6706 12a7 30       		.byte	0x30
 6707 12a8 00       		.byte	0
 6708 12a9 1B       		.uleb128 0x1b
 6709 12aa 16000000 		.4byte	.LVL223
 6710 12ae ED100000 		.4byte	0x10ed
 6711 12b2 00       		.byte	0
 6712 12b3 24       		.uleb128 0x24
 6713 12b4 83040000 		.4byte	.LASF154
 6714 12b8 01       		.byte	0x1
 6715 12b9 310A     		.2byte	0xa31
 6716 12bb 35010000 		.4byte	0x135
 6717 12bf 00000000 		.4byte	.LFB90
 6718 12c3 20000000 		.4byte	.LFE90-.LFB90
 6719 12c7 01       		.uleb128 0x1
 6720 12c8 9C       		.byte	0x9c
 6721 12c9 00130000 		.4byte	0x1300
 6722 12cd 18       		.uleb128 0x18
 6723 12ce FD070000 		.4byte	.LASF155
 6724 12d2 01       		.byte	0x1
 6725 12d3 310A     		.2byte	0xa31
 6726 12d5 4B010000 		.4byte	0x14b
 6727 12d9 420A0000 		.4byte	.LLST70
 6728 12dd 19       		.uleb128 0x19
 6729 12de 83050000 		.4byte	.LASF130
 6730 12e2 01       		.byte	0x1
 6731 12e3 330A     		.2byte	0xa33
 6732 12e5 35010000 		.4byte	0x135
 6733 12e9 6E0A0000 		.4byte	.LLST71
 6734 12ed 1B       		.uleb128 0x1b
 6735 12ee 08000000 		.4byte	.LVL228
 6736 12f2 670F0000 		.4byte	0xf67
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 226


 6737 12f6 1B       		.uleb128 0x1b
 6738 12f7 18000000 		.4byte	.LVL230
 6739 12fb ED100000 		.4byte	0x10ed
 6740 12ff 00       		.byte	0
 6741 1300 26       		.uleb128 0x26
 6742 1301 90060000 		.4byte	.LASF156
 6743 1305 01       		.byte	0x1
 6744 1306 AD0B     		.2byte	0xbad
 6745 1308 00000000 		.4byte	.LFB92
 6746 130c A8000000 		.4byte	.LFE92-.LFB92
 6747 1310 01       		.uleb128 0x1
 6748 1311 9C       		.byte	0x9c
 6749 1312 B2130000 		.4byte	0x13b2
 6750 1316 25       		.uleb128 0x25
 6751 1317 1C000000 		.4byte	.LBB49
 6752 131b 36000000 		.4byte	.LBE49-.LBB49
 6753 131f 4E130000 		.4byte	0x134e
 6754 1323 19       		.uleb128 0x19
 6755 1324 ED0F0000 		.4byte	.LASF157
 6756 1328 01       		.byte	0x1
 6757 1329 D60B     		.2byte	0xbd6
 6758 132b B8130000 		.4byte	0x13b8
 6759 132f 8D0A0000 		.4byte	.LLST72
 6760 1333 31       		.uleb128 0x31
 6761 1334 3B0D0000 		.4byte	.LASF158
 6762 1338 01       		.byte	0x1
 6763 1339 D60B     		.2byte	0xbd6
 6764 133b 9B060000 		.4byte	0x69b
 6765 133f A5CB96AD 		.sleb128 -1515870811
 6765      7A
 6766 1344 1B       		.uleb128 0x1b
 6767 1345 52000000 		.4byte	.LVL233
 6768 1349 EE200000 		.4byte	0x20ee
 6769 134d 00       		.byte	0
 6770 134e 22       		.uleb128 0x22
 6771 134f 52000000 		.4byte	.LBB50
 6772 1353 56000000 		.4byte	.LBE50-.LBB50
 6773 1357 19       		.uleb128 0x19
 6774 1358 82080000 		.4byte	.LASF159
 6775 135c 01       		.byte	0x1
 6776 135d E10B     		.2byte	0xbe1
 6777 135f 40010000 		.4byte	0x140
 6778 1363 A00A0000 		.4byte	.LLST73
 6779 1367 28       		.uleb128 0x28
 6780 1368 51040000 		.4byte	0x451
 6781 136c 58000000 		.4byte	.LBB51
 6782 1370 06000000 		.4byte	.LBE51-.LBB51
 6783 1374 01       		.byte	0x1
 6784 1375 E10B     		.2byte	0xbe1
 6785 1377 96130000 		.4byte	0x1396
 6786 137b 2B       		.uleb128 0x2b
 6787 137c 61040000 		.4byte	0x461
 6788 1380 B30A0000 		.4byte	.LLST74
 6789 1384 22       		.uleb128 0x22
 6790 1385 58000000 		.4byte	.LBB52
 6791 1389 06000000 		.4byte	.LBE52-.LBB52
 6792 138d 32       		.uleb128 0x32
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 227


 6793 138e 6C040000 		.4byte	0x46c
 6794 1392 01       		.uleb128 0x1
 6795 1393 53       		.byte	0x53
 6796 1394 00       		.byte	0
 6797 1395 00       		.byte	0
 6798 1396 22       		.uleb128 0x22
 6799 1397 62000000 		.4byte	.LBB53
 6800 139b 46000000 		.4byte	.LBE53-.LBB53
 6801 139f 19       		.uleb128 0x19
 6802 13a0 52050000 		.4byte	.LASF160
 6803 13a4 01       		.byte	0x1
 6804 13a5 E10B     		.2byte	0xbe1
 6805 13a7 BD130000 		.4byte	0x13bd
 6806 13ab C60A0000 		.4byte	.LLST75
 6807 13af 00       		.byte	0
 6808 13b0 00       		.byte	0
 6809 13b1 00       		.byte	0
 6810 13b2 06       		.uleb128 0x6
 6811 13b3 04       		.byte	0x4
 6812 13b4 9B060000 		.4byte	0x69b
 6813 13b8 07       		.uleb128 0x7
 6814 13b9 B2130000 		.4byte	0x13b2
 6815 13bd 07       		.uleb128 0x7
 6816 13be E7100000 		.4byte	0x10e7
 6817 13c2 26       		.uleb128 0x26
 6818 13c3 43000000 		.4byte	.LASF161
 6819 13c7 01       		.byte	0x1
 6820 13c8 A806     		.2byte	0x6a8
 6821 13ca 00000000 		.4byte	.LFB78
 6822 13ce C0000000 		.4byte	.LFE78-.LFB78
 6823 13d2 01       		.uleb128 0x1
 6824 13d3 9C       		.byte	0x9c
 6825 13d4 74140000 		.4byte	0x1474
 6826 13d8 18       		.uleb128 0x18
 6827 13d9 62070000 		.4byte	.LASF162
 6828 13dd 01       		.byte	0x1
 6829 13de A806     		.2byte	0x6a8
 6830 13e0 3F020000 		.4byte	0x23f
 6831 13e4 E30A0000 		.4byte	.LLST76
 6832 13e8 19       		.uleb128 0x19
 6833 13e9 7D050000 		.4byte	.LASF88
 6834 13ed 01       		.byte	0x1
 6835 13ee AA06     		.2byte	0x6aa
 6836 13f0 45050000 		.4byte	0x545
 6837 13f4 010B0000 		.4byte	.LLST77
 6838 13f8 1B       		.uleb128 0x1b
 6839 13f9 08000000 		.4byte	.LVL239
 6840 13fd 93200000 		.4byte	0x2093
 6841 1401 21       		.uleb128 0x21
 6842 1402 18000000 		.4byte	.LVL241
 6843 1406 B5200000 		.4byte	0x20b5
 6844 140a 15140000 		.4byte	0x1415
 6845 140e 1D       		.uleb128 0x1d
 6846 140f 01       		.uleb128 0x1
 6847 1410 50       		.byte	0x50
 6848 1411 02       		.uleb128 0x2
 6849 1412 75       		.byte	0x75
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 228


 6850 1413 00       		.sleb128 0
 6851 1414 00       		.byte	0
 6852 1415 21       		.uleb128 0x21
 6853 1416 48000000 		.4byte	.LVL242
 6854 141a B5200000 		.4byte	0x20b5
 6855 141e 29140000 		.4byte	0x1429
 6856 1422 1D       		.uleb128 0x1d
 6857 1423 01       		.uleb128 0x1
 6858 1424 50       		.byte	0x50
 6859 1425 02       		.uleb128 0x2
 6860 1426 74       		.byte	0x74
 6861 1427 18       		.sleb128 24
 6862 1428 00       		.byte	0
 6863 1429 21       		.uleb128 0x21
 6864 142a 50000000 		.4byte	.LVL243
 6865 142e 9E200000 		.4byte	0x209e
 6866 1432 46140000 		.4byte	0x1446
 6867 1436 1D       		.uleb128 0x1d
 6868 1437 01       		.uleb128 0x1
 6869 1438 50       		.byte	0x50
 6870 1439 05       		.uleb128 0x5
 6871 143a 03       		.byte	0x3
 6872 143b 00000000 		.4byte	.LANCHOR0
 6873 143f 1D       		.uleb128 0x1d
 6874 1440 01       		.uleb128 0x1
 6875 1441 51       		.byte	0x51
 6876 1442 02       		.uleb128 0x2
 6877 1443 75       		.byte	0x75
 6878 1444 00       		.sleb128 0
 6879 1445 00       		.byte	0
 6880 1446 1B       		.uleb128 0x1b
 6881 1447 64000000 		.4byte	.LVL244
 6882 144b AA200000 		.4byte	0x20aa
 6883 144f 1B       		.uleb128 0x1b
 6884 1450 70000000 		.4byte	.LVL245
 6885 1454 93200000 		.4byte	0x2093
 6886 1458 1B       		.uleb128 0x1b
 6887 1459 74000000 		.4byte	.LVL246
 6888 145d 1E050000 		.4byte	0x51e
 6889 1461 1B       		.uleb128 0x1b
 6890 1462 78000000 		.4byte	.LVL247
 6891 1466 AA200000 		.4byte	0x20aa
 6892 146a 1B       		.uleb128 0x1b
 6893 146b B6000000 		.4byte	.LVL250
 6894 146f 00130000 		.4byte	0x1300
 6895 1473 00       		.byte	0
 6896 1474 26       		.uleb128 0x26
 6897 1475 FA030000 		.4byte	.LASF163
 6898 1479 01       		.byte	0x1
 6899 147a F80B     		.2byte	0xbf8
 6900 147c 00000000 		.4byte	.LFB93
 6901 1480 20000000 		.4byte	.LFE93-.LFB93
 6902 1484 01       		.uleb128 0x1
 6903 1485 9C       		.byte	0x9c
 6904 1486 D5140000 		.4byte	0x14d5
 6905 148a 18       		.uleb128 0x18
 6906 148b 21060000 		.4byte	.LASF164
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 229


 6907 148f 01       		.byte	0x1
 6908 1490 F80B     		.2byte	0xbf8
 6909 1492 BD130000 		.4byte	0x13bd
 6910 1496 140B0000 		.4byte	.LLST78
 6911 149a 18       		.uleb128 0x18
 6912 149b C1010000 		.4byte	.LASF109
 6913 149f 01       		.byte	0x1
 6914 14a0 F80B     		.2byte	0xbf8
 6915 14a2 E4080000 		.4byte	0x8e4
 6916 14a6 350B0000 		.4byte	.LLST79
 6917 14aa 21       		.uleb128 0x21
 6918 14ab 10000000 		.4byte	.LVL254
 6919 14af C1200000 		.4byte	0x20c1
 6920 14b3 BF140000 		.4byte	0x14bf
 6921 14b7 1D       		.uleb128 0x1d
 6922 14b8 01       		.uleb128 0x1
 6923 14b9 50       		.byte	0x50
 6924 14ba 03       		.uleb128 0x3
 6925 14bb F3       		.byte	0xf3
 6926 14bc 01       		.uleb128 0x1
 6927 14bd 50       		.byte	0x50
 6928 14be 00       		.byte	0
 6929 14bf 1C       		.uleb128 0x1c
 6930 14c0 18000000 		.4byte	.LVL255
 6931 14c4 56080000 		.4byte	0x856
 6932 14c8 1D       		.uleb128 0x1d
 6933 14c9 01       		.uleb128 0x1
 6934 14ca 50       		.byte	0x50
 6935 14cb 02       		.uleb128 0x2
 6936 14cc 74       		.byte	0x74
 6937 14cd 00       		.sleb128 0
 6938 14ce 1D       		.uleb128 0x1d
 6939 14cf 01       		.uleb128 0x1
 6940 14d0 51       		.byte	0x51
 6941 14d1 01       		.uleb128 0x1
 6942 14d2 31       		.byte	0x31
 6943 14d3 00       		.byte	0
 6944 14d4 00       		.byte	0
 6945 14d5 26       		.uleb128 0x26
 6946 14d6 95040000 		.4byte	.LASF165
 6947 14da 01       		.byte	0x1
 6948 14db 090C     		.2byte	0xc09
 6949 14dd 00000000 		.4byte	.LFB94
 6950 14e1 28000000 		.4byte	.LFE94-.LFB94
 6951 14e5 01       		.uleb128 0x1
 6952 14e6 9C       		.byte	0x9c
 6953 14e7 46150000 		.4byte	0x1546
 6954 14eb 18       		.uleb128 0x18
 6955 14ec 21060000 		.4byte	.LASF164
 6956 14f0 01       		.byte	0x1
 6957 14f1 090C     		.2byte	0xc09
 6958 14f3 E7100000 		.4byte	0x10e7
 6959 14f7 610B0000 		.4byte	.LLST80
 6960 14fb 18       		.uleb128 0x18
 6961 14fc D20D0000 		.4byte	.LASF28
 6962 1500 01       		.byte	0x1
 6963 1501 090C     		.2byte	0xc09
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 230


 6964 1503 E4080000 		.4byte	0x8e4
 6965 1507 820B0000 		.4byte	.LLST81
 6966 150b 18       		.uleb128 0x18
 6967 150c C1010000 		.4byte	.LASF109
 6968 1510 01       		.byte	0x1
 6969 1511 090C     		.2byte	0xc09
 6970 1513 E4080000 		.4byte	0x8e4
 6971 1517 A30B0000 		.4byte	.LLST82
 6972 151b 21       		.uleb128 0x21
 6973 151c 1A000000 		.4byte	.LVL260
 6974 1520 9E200000 		.4byte	0x209e
 6975 1524 30150000 		.4byte	0x1530
 6976 1528 1D       		.uleb128 0x1d
 6977 1529 01       		.uleb128 0x1
 6978 152a 50       		.byte	0x50
 6979 152b 03       		.uleb128 0x3
 6980 152c F3       		.byte	0xf3
 6981 152d 01       		.uleb128 0x1
 6982 152e 50       		.byte	0x50
 6983 152f 00       		.byte	0
 6984 1530 1C       		.uleb128 0x1c
 6985 1531 22000000 		.4byte	.LVL261
 6986 1535 56080000 		.4byte	0x856
 6987 1539 1D       		.uleb128 0x1d
 6988 153a 01       		.uleb128 0x1
 6989 153b 50       		.byte	0x50
 6990 153c 02       		.uleb128 0x2
 6991 153d 74       		.byte	0x74
 6992 153e 00       		.sleb128 0
 6993 153f 1D       		.uleb128 0x1d
 6994 1540 01       		.uleb128 0x1
 6995 1541 51       		.byte	0x51
 6996 1542 01       		.uleb128 0x1
 6997 1543 31       		.byte	0x31
 6998 1544 00       		.byte	0
 6999 1545 00       		.byte	0
 7000 1546 24       		.uleb128 0x24
 7001 1547 1C0C0000 		.4byte	.LASF166
 7002 154b 01       		.byte	0x1
 7003 154c 420C     		.2byte	0xc42
 7004 154e 35010000 		.4byte	0x135
 7005 1552 00000000 		.4byte	.LFB95
 7006 1556 74000000 		.4byte	.LFE95-.LFB95
 7007 155a 01       		.uleb128 0x1
 7008 155b 9C       		.byte	0x9c
 7009 155c E6150000 		.4byte	0x15e6
 7010 1560 18       		.uleb128 0x18
 7011 1561 21060000 		.4byte	.LASF164
 7012 1565 01       		.byte	0x1
 7013 1566 420C     		.2byte	0xc42
 7014 1568 E6150000 		.4byte	0x15e6
 7015 156c CF0B0000 		.4byte	.LLST83
 7016 1570 19       		.uleb128 0x19
 7017 1571 87090000 		.4byte	.LASF167
 7018 1575 01       		.byte	0x1
 7019 1576 440C     		.2byte	0xc44
 7020 1578 45050000 		.4byte	0x545
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 231


 7021 157c F00B0000 		.4byte	.LLST84
 7022 1580 19       		.uleb128 0x19
 7023 1581 6B040000 		.4byte	.LASF87
 7024 1585 01       		.byte	0x1
 7025 1586 450C     		.2byte	0xc45
 7026 1588 35010000 		.4byte	0x135
 7027 158c 030C0000 		.4byte	.LLST85
 7028 1590 21       		.uleb128 0x21
 7029 1591 10000000 		.4byte	.LVL266
 7030 1595 B5200000 		.4byte	0x20b5
 7031 1599 A4150000 		.4byte	0x15a4
 7032 159d 1D       		.uleb128 0x1d
 7033 159e 01       		.uleb128 0x1
 7034 159f 50       		.byte	0x50
 7035 15a0 02       		.uleb128 0x2
 7036 15a1 75       		.byte	0x75
 7037 15a2 00       		.sleb128 0
 7038 15a3 00       		.byte	0
 7039 15a4 21       		.uleb128 0x21
 7040 15a5 20000000 		.4byte	.LVL267
 7041 15a9 B5200000 		.4byte	0x20b5
 7042 15ad B8150000 		.4byte	0x15b8
 7043 15b1 1D       		.uleb128 0x1d
 7044 15b2 01       		.uleb128 0x1
 7045 15b3 50       		.byte	0x50
 7046 15b4 02       		.uleb128 0x2
 7047 15b5 75       		.byte	0x75
 7048 15b6 00       		.sleb128 0
 7049 15b7 00       		.byte	0
 7050 15b8 21       		.uleb128 0x21
 7051 15b9 44000000 		.4byte	.LVL268
 7052 15bd 9E200000 		.4byte	0x209e
 7053 15c1 CC150000 		.4byte	0x15cc
 7054 15c5 1D       		.uleb128 0x1d
 7055 15c6 01       		.uleb128 0x1
 7056 15c7 51       		.byte	0x51
 7057 15c8 02       		.uleb128 0x2
 7058 15c9 75       		.byte	0x75
 7059 15ca 00       		.sleb128 0
 7060 15cb 00       		.byte	0
 7061 15cc 1C       		.uleb128 0x1c
 7062 15cd 4E000000 		.4byte	.LVL269
 7063 15d1 9E200000 		.4byte	0x209e
 7064 15d5 1D       		.uleb128 0x1d
 7065 15d6 01       		.uleb128 0x1
 7066 15d7 50       		.byte	0x50
 7067 15d8 05       		.uleb128 0x5
 7068 15d9 03       		.byte	0x3
 7069 15da 14000000 		.4byte	.LANCHOR0+20
 7070 15de 1D       		.uleb128 0x1d
 7071 15df 01       		.uleb128 0x1
 7072 15e0 51       		.byte	0x51
 7073 15e1 02       		.uleb128 0x2
 7074 15e2 75       		.byte	0x75
 7075 15e3 00       		.sleb128 0
 7076 15e4 00       		.byte	0
 7077 15e5 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 232


 7078 15e6 07       		.uleb128 0x7
 7079 15e7 660B0000 		.4byte	0xb66
 7080 15eb 26       		.uleb128 0x26
 7081 15ec CB0F0000 		.4byte	.LASF168
 7082 15f0 01       		.byte	0x1
 7083 15f1 860C     		.2byte	0xc86
 7084 15f3 00000000 		.4byte	.LFB96
 7085 15f7 54000000 		.4byte	.LFE96-.LFB96
 7086 15fb 01       		.uleb128 0x1
 7087 15fc 9C       		.byte	0x9c
 7088 15fd 6B160000 		.4byte	0x166b
 7089 1601 18       		.uleb128 0x18
 7090 1602 BE0C0000 		.4byte	.LASF169
 7091 1606 01       		.byte	0x1
 7092 1607 860C     		.2byte	0xc86
 7093 1609 2E020000 		.4byte	0x22e
 7094 160d 220C0000 		.4byte	.LLST86
 7095 1611 18       		.uleb128 0x18
 7096 1612 D20D0000 		.4byte	.LASF28
 7097 1616 01       		.byte	0x1
 7098 1617 860C     		.2byte	0xc86
 7099 1619 E4080000 		.4byte	0x8e4
 7100 161d 430C0000 		.4byte	.LLST87
 7101 1621 19       		.uleb128 0x19
 7102 1622 87090000 		.4byte	.LASF167
 7103 1626 01       		.byte	0x1
 7104 1627 880C     		.2byte	0xc88
 7105 1629 45050000 		.4byte	0x545
 7106 162d 640C0000 		.4byte	.LLST88
 7107 1631 21       		.uleb128 0x21
 7108 1632 0E000000 		.4byte	.LVL277
 7109 1636 B5200000 		.4byte	0x20b5
 7110 163a 46160000 		.4byte	0x1646
 7111 163e 1D       		.uleb128 0x1d
 7112 163f 01       		.uleb128 0x1
 7113 1640 50       		.byte	0x50
 7114 1641 03       		.uleb128 0x3
 7115 1642 F3       		.byte	0xf3
 7116 1643 01       		.uleb128 0x1
 7117 1644 50       		.byte	0x50
 7118 1645 00       		.byte	0
 7119 1646 21       		.uleb128 0x21
 7120 1647 16000000 		.4byte	.LVL278
 7121 164b B5200000 		.4byte	0x20b5
 7122 164f 5A160000 		.4byte	0x165a
 7123 1653 1D       		.uleb128 0x1d
 7124 1654 01       		.uleb128 0x1
 7125 1655 50       		.byte	0x50
 7126 1656 02       		.uleb128 0x2
 7127 1657 76       		.byte	0x76
 7128 1658 00       		.sleb128 0
 7129 1659 00       		.byte	0
 7130 165a 1C       		.uleb128 0x1c
 7131 165b 3C000000 		.4byte	.LVL279
 7132 165f 9E200000 		.4byte	0x209e
 7133 1663 1D       		.uleb128 0x1d
 7134 1664 01       		.uleb128 0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 233


 7135 1665 51       		.byte	0x51
 7136 1666 02       		.uleb128 0x2
 7137 1667 76       		.byte	0x76
 7138 1668 00       		.sleb128 0
 7139 1669 00       		.byte	0
 7140 166a 00       		.byte	0
 7141 166b 26       		.uleb128 0x26
 7142 166c 860F0000 		.4byte	.LASF170
 7143 1670 01       		.byte	0x1
 7144 1671 B60C     		.2byte	0xcb6
 7145 1673 00000000 		.4byte	.LFB97
 7146 1677 20000000 		.4byte	.LFE97-.LFB97
 7147 167b 01       		.uleb128 0x1
 7148 167c 9C       		.byte	0x9c
 7149 167d A4160000 		.4byte	0x16a4
 7150 1681 18       		.uleb128 0x18
 7151 1682 35010000 		.4byte	.LASF171
 7152 1686 01       		.byte	0x1
 7153 1687 B60C     		.2byte	0xcb6
 7154 1689 AA160000 		.4byte	0x16aa
 7155 168d 770C0000 		.4byte	.LLST89
 7156 1691 1B       		.uleb128 0x1b
 7157 1692 08000000 		.4byte	.LVL282
 7158 1696 93200000 		.4byte	0x2093
 7159 169a 1B       		.uleb128 0x1b
 7160 169b 1A000000 		.4byte	.LVL283
 7161 169f AA200000 		.4byte	0x20aa
 7162 16a3 00       		.byte	0
 7163 16a4 06       		.uleb128 0x6
 7164 16a5 04       		.byte	0x4
 7165 16a6 75030000 		.4byte	0x375
 7166 16aa 07       		.uleb128 0x7
 7167 16ab A4160000 		.4byte	0x16a4
 7168 16af 26       		.uleb128 0x26
 7169 16b0 AD0D0000 		.4byte	.LASF172
 7170 16b4 01       		.byte	0x1
 7171 16b5 C20C     		.2byte	0xcc2
 7172 16b7 00000000 		.4byte	.LFB98
 7173 16bb 14000000 		.4byte	.LFE98-.LFB98
 7174 16bf 01       		.uleb128 0x1
 7175 16c0 9C       		.byte	0x9c
 7176 16c1 D4160000 		.4byte	0x16d4
 7177 16c5 1E       		.uleb128 0x1e
 7178 16c6 35010000 		.4byte	.LASF171
 7179 16ca 01       		.byte	0x1
 7180 16cb C20C     		.2byte	0xcc2
 7181 16cd AA160000 		.4byte	0x16aa
 7182 16d1 01       		.uleb128 0x1
 7183 16d2 50       		.byte	0x50
 7184 16d3 00       		.byte	0
 7185 16d4 24       		.uleb128 0x24
 7186 16d5 9C0C0000 		.4byte	.LASF173
 7187 16d9 01       		.byte	0x1
 7188 16da CA0C     		.2byte	0xcca
 7189 16dc 35010000 		.4byte	0x135
 7190 16e0 00000000 		.4byte	.LFB99
 7191 16e4 58000000 		.4byte	.LFE99-.LFB99
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 234


 7192 16e8 01       		.uleb128 0x1
 7193 16e9 9C       		.byte	0x9c
 7194 16ea 6F170000 		.4byte	0x176f
 7195 16ee 18       		.uleb128 0x18
 7196 16ef 35010000 		.4byte	.LASF171
 7197 16f3 01       		.byte	0x1
 7198 16f4 CA0C     		.2byte	0xcca
 7199 16f6 AA160000 		.4byte	0x16aa
 7200 16fa A30C0000 		.4byte	.LLST90
 7201 16fe 18       		.uleb128 0x18
 7202 16ff 650E0000 		.4byte	.LASF174
 7203 1703 01       		.byte	0x1
 7204 1704 CA0C     		.2byte	0xcca
 7205 1706 4C120000 		.4byte	0x124c
 7206 170a 1A0D0000 		.4byte	.LLST91
 7207 170e 19       		.uleb128 0x19
 7208 170f 6B040000 		.4byte	.LASF87
 7209 1713 01       		.byte	0x1
 7210 1714 CC0C     		.2byte	0xccc
 7211 1716 35010000 		.4byte	0x135
 7212 171a 460D0000 		.4byte	.LLST92
 7213 171e 25       		.uleb128 0x25
 7214 171f 0A000000 		.4byte	.LBB54
 7215 1723 42000000 		.4byte	.LBE54-.LBB54
 7216 1727 5C170000 		.4byte	0x175c
 7217 172b 19       		.uleb128 0x19
 7218 172c 73040000 		.4byte	.LASF112
 7219 1730 01       		.byte	0x1
 7220 1731 D40C     		.2byte	0xcd4
 7221 1733 E4080000 		.4byte	0x8e4
 7222 1737 7C0D0000 		.4byte	.LLST93
 7223 173b 19       		.uleb128 0x19
 7224 173c 83060000 		.4byte	.LASF175
 7225 1740 01       		.byte	0x1
 7226 1741 D50C     		.2byte	0xcd5
 7227 1743 E4080000 		.4byte	0x8e4
 7228 1747 9A0D0000 		.4byte	.LLST94
 7229 174b 1C       		.uleb128 0x1c
 7230 174c 3A000000 		.4byte	.LVL291
 7231 1750 AF160000 		.4byte	0x16af
 7232 1754 1D       		.uleb128 0x1d
 7233 1755 01       		.uleb128 0x1
 7234 1756 50       		.byte	0x50
 7235 1757 02       		.uleb128 0x2
 7236 1758 74       		.byte	0x74
 7237 1759 00       		.sleb128 0
 7238 175a 00       		.byte	0
 7239 175b 00       		.byte	0
 7240 175c 1B       		.uleb128 0x1b
 7241 175d 0A000000 		.4byte	.LVL287
 7242 1761 93200000 		.4byte	0x2093
 7243 1765 1B       		.uleb128 0x1b
 7244 1766 50000000 		.4byte	.LVL300
 7245 176a AA200000 		.4byte	0x20aa
 7246 176e 00       		.byte	0
 7247 176f 2C       		.uleb128 0x2c
 7248 1770 9A010000 		.4byte	.LASF177
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 235


 7249 1774 01       		.byte	0x1
 7250 1775 090D     		.2byte	0xd09
 7251 1777 00000000 		.4byte	.LFB100
 7252 177b 10000000 		.4byte	.LFE100-.LFB100
 7253 177f 01       		.uleb128 0x1
 7254 1780 9C       		.byte	0x9c
 7255 1781 24       		.uleb128 0x24
 7256 1782 410F0000 		.4byte	.LASF178
 7257 1786 01       		.byte	0x1
 7258 1787 130F     		.2byte	0xf13
 7259 1789 40010000 		.4byte	0x140
 7260 178d 00000000 		.4byte	.LFB105
 7261 1791 18000000 		.4byte	.LFE105-.LFB105
 7262 1795 01       		.uleb128 0x1
 7263 1796 9C       		.byte	0x9c
 7264 1797 E3170000 		.4byte	0x17e3
 7265 179b 18       		.uleb128 0x18
 7266 179c 8C0B0000 		.4byte	.LASF91
 7267 17a0 01       		.byte	0x1
 7268 17a1 130F     		.2byte	0xf13
 7269 17a3 3F020000 		.4byte	0x23f
 7270 17a7 C80D0000 		.4byte	.LLST95
 7271 17ab 19       		.uleb128 0x19
 7272 17ac 7D050000 		.4byte	.LASF88
 7273 17b0 01       		.byte	0x1
 7274 17b1 150F     		.2byte	0xf15
 7275 17b3 45050000 		.4byte	0x545
 7276 17b7 DB0D0000 		.4byte	.LLST96
 7277 17bb 19       		.uleb128 0x19
 7278 17bc 05030000 		.4byte	.LASF179
 7279 17c0 01       		.byte	0x1
 7280 17c1 160F     		.2byte	0xf16
 7281 17c3 56010000 		.4byte	0x156
 7282 17c7 EE0D0000 		.4byte	.LLST97
 7283 17cb 1F       		.uleb128 0x1f
 7284 17cc F4050000 		.4byte	.LASF122
 7285 17d0 01       		.byte	0x1
 7286 17d1 170F     		.2byte	0xf17
 7287 17d3 40010000 		.4byte	0x140
 7288 17d7 01       		.uleb128 0x1
 7289 17d8 50       		.byte	0x50
 7290 17d9 1B       		.uleb128 0x1b
 7291 17da 12000000 		.4byte	.LVL304
 7292 17de D8040000 		.4byte	0x4d8
 7293 17e2 00       		.byte	0
 7294 17e3 24       		.uleb128 0x24
 7295 17e4 71070000 		.4byte	.LASF180
 7296 17e8 01       		.byte	0x1
 7297 17e9 810F     		.2byte	0xf81
 7298 17eb 3F020000 		.4byte	0x23f
 7299 17ef 00000000 		.4byte	.LFB108
 7300 17f3 0C000000 		.4byte	.LFE108-.LFB108
 7301 17f7 01       		.uleb128 0x1
 7302 17f8 9C       		.byte	0x9c
 7303 17f9 0C180000 		.4byte	0x180c
 7304 17fd 1F       		.uleb128 0x1f
 7305 17fe 6B040000 		.4byte	.LASF87
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 236


 7306 1802 01       		.byte	0x1
 7307 1803 830F     		.2byte	0xf83
 7308 1805 3F020000 		.4byte	0x23f
 7309 1809 01       		.uleb128 0x1
 7310 180a 50       		.byte	0x50
 7311 180b 00       		.byte	0
 7312 180c 24       		.uleb128 0x24
 7313 180d E20C0000 		.4byte	.LASF181
 7314 1811 01       		.byte	0x1
 7315 1812 AE0F     		.2byte	0xfae
 7316 1814 35010000 		.4byte	0x135
 7317 1818 00000000 		.4byte	.LFB109
 7318 181c BC000000 		.4byte	.LFE109-.LFB109
 7319 1820 01       		.uleb128 0x1
 7320 1821 9C       		.byte	0x9c
 7321 1822 7B180000 		.4byte	0x187b
 7322 1826 18       		.uleb128 0x18
 7323 1827 AE060000 		.4byte	.LASF182
 7324 182b 01       		.byte	0x1
 7325 182c AE0F     		.2byte	0xfae
 7326 182e C3040000 		.4byte	0x4c3
 7327 1832 020E0000 		.4byte	.LLST98
 7328 1836 19       		.uleb128 0x19
 7329 1837 6F010000 		.4byte	.LASF183
 7330 183b 01       		.byte	0x1
 7331 183c B00F     		.2byte	0xfb0
 7332 183e 9C0D0000 		.4byte	0xd9c
 7333 1842 8E0E0000 		.4byte	.LLST99
 7334 1846 19       		.uleb128 0x19
 7335 1847 6B040000 		.4byte	.LASF87
 7336 184b 01       		.byte	0x1
 7337 184c B10F     		.2byte	0xfb1
 7338 184e 35010000 		.4byte	0x135
 7339 1852 1A0F0000 		.4byte	.LLST100
 7340 1856 21       		.uleb128 0x21
 7341 1857 44000000 		.4byte	.LVL308
 7342 185b B5200000 		.4byte	0x20b5
 7343 185f 6A180000 		.4byte	0x186a
 7344 1863 1D       		.uleb128 0x1d
 7345 1864 01       		.uleb128 0x1
 7346 1865 50       		.byte	0x50
 7347 1866 02       		.uleb128 0x2
 7348 1867 75       		.byte	0x75
 7349 1868 00       		.sleb128 0
 7350 1869 00       		.byte	0
 7351 186a 1C       		.uleb128 0x1c
 7352 186b 86000000 		.4byte	.LVL310
 7353 186f 9E200000 		.4byte	0x209e
 7354 1873 1D       		.uleb128 0x1d
 7355 1874 01       		.uleb128 0x1
 7356 1875 51       		.byte	0x51
 7357 1876 02       		.uleb128 0x2
 7358 1877 75       		.byte	0x75
 7359 1878 00       		.sleb128 0
 7360 1879 00       		.byte	0
 7361 187a 00       		.byte	0
 7362 187b 24       		.uleb128 0x24
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 237


 7363 187c 1E0F0000 		.4byte	.LASF184
 7364 1880 01       		.byte	0x1
 7365 1881 0810     		.2byte	0x1008
 7366 1883 35010000 		.4byte	0x135
 7367 1887 00000000 		.4byte	.LFB110
 7368 188b 88000000 		.4byte	.LFE110-.LFB110
 7369 188f 01       		.uleb128 0x1
 7370 1890 9C       		.byte	0x9c
 7371 1891 EA180000 		.4byte	0x18ea
 7372 1895 18       		.uleb128 0x18
 7373 1896 AE060000 		.4byte	.LASF182
 7374 189a 01       		.byte	0x1
 7375 189b 0810     		.2byte	0x1008
 7376 189d C3040000 		.4byte	0x4c3
 7377 18a1 500F0000 		.4byte	.LLST101
 7378 18a5 19       		.uleb128 0x19
 7379 18a6 7D050000 		.4byte	.LASF88
 7380 18aa 01       		.byte	0x1
 7381 18ab 0A10     		.2byte	0x100a
 7382 18ad 9C0D0000 		.4byte	0xd9c
 7383 18b1 B80F0000 		.4byte	.LLST102
 7384 18b5 19       		.uleb128 0x19
 7385 18b6 6B040000 		.4byte	.LASF87
 7386 18ba 01       		.byte	0x1
 7387 18bb 0B10     		.2byte	0x100b
 7388 18bd 35010000 		.4byte	0x135
 7389 18c1 20100000 		.4byte	.LLST103
 7390 18c5 21       		.uleb128 0x21
 7391 18c6 22000000 		.4byte	.LVL320
 7392 18ca B5200000 		.4byte	0x20b5
 7393 18ce D9180000 		.4byte	0x18d9
 7394 18d2 1D       		.uleb128 0x1d
 7395 18d3 01       		.uleb128 0x1
 7396 18d4 50       		.byte	0x50
 7397 18d5 02       		.uleb128 0x2
 7398 18d6 75       		.byte	0x75
 7399 18d7 00       		.sleb128 0
 7400 18d8 00       		.byte	0
 7401 18d9 1C       		.uleb128 0x1c
 7402 18da 72000000 		.4byte	.LVL322
 7403 18de 9E200000 		.4byte	0x209e
 7404 18e2 1D       		.uleb128 0x1d
 7405 18e3 01       		.uleb128 0x1
 7406 18e4 51       		.byte	0x51
 7407 18e5 02       		.uleb128 0x2
 7408 18e6 75       		.byte	0x75
 7409 18e7 00       		.sleb128 0
 7410 18e8 00       		.byte	0
 7411 18e9 00       		.byte	0
 7412 18ea 26       		.uleb128 0x26
 7413 18eb 5E080000 		.4byte	.LASF185
 7414 18ef 01       		.byte	0x1
 7415 18f0 5810     		.2byte	0x1058
 7416 18f2 00000000 		.4byte	.LFB111
 7417 18f6 8C000000 		.4byte	.LFE111-.LFB111
 7418 18fa 01       		.uleb128 0x1
 7419 18fb 9C       		.byte	0x9c
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 238


 7420 18fc 82190000 		.4byte	0x1982
 7421 1900 18       		.uleb128 0x18
 7422 1901 AE060000 		.4byte	.LASF182
 7423 1905 01       		.byte	0x1
 7424 1906 5810     		.2byte	0x1058
 7425 1908 C3040000 		.4byte	0x4c3
 7426 190c 6E100000 		.4byte	.LLST104
 7427 1910 18       		.uleb128 0x18
 7428 1911 FB060000 		.4byte	.LASF186
 7429 1915 01       		.byte	0x1
 7430 1916 5810     		.2byte	0x1058
 7431 1918 40010000 		.4byte	0x140
 7432 191c B0100000 		.4byte	.LLST105
 7433 1920 19       		.uleb128 0x19
 7434 1921 7D050000 		.4byte	.LASF88
 7435 1925 01       		.byte	0x1
 7436 1926 5A10     		.2byte	0x105a
 7437 1928 9C0D0000 		.4byte	0xd9c
 7438 192c DC100000 		.4byte	.LLST106
 7439 1930 19       		.uleb128 0x19
 7440 1931 AB010000 		.4byte	.LASF129
 7441 1935 01       		.byte	0x1
 7442 1936 5B10     		.2byte	0x105b
 7443 1938 40010000 		.4byte	0x140
 7444 193c 1E110000 		.4byte	.LLST107
 7445 1940 19       		.uleb128 0x19
 7446 1941 5D0F0000 		.4byte	.LASF187
 7447 1945 01       		.byte	0x1
 7448 1946 5B10     		.2byte	0x105b
 7449 1948 40010000 		.4byte	0x140
 7450 194c 31110000 		.4byte	.LLST108
 7451 1950 2D       		.uleb128 0x2d
 7452 1951 C30A0000 		.4byte	.LASF188
 7453 1955 01       		.byte	0x1
 7454 1956 5C10     		.2byte	0x105c
 7455 1958 82190000 		.4byte	0x1982
 7456 195c 01       		.byte	0x1
 7457 195d 21       		.uleb128 0x21
 7458 195e 44000000 		.4byte	.LVL336
 7459 1962 B5200000 		.4byte	0x20b5
 7460 1966 71190000 		.4byte	0x1971
 7461 196a 1D       		.uleb128 0x1d
 7462 196b 01       		.uleb128 0x1
 7463 196c 50       		.byte	0x50
 7464 196d 02       		.uleb128 0x2
 7465 196e 75       		.byte	0x75
 7466 196f 00       		.sleb128 0
 7467 1970 00       		.byte	0
 7468 1971 1C       		.uleb128 0x1c
 7469 1972 80000000 		.4byte	.LVL337
 7470 1976 9E200000 		.4byte	0x209e
 7471 197a 1D       		.uleb128 0x1d
 7472 197b 01       		.uleb128 0x1
 7473 197c 51       		.byte	0x51
 7474 197d 02       		.uleb128 0x2
 7475 197e 75       		.byte	0x75
 7476 197f 00       		.sleb128 0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 239


 7477 1980 00       		.byte	0
 7478 1981 00       		.byte	0
 7479 1982 07       		.uleb128 0x7
 7480 1983 40010000 		.4byte	0x140
 7481 1987 24       		.uleb128 0x24
 7482 1988 8F000000 		.4byte	.LASF189
 7483 198c 01       		.byte	0x1
 7484 198d FA11     		.2byte	0x11fa
 7485 198f 4B010000 		.4byte	0x14b
 7486 1993 00000000 		.4byte	.LFB112
 7487 1997 20000000 		.4byte	.LFE112-.LFB112
 7488 199b 01       		.uleb128 0x1
 7489 199c 9C       		.byte	0x9c
 7490 199d B0190000 		.4byte	0x19b0
 7491 19a1 1F       		.uleb128 0x1f
 7492 19a2 F4050000 		.4byte	.LASF122
 7493 19a6 01       		.byte	0x1
 7494 19a7 FC11     		.2byte	0x11fc
 7495 19a9 4B010000 		.4byte	0x14b
 7496 19ad 01       		.uleb128 0x1
 7497 19ae 50       		.byte	0x50
 7498 19af 00       		.byte	0
 7499 19b0 2E       		.uleb128 0x2e
 7500 19b1 350C0000 		.4byte	.LASF191
 7501 19b5 01       		.byte	0x1
 7502 19b6 0A12     		.2byte	0x120a
 7503 19b8 3F020000 		.4byte	0x23f
 7504 19bc 00000000 		.4byte	.LFB113
 7505 19c0 20000000 		.4byte	.LFE113-.LFB113
 7506 19c4 01       		.uleb128 0x1
 7507 19c5 9C       		.byte	0x9c
 7508 19c6 24       		.uleb128 0x24
 7509 19c7 0D0F0000 		.4byte	.LASF192
 7510 19cb 01       		.byte	0x1
 7511 19cc 1B12     		.2byte	0x121b
 7512 19ce EB000000 		.4byte	0xeb
 7513 19d2 00000000 		.4byte	.LFB114
 7514 19d6 80000000 		.4byte	.LFE114-.LFB114
 7515 19da 01       		.uleb128 0x1
 7516 19db 9C       		.byte	0x9c
 7517 19dc 4E1A0000 		.4byte	0x1a4e
 7518 19e0 18       		.uleb128 0x18
 7519 19e1 E3010000 		.4byte	.LASF193
 7520 19e5 01       		.byte	0x1
 7521 19e6 1B12     		.2byte	0x121b
 7522 19e8 35010000 		.4byte	0x135
 7523 19ec 50110000 		.4byte	.LLST109
 7524 19f0 18       		.uleb128 0x18
 7525 19f1 C1010000 		.4byte	.LASF109
 7526 19f5 01       		.byte	0x1
 7527 19f6 1B12     		.2byte	0x121b
 7528 19f8 4B010000 		.4byte	0x14b
 7529 19fc 7C110000 		.4byte	.LLST110
 7530 1a00 19       		.uleb128 0x19
 7531 1a01 F40E0000 		.4byte	.LASF194
 7532 1a05 01       		.byte	0x1
 7533 1a06 1D12     		.2byte	0x121d
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 240


 7534 1a08 EB000000 		.4byte	0xeb
 7535 1a0c A8110000 		.4byte	.LLST111
 7536 1a10 1B       		.uleb128 0x1b
 7537 1a11 0A000000 		.4byte	.LVL341
 7538 1a15 93200000 		.4byte	0x2093
 7539 1a19 21       		.uleb128 0x21
 7540 1a1a 2A000000 		.4byte	.LVL342
 7541 1a1e 56080000 		.4byte	0x856
 7542 1a22 321A0000 		.4byte	0x1a32
 7543 1a26 1D       		.uleb128 0x1d
 7544 1a27 01       		.uleb128 0x1
 7545 1a28 50       		.byte	0x50
 7546 1a29 02       		.uleb128 0x2
 7547 1a2a 74       		.byte	0x74
 7548 1a2b 00       		.sleb128 0
 7549 1a2c 1D       		.uleb128 0x1d
 7550 1a2d 01       		.uleb128 0x1
 7551 1a2e 51       		.byte	0x51
 7552 1a2f 01       		.uleb128 0x1
 7553 1a30 31       		.byte	0x31
 7554 1a31 00       		.byte	0
 7555 1a32 1B       		.uleb128 0x1b
 7556 1a33 3E000000 		.4byte	.LVL343
 7557 1a37 AA200000 		.4byte	0x20aa
 7558 1a3b 1B       		.uleb128 0x1b
 7559 1a3c 42000000 		.4byte	.LVL344
 7560 1a40 93200000 		.4byte	0x2093
 7561 1a44 1B       		.uleb128 0x1b
 7562 1a45 74000000 		.4byte	.LVL346
 7563 1a49 AA200000 		.4byte	0x20aa
 7564 1a4d 00       		.byte	0
 7565 1a4e 24       		.uleb128 0x24
 7566 1a4f E40E0000 		.4byte	.LASF195
 7567 1a53 01       		.byte	0x1
 7568 1a54 5F12     		.2byte	0x125f
 7569 1a56 35010000 		.4byte	0x135
 7570 1a5a 00000000 		.4byte	.LFB115
 7571 1a5e A4000000 		.4byte	.LFE115-.LFB115
 7572 1a62 01       		.uleb128 0x1
 7573 1a63 9C       		.byte	0x9c
 7574 1a64 F61A0000 		.4byte	0x1af6
 7575 1a68 18       		.uleb128 0x18
 7576 1a69 92050000 		.4byte	.LASF196
 7577 1a6d 01       		.byte	0x1
 7578 1a6e 5F12     		.2byte	0x125f
 7579 1a70 EB000000 		.4byte	0xeb
 7580 1a74 C6110000 		.4byte	.LLST112
 7581 1a78 18       		.uleb128 0x18
 7582 1a79 9B0F0000 		.4byte	.LASF197
 7583 1a7d 01       		.byte	0x1
 7584 1a7e 5F12     		.2byte	0x125f
 7585 1a80 EB000000 		.4byte	0xeb
 7586 1a84 F2110000 		.4byte	.LLST113
 7587 1a88 18       		.uleb128 0x18
 7588 1a89 90080000 		.4byte	.LASF198
 7589 1a8d 01       		.byte	0x1
 7590 1a8e 5F12     		.2byte	0x125f
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 241


 7591 1a90 F61A0000 		.4byte	0x1af6
 7592 1a94 37120000 		.4byte	.LLST114
 7593 1a98 18       		.uleb128 0x18
 7594 1a99 C1010000 		.4byte	.LASF109
 7595 1a9d 01       		.byte	0x1
 7596 1a9e 5F12     		.2byte	0x125f
 7597 1aa0 4B010000 		.4byte	0x14b
 7598 1aa4 7C120000 		.4byte	.LLST115
 7599 1aa8 19       		.uleb128 0x19
 7600 1aa9 6B040000 		.4byte	.LASF87
 7601 1aad 01       		.byte	0x1
 7602 1aae 6112     		.2byte	0x1261
 7603 1ab0 35010000 		.4byte	0x135
 7604 1ab4 A8120000 		.4byte	.LLST116
 7605 1ab8 1B       		.uleb128 0x1b
 7606 1ab9 0E000000 		.4byte	.LVL349
 7607 1abd 93200000 		.4byte	0x2093
 7608 1ac1 21       		.uleb128 0x21
 7609 1ac2 40000000 		.4byte	.LVL350
 7610 1ac6 56080000 		.4byte	0x856
 7611 1aca DA1A0000 		.4byte	0x1ada
 7612 1ace 1D       		.uleb128 0x1d
 7613 1acf 01       		.uleb128 0x1
 7614 1ad0 50       		.byte	0x50
 7615 1ad1 02       		.uleb128 0x2
 7616 1ad2 76       		.byte	0x76
 7617 1ad3 00       		.sleb128 0
 7618 1ad4 1D       		.uleb128 0x1d
 7619 1ad5 01       		.uleb128 0x1
 7620 1ad6 51       		.byte	0x51
 7621 1ad7 01       		.uleb128 0x1
 7622 1ad8 31       		.byte	0x31
 7623 1ad9 00       		.byte	0
 7624 1ada 1B       		.uleb128 0x1b
 7625 1adb 54000000 		.4byte	.LVL351
 7626 1adf AA200000 		.4byte	0x20aa
 7627 1ae3 1B       		.uleb128 0x1b
 7628 1ae4 58000000 		.4byte	.LVL352
 7629 1ae8 93200000 		.4byte	0x2093
 7630 1aec 1B       		.uleb128 0x1b
 7631 1aed 98000000 		.4byte	.LVL358
 7632 1af1 AA200000 		.4byte	0x20aa
 7633 1af5 00       		.byte	0
 7634 1af6 06       		.uleb128 0x6
 7635 1af7 04       		.byte	0x4
 7636 1af8 EB000000 		.4byte	0xeb
 7637 1afc 24       		.uleb128 0x24
 7638 1afd 8F0D0000 		.4byte	.LASF199
 7639 1b01 01       		.byte	0x1
 7640 1b02 AF12     		.2byte	0x12af
 7641 1b04 35010000 		.4byte	0x135
 7642 1b08 00000000 		.4byte	.LFB116
 7643 1b0c B8000000 		.4byte	.LFE116-.LFB116
 7644 1b10 01       		.uleb128 0x1
 7645 1b11 9C       		.byte	0x9c
 7646 1b12 C11B0000 		.4byte	0x1bc1
 7647 1b16 18       		.uleb128 0x18
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 242


 7648 1b17 EB040000 		.4byte	.LASF200
 7649 1b1b 01       		.byte	0x1
 7650 1b1c AF12     		.2byte	0x12af
 7651 1b1e 3F020000 		.4byte	0x23f
 7652 1b22 D2120000 		.4byte	.LLST117
 7653 1b26 18       		.uleb128 0x18
 7654 1b27 87000000 		.4byte	.LASF201
 7655 1b2b 01       		.byte	0x1
 7656 1b2c AF12     		.2byte	0x12af
 7657 1b2e EB000000 		.4byte	0xeb
 7658 1b32 FE120000 		.4byte	.LLST118
 7659 1b36 18       		.uleb128 0x18
 7660 1b37 1B020000 		.4byte	.LASF202
 7661 1b3b 01       		.byte	0x1
 7662 1b3c AF12     		.2byte	0x12af
 7663 1b3e 45030000 		.4byte	0x345
 7664 1b42 43130000 		.4byte	.LLST119
 7665 1b46 18       		.uleb128 0x18
 7666 1b47 35030000 		.4byte	.LASF203
 7667 1b4b 01       		.byte	0x1
 7668 1b4c AF12     		.2byte	0x12af
 7669 1b4e F61A0000 		.4byte	0x1af6
 7670 1b52 64130000 		.4byte	.LLST120
 7671 1b56 19       		.uleb128 0x19
 7672 1b57 7D050000 		.4byte	.LASF88
 7673 1b5b 01       		.byte	0x1
 7674 1b5c B112     		.2byte	0x12b1
 7675 1b5e 45050000 		.4byte	0x545
 7676 1b62 90130000 		.4byte	.LLST121
 7677 1b66 19       		.uleb128 0x19
 7678 1b67 6B040000 		.4byte	.LASF87
 7679 1b6b 01       		.byte	0x1
 7680 1b6c B212     		.2byte	0x12b2
 7681 1b6e 35010000 		.4byte	0x135
 7682 1b72 BC130000 		.4byte	.LLST122
 7683 1b76 19       		.uleb128 0x19
 7684 1b77 89020000 		.4byte	.LASF204
 7685 1b7b 01       		.byte	0x1
 7686 1b7c B312     		.2byte	0x12b3
 7687 1b7e CA000000 		.4byte	0xca
 7688 1b82 E6130000 		.4byte	.LLST123
 7689 1b86 1B       		.uleb128 0x1b
 7690 1b87 0E000000 		.4byte	.LVL362
 7691 1b8b 93200000 		.4byte	0x2093
 7692 1b8f 21       		.uleb128 0x21
 7693 1b90 64000000 		.4byte	.LVL367
 7694 1b94 B5200000 		.4byte	0x20b5
 7695 1b98 A31B0000 		.4byte	0x1ba3
 7696 1b9c 1D       		.uleb128 0x1d
 7697 1b9d 01       		.uleb128 0x1
 7698 1b9e 50       		.byte	0x50
 7699 1b9f 02       		.uleb128 0x2
 7700 1ba0 77       		.byte	0x77
 7701 1ba1 00       		.sleb128 0
 7702 1ba2 00       		.byte	0
 7703 1ba3 21       		.uleb128 0x21
 7704 1ba4 8A000000 		.4byte	.LVL369
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 243


 7705 1ba8 9E200000 		.4byte	0x209e
 7706 1bac B71B0000 		.4byte	0x1bb7
 7707 1bb0 1D       		.uleb128 0x1d
 7708 1bb1 01       		.uleb128 0x1
 7709 1bb2 51       		.byte	0x51
 7710 1bb3 02       		.uleb128 0x2
 7711 1bb4 77       		.byte	0x77
 7712 1bb5 00       		.sleb128 0
 7713 1bb6 00       		.byte	0
 7714 1bb7 1B       		.uleb128 0x1b
 7715 1bb8 AA000000 		.4byte	.LVL370
 7716 1bbc AA200000 		.4byte	0x20aa
 7717 1bc0 00       		.byte	0
 7718 1bc1 24       		.uleb128 0x24
 7719 1bc2 E0030000 		.4byte	.LASF205
 7720 1bc6 01       		.byte	0x1
 7721 1bc7 2113     		.2byte	0x1321
 7722 1bc9 35010000 		.4byte	0x135
 7723 1bcd 00000000 		.4byte	.LFB117
 7724 1bd1 D8000000 		.4byte	.LFE117-.LFB117
 7725 1bd5 01       		.uleb128 0x1
 7726 1bd6 9C       		.byte	0x9c
 7727 1bd7 F01C0000 		.4byte	0x1cf0
 7728 1bdb 18       		.uleb128 0x18
 7729 1bdc EB040000 		.4byte	.LASF200
 7730 1be0 01       		.byte	0x1
 7731 1be1 2113     		.2byte	0x1321
 7732 1be3 3F020000 		.4byte	0x23f
 7733 1be7 F9130000 		.4byte	.LLST124
 7734 1beb 18       		.uleb128 0x18
 7735 1bec 87000000 		.4byte	.LASF201
 7736 1bf0 01       		.byte	0x1
 7737 1bf1 2113     		.2byte	0x1321
 7738 1bf3 EB000000 		.4byte	0xeb
 7739 1bf7 3B140000 		.4byte	.LLST125
 7740 1bfb 18       		.uleb128 0x18
 7741 1bfc 1B020000 		.4byte	.LASF202
 7742 1c00 01       		.byte	0x1
 7743 1c01 2113     		.2byte	0x1321
 7744 1c03 45030000 		.4byte	0x345
 7745 1c07 75140000 		.4byte	.LLST126
 7746 1c0b 18       		.uleb128 0x18
 7747 1c0c 35030000 		.4byte	.LASF203
 7748 1c10 01       		.byte	0x1
 7749 1c11 2113     		.2byte	0x1321
 7750 1c13 F61A0000 		.4byte	0x1af6
 7751 1c17 96140000 		.4byte	.LLST127
 7752 1c1b 18       		.uleb128 0x18
 7753 1c1c 13050000 		.4byte	.LASF206
 7754 1c20 01       		.byte	0x1
 7755 1c21 2113     		.2byte	0x1321
 7756 1c23 F01C0000 		.4byte	0x1cf0
 7757 1c27 B7140000 		.4byte	.LLST128
 7758 1c2b 19       		.uleb128 0x19
 7759 1c2c 7D050000 		.4byte	.LASF88
 7760 1c30 01       		.byte	0x1
 7761 1c31 2313     		.2byte	0x1323
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 244


 7762 1c33 45050000 		.4byte	0x545
 7763 1c37 D7140000 		.4byte	.LLST129
 7764 1c3b 19       		.uleb128 0x19
 7765 1c3c 89020000 		.4byte	.LASF204
 7766 1c40 01       		.byte	0x1
 7767 1c41 2413     		.2byte	0x1324
 7768 1c43 CA000000 		.4byte	0xca
 7769 1c47 19150000 		.4byte	.LLST130
 7770 1c4b 19       		.uleb128 0x19
 7771 1c4c 6B040000 		.4byte	.LASF87
 7772 1c50 01       		.byte	0x1
 7773 1c51 2513     		.2byte	0x1325
 7774 1c53 35010000 		.4byte	0x135
 7775 1c57 2C150000 		.4byte	.LLST131
 7776 1c5b 27       		.uleb128 0x27
 7777 1c5c F50A0000 		.4byte	.LASF134
 7778 1c60 01       		.byte	0x1
 7779 1c61 2613     		.2byte	0x1326
 7780 1c63 40010000 		.4byte	0x140
 7781 1c67 28       		.uleb128 0x28
 7782 1c68 FA030000 		.4byte	0x3fa
 7783 1c6c 02000000 		.4byte	.LBB55
 7784 1c70 14000000 		.4byte	.LBE55-.LBB55
 7785 1c74 01       		.byte	0x1
 7786 1c75 3E13     		.2byte	0x133e
 7787 1c77 901C0000 		.4byte	0x1c90
 7788 1c7b 22       		.uleb128 0x22
 7789 1c7c 02000000 		.4byte	.LBB56
 7790 1c80 14000000 		.4byte	.LBE56-.LBB56
 7791 1c84 29       		.uleb128 0x29
 7792 1c85 0A040000 		.4byte	0x40a
 7793 1c89 29       		.uleb128 0x29
 7794 1c8a 15040000 		.4byte	0x415
 7795 1c8e 00       		.byte	0
 7796 1c8f 00       		.byte	0
 7797 1c90 28       		.uleb128 0x28
 7798 1c91 21040000 		.4byte	0x421
 7799 1c95 C6000000 		.4byte	.LBB57
 7800 1c99 04000000 		.4byte	.LBE57-.LBB57
 7801 1c9d 01       		.byte	0x1
 7802 1c9e 9813     		.2byte	0x1398
 7803 1ca0 AE1C0000 		.4byte	0x1cae
 7804 1ca4 2B       		.uleb128 0x2b
 7805 1ca5 2D040000 		.4byte	0x42d
 7806 1ca9 56150000 		.4byte	.LLST132
 7807 1cad 00       		.byte	0
 7808 1cae 21       		.uleb128 0x21
 7809 1caf 76000000 		.4byte	.LVL382
 7810 1cb3 B5200000 		.4byte	0x20b5
 7811 1cb7 C21C0000 		.4byte	0x1cc2
 7812 1cbb 1D       		.uleb128 0x1d
 7813 1cbc 01       		.uleb128 0x1
 7814 1cbd 50       		.byte	0x50
 7815 1cbe 02       		.uleb128 0x2
 7816 1cbf 77       		.byte	0x77
 7817 1cc0 00       		.sleb128 0
 7818 1cc1 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 245


 7819 1cc2 21       		.uleb128 0x21
 7820 1cc3 9A000000 		.4byte	.LVL383
 7821 1cc7 9E200000 		.4byte	0x209e
 7822 1ccb D61C0000 		.4byte	0x1cd6
 7823 1ccf 1D       		.uleb128 0x1d
 7824 1cd0 01       		.uleb128 0x1
 7825 1cd1 51       		.byte	0x51
 7826 1cd2 02       		.uleb128 0x2
 7827 1cd3 77       		.byte	0x77
 7828 1cd4 00       		.sleb128 0
 7829 1cd5 00       		.byte	0
 7830 1cd6 1C       		.uleb128 0x1c
 7831 1cd7 A6000000 		.4byte	.LVL386
 7832 1cdb 9E200000 		.4byte	0x209e
 7833 1cdf 1D       		.uleb128 0x1d
 7834 1ce0 01       		.uleb128 0x1
 7835 1ce1 50       		.byte	0x50
 7836 1ce2 05       		.uleb128 0x5
 7837 1ce3 03       		.byte	0x3
 7838 1ce4 14000000 		.4byte	.LANCHOR0+20
 7839 1ce8 1D       		.uleb128 0x1d
 7840 1ce9 01       		.uleb128 0x1
 7841 1cea 51       		.byte	0x51
 7842 1ceb 02       		.uleb128 0x2
 7843 1cec 76       		.byte	0x76
 7844 1ced 18       		.sleb128 24
 7845 1cee 00       		.byte	0
 7846 1cef 00       		.byte	0
 7847 1cf0 06       		.uleb128 0x6
 7848 1cf1 04       		.byte	0x4
 7849 1cf2 35010000 		.4byte	0x135
 7850 1cf6 26       		.uleb128 0x26
 7851 1cf7 2D070000 		.4byte	.LASF207
 7852 1cfb 01       		.byte	0x1
 7853 1cfc A213     		.2byte	0x13a2
 7854 1cfe 00000000 		.4byte	.LFB118
 7855 1d02 9C000000 		.4byte	.LFE118-.LFB118
 7856 1d06 01       		.uleb128 0x1
 7857 1d07 9C       		.byte	0x9c
 7858 1d08 E11D0000 		.4byte	0x1de1
 7859 1d0c 18       		.uleb128 0x18
 7860 1d0d EB040000 		.4byte	.LASF200
 7861 1d11 01       		.byte	0x1
 7862 1d12 A213     		.2byte	0x13a2
 7863 1d14 3F020000 		.4byte	0x23f
 7864 1d18 69150000 		.4byte	.LLST133
 7865 1d1c 18       		.uleb128 0x18
 7866 1d1d 13050000 		.4byte	.LASF206
 7867 1d21 01       		.byte	0x1
 7868 1d22 A213     		.2byte	0x13a2
 7869 1d24 F01C0000 		.4byte	0x1cf0
 7870 1d28 AB150000 		.4byte	.LLST134
 7871 1d2c 19       		.uleb128 0x19
 7872 1d2d 7D050000 		.4byte	.LASF88
 7873 1d31 01       		.byte	0x1
 7874 1d32 A413     		.2byte	0x13a4
 7875 1d34 45050000 		.4byte	0x545
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 246


 7876 1d38 ED150000 		.4byte	.LLST135
 7877 1d3c 19       		.uleb128 0x19
 7878 1d3d 89020000 		.4byte	.LASF204
 7879 1d41 01       		.byte	0x1
 7880 1d42 A513     		.2byte	0x13a5
 7881 1d44 CA000000 		.4byte	0xca
 7882 1d48 2F160000 		.4byte	.LLST136
 7883 1d4c 27       		.uleb128 0x27
 7884 1d4d F50A0000 		.4byte	.LASF134
 7885 1d51 01       		.byte	0x1
 7886 1d52 A613     		.2byte	0x13a6
 7887 1d54 40010000 		.4byte	0x140
 7888 1d58 28       		.uleb128 0x28
 7889 1d59 FA030000 		.4byte	0x3fa
 7890 1d5d 02000000 		.4byte	.LBB59
 7891 1d61 14000000 		.4byte	.LBE59-.LBB59
 7892 1d65 01       		.byte	0x1
 7893 1d66 BE13     		.2byte	0x13be
 7894 1d68 811D0000 		.4byte	0x1d81
 7895 1d6c 22       		.uleb128 0x22
 7896 1d6d 02000000 		.4byte	.LBB60
 7897 1d71 14000000 		.4byte	.LBE60-.LBB60
 7898 1d75 29       		.uleb128 0x29
 7899 1d76 0A040000 		.4byte	0x40a
 7900 1d7a 29       		.uleb128 0x29
 7901 1d7b 15040000 		.4byte	0x415
 7902 1d7f 00       		.byte	0
 7903 1d80 00       		.byte	0
 7904 1d81 28       		.uleb128 0x28
 7905 1d82 21040000 		.4byte	0x421
 7906 1d86 8C000000 		.4byte	.LBB61
 7907 1d8a 10000000 		.4byte	.LBE61-.LBB61
 7908 1d8e 01       		.byte	0x1
 7909 1d8f F013     		.2byte	0x13f0
 7910 1d91 9F1D0000 		.4byte	0x1d9f
 7911 1d95 2B       		.uleb128 0x2b
 7912 1d96 2D040000 		.4byte	0x42d
 7913 1d9a 42160000 		.4byte	.LLST137
 7914 1d9e 00       		.byte	0
 7915 1d9f 21       		.uleb128 0x21
 7916 1da0 40000000 		.4byte	.LVL395
 7917 1da4 B5200000 		.4byte	0x20b5
 7918 1da8 B31D0000 		.4byte	0x1db3
 7919 1dac 1D       		.uleb128 0x1d
 7920 1dad 01       		.uleb128 0x1
 7921 1dae 50       		.byte	0x50
 7922 1daf 02       		.uleb128 0x2
 7923 1db0 77       		.byte	0x77
 7924 1db1 00       		.sleb128 0
 7925 1db2 00       		.byte	0
 7926 1db3 21       		.uleb128 0x21
 7927 1db4 64000000 		.4byte	.LVL396
 7928 1db8 9E200000 		.4byte	0x209e
 7929 1dbc C71D0000 		.4byte	0x1dc7
 7930 1dc0 1D       		.uleb128 0x1d
 7931 1dc1 01       		.uleb128 0x1
 7932 1dc2 51       		.byte	0x51
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 247


 7933 1dc3 02       		.uleb128 0x2
 7934 1dc4 77       		.byte	0x77
 7935 1dc5 00       		.sleb128 0
 7936 1dc6 00       		.byte	0
 7937 1dc7 1C       		.uleb128 0x1c
 7938 1dc8 70000000 		.4byte	.LVL400
 7939 1dcc 9E200000 		.4byte	0x209e
 7940 1dd0 1D       		.uleb128 0x1d
 7941 1dd1 01       		.uleb128 0x1
 7942 1dd2 50       		.byte	0x50
 7943 1dd3 05       		.uleb128 0x5
 7944 1dd4 03       		.byte	0x3
 7945 1dd5 14000000 		.4byte	.LANCHOR0+20
 7946 1dd9 1D       		.uleb128 0x1d
 7947 1dda 01       		.uleb128 0x1
 7948 1ddb 51       		.byte	0x51
 7949 1ddc 02       		.uleb128 0x2
 7950 1ddd 74       		.byte	0x74
 7951 1dde 18       		.sleb128 24
 7952 1ddf 00       		.byte	0
 7953 1de0 00       		.byte	0
 7954 1de1 24       		.uleb128 0x24
 7955 1de2 ED000000 		.4byte	.LASF208
 7956 1de6 01       		.byte	0x1
 7957 1de7 F813     		.2byte	0x13f8
 7958 1de9 35010000 		.4byte	0x135
 7959 1ded 00000000 		.4byte	.LFB119
 7960 1df1 34000000 		.4byte	.LFE119-.LFB119
 7961 1df5 01       		.uleb128 0x1
 7962 1df6 9C       		.byte	0x9c
 7963 1df7 3E1E0000 		.4byte	0x1e3e
 7964 1dfb 18       		.uleb128 0x18
 7965 1dfc 8C0B0000 		.4byte	.LASF91
 7966 1e00 01       		.byte	0x1
 7967 1e01 F813     		.2byte	0x13f8
 7968 1e03 3F020000 		.4byte	0x23f
 7969 1e07 55160000 		.4byte	.LLST138
 7970 1e0b 19       		.uleb128 0x19
 7971 1e0c 7D050000 		.4byte	.LASF88
 7972 1e10 01       		.byte	0x1
 7973 1e11 FA13     		.2byte	0x13fa
 7974 1e13 45050000 		.4byte	0x545
 7975 1e17 68160000 		.4byte	.LLST139
 7976 1e1b 19       		.uleb128 0x19
 7977 1e1c 6B040000 		.4byte	.LASF87
 7978 1e20 01       		.byte	0x1
 7979 1e21 FB13     		.2byte	0x13fb
 7980 1e23 35010000 		.4byte	0x135
 7981 1e27 86160000 		.4byte	.LLST140
 7982 1e2b 1B       		.uleb128 0x1b
 7983 1e2c 10000000 		.4byte	.LVL405
 7984 1e30 93200000 		.4byte	0x2093
 7985 1e34 1B       		.uleb128 0x1b
 7986 1e35 2A000000 		.4byte	.LVL410
 7987 1e39 AA200000 		.4byte	0x20aa
 7988 1e3d 00       		.byte	0
 7989 1e3e 24       		.uleb128 0x24
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 248


 7990 1e3f 46060000 		.4byte	.LASF209
 7991 1e43 01       		.byte	0x1
 7992 1e44 1714     		.2byte	0x1417
 7993 1e46 EB000000 		.4byte	0xeb
 7994 1e4a 00000000 		.4byte	.LFB120
 7995 1e4e 30000000 		.4byte	.LFE120-.LFB120
 7996 1e52 01       		.uleb128 0x1
 7997 1e53 9C       		.byte	0x9c
 7998 1e54 AB1E0000 		.4byte	0x1eab
 7999 1e58 18       		.uleb128 0x18
 8000 1e59 8C0B0000 		.4byte	.LASF91
 8001 1e5d 01       		.byte	0x1
 8002 1e5e 1714     		.2byte	0x1417
 8003 1e60 3F020000 		.4byte	0x23f
 8004 1e64 B0160000 		.4byte	.LLST141
 8005 1e68 18       		.uleb128 0x18
 8006 1e69 7B020000 		.4byte	.LASF210
 8007 1e6d 01       		.byte	0x1
 8008 1e6e 1714     		.2byte	0x1417
 8009 1e70 EB000000 		.4byte	0xeb
 8010 1e74 C3160000 		.4byte	.LLST142
 8011 1e78 19       		.uleb128 0x19
 8012 1e79 7D050000 		.4byte	.LASF88
 8013 1e7d 01       		.byte	0x1
 8014 1e7e 1914     		.2byte	0x1419
 8015 1e80 45050000 		.4byte	0x545
 8016 1e84 EF160000 		.4byte	.LLST143
 8017 1e88 19       		.uleb128 0x19
 8018 1e89 F40E0000 		.4byte	.LASF194
 8019 1e8d 01       		.byte	0x1
 8020 1e8e 1A14     		.2byte	0x141a
 8021 1e90 EB000000 		.4byte	0xeb
 8022 1e94 02170000 		.4byte	.LLST144
 8023 1e98 1B       		.uleb128 0x1b
 8024 1e99 12000000 		.4byte	.LVL414
 8025 1e9d 93200000 		.4byte	0x2093
 8026 1ea1 1B       		.uleb128 0x1b
 8027 1ea2 26000000 		.4byte	.LVL416
 8028 1ea6 AA200000 		.4byte	0x20aa
 8029 1eaa 00       		.byte	0
 8030 1eab 10       		.uleb128 0x10
 8031 1eac 34020000 		.4byte	0x234
 8032 1eb0 BB1E0000 		.4byte	0x1ebb
 8033 1eb4 11       		.uleb128 0x11
 8034 1eb5 A9000000 		.4byte	0xa9
 8035 1eb9 04       		.byte	0x4
 8036 1eba 00       		.byte	0
 8037 1ebb 1F       		.uleb128 0x1f
 8038 1ebc 120D0000 		.4byte	.LASF211
 8039 1ec0 01       		.byte	0x1
 8040 1ec1 5701     		.2byte	0x157
 8041 1ec3 AB1E0000 		.4byte	0x1eab
 8042 1ec7 05       		.uleb128 0x5
 8043 1ec8 03       		.byte	0x3
 8044 1ec9 30000000 		.4byte	pxReadyTasksLists
 8045 1ecd 1F       		.uleb128 0x1f
 8046 1ece 5B0D0000 		.4byte	.LASF212
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 249


 8047 1ed2 01       		.byte	0x1
 8048 1ed3 5801     		.2byte	0x158
 8049 1ed5 34020000 		.4byte	0x234
 8050 1ed9 05       		.uleb128 0x5
 8051 1eda 03       		.byte	0x3
 8052 1edb 94000000 		.4byte	xDelayedTaskList1
 8053 1edf 1F       		.uleb128 0x1f
 8054 1ee0 6D0D0000 		.4byte	.LASF213
 8055 1ee4 01       		.byte	0x1
 8056 1ee5 5901     		.2byte	0x159
 8057 1ee7 34020000 		.4byte	0x234
 8058 1eeb 05       		.uleb128 0x5
 8059 1eec 03       		.byte	0x3
 8060 1eed A8000000 		.4byte	xDelayedTaskList2
 8061 1ef1 1F       		.uleb128 0x1f
 8062 1ef2 FD050000 		.4byte	.LASF214
 8063 1ef6 01       		.byte	0x1
 8064 1ef7 5A01     		.2byte	0x15a
 8065 1ef9 031F0000 		.4byte	0x1f03
 8066 1efd 05       		.uleb128 0x5
 8067 1efe 03       		.byte	0x3
 8068 1eff 28000000 		.4byte	pxDelayedTaskList
 8069 1f03 08       		.uleb128 0x8
 8070 1f04 E7100000 		.4byte	0x10e7
 8071 1f08 1F       		.uleb128 0x1f
 8072 1f09 D8060000 		.4byte	.LASF215
 8073 1f0d 01       		.byte	0x1
 8074 1f0e 5B01     		.2byte	0x15b
 8075 1f10 031F0000 		.4byte	0x1f03
 8076 1f14 05       		.uleb128 0x5
 8077 1f15 03       		.byte	0x3
 8078 1f16 D0000000 		.4byte	pxOverflowDelayedTaskList
 8079 1f1a 1F       		.uleb128 0x1f
 8080 1f1b 44070000 		.4byte	.LASF216
 8081 1f1f 01       		.byte	0x1
 8082 1f20 5C01     		.2byte	0x15c
 8083 1f22 34020000 		.4byte	0x234
 8084 1f26 05       		.uleb128 0x5
 8085 1f27 03       		.byte	0x3
 8086 1f28 14000000 		.4byte	xPendingReadyList
 8087 1f2c 1F       		.uleb128 0x1f
 8088 1f2d 50020000 		.4byte	.LASF217
 8089 1f31 01       		.byte	0x1
 8090 1f32 6001     		.2byte	0x160
 8091 1f34 34020000 		.4byte	0x234
 8092 1f38 05       		.uleb128 0x5
 8093 1f39 03       		.byte	0x3
 8094 1f3a BC000000 		.4byte	xTasksWaitingTermination
 8095 1f3e 1F       		.uleb128 0x1f
 8096 1f3f 530C0000 		.4byte	.LASF218
 8097 1f43 01       		.byte	0x1
 8098 1f44 6101     		.2byte	0x161
 8099 1f46 29020000 		.4byte	0x229
 8100 1f4a 05       		.uleb128 0x5
 8101 1f4b 03       		.byte	0x3
 8102 1f4c E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8103 1f50 1F       		.uleb128 0x1f
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 250


 8104 1f51 CF000000 		.4byte	.LASF219
 8105 1f55 01       		.byte	0x1
 8106 1f56 6701     		.2byte	0x167
 8107 1f58 34020000 		.4byte	0x234
 8108 1f5c 05       		.uleb128 0x5
 8109 1f5d 03       		.byte	0x3
 8110 1f5e 00000000 		.4byte	xSuspendedTaskList
 8111 1f62 1F       		.uleb128 0x1f
 8112 1f63 70000000 		.4byte	.LASF220
 8113 1f67 01       		.byte	0x1
 8114 1f68 7201     		.2byte	0x172
 8115 1f6a 29020000 		.4byte	0x229
 8116 1f6e 05       		.uleb128 0x5
 8117 1f6f 03       		.byte	0x3
 8118 1f70 D4000000 		.4byte	uxCurrentNumberOfTasks
 8119 1f74 1F       		.uleb128 0x1f
 8120 1f75 A20D0000 		.4byte	.LASF221
 8121 1f79 01       		.byte	0x1
 8122 1f7a 7301     		.2byte	0x173
 8123 1f7c 861F0000 		.4byte	0x1f86
 8124 1f80 05       		.uleb128 0x5
 8125 1f81 03       		.byte	0x3
 8126 1f82 EC000000 		.4byte	xTickCount
 8127 1f86 08       		.uleb128 0x8
 8128 1f87 4B010000 		.4byte	0x14b
 8129 1f8b 1F       		.uleb128 0x1f
 8130 1f8c 0D080000 		.4byte	.LASF222
 8131 1f90 01       		.byte	0x1
 8132 1f91 7401     		.2byte	0x174
 8133 1f93 29020000 		.4byte	0x229
 8134 1f97 05       		.uleb128 0x5
 8135 1f98 03       		.byte	0x3
 8136 1f99 E4000000 		.4byte	uxTopReadyPriority
 8137 1f9d 1F       		.uleb128 0x1f
 8138 1f9e B7090000 		.4byte	.LASF223
 8139 1fa2 01       		.byte	0x1
 8140 1fa3 7501     		.2byte	0x175
 8141 1fa5 AF1F0000 		.4byte	0x1faf
 8142 1fa9 05       		.uleb128 0x5
 8143 1faa 03       		.byte	0x3
 8144 1fab DC000000 		.4byte	xSchedulerRunning
 8145 1faf 08       		.uleb128 0x8
 8146 1fb0 35010000 		.4byte	0x135
 8147 1fb4 1F       		.uleb128 0x1f
 8148 1fb5 A7050000 		.4byte	.LASF224
 8149 1fb9 01       		.byte	0x1
 8150 1fba 7601     		.2byte	0x176
 8151 1fbc 861F0000 		.4byte	0x1f86
 8152 1fc0 05       		.uleb128 0x5
 8153 1fc1 03       		.byte	0x3
 8154 1fc2 00010000 		.4byte	xPendedTicks
 8155 1fc6 1F       		.uleb128 0x1f
 8156 1fc7 A9000000 		.4byte	.LASF225
 8157 1fcb 01       		.byte	0x1
 8158 1fcc 7701     		.2byte	0x177
 8159 1fce AF1F0000 		.4byte	0x1faf
 8160 1fd2 05       		.uleb128 0x5
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 251


 8161 1fd3 03       		.byte	0x3
 8162 1fd4 FC000000 		.4byte	xYieldPending
 8163 1fd8 1F       		.uleb128 0x1f
 8164 1fd9 7F0D0000 		.4byte	.LASF226
 8165 1fdd 01       		.byte	0x1
 8166 1fde 7801     		.2byte	0x178
 8167 1fe0 AF1F0000 		.4byte	0x1faf
 8168 1fe4 05       		.uleb128 0x5
 8169 1fe5 03       		.byte	0x3
 8170 1fe6 F8000000 		.4byte	xNumOfOverflows
 8171 1fea 1F       		.uleb128 0x1f
 8172 1feb CE0C0000 		.4byte	.LASF227
 8173 1fef 01       		.byte	0x1
 8174 1ff0 7901     		.2byte	0x179
 8175 1ff2 40010000 		.4byte	0x140
 8176 1ff6 05       		.uleb128 0x5
 8177 1ff7 03       		.byte	0x3
 8178 1ff8 E0000000 		.4byte	uxTaskNumber
 8179 1ffc 1F       		.uleb128 0x1f
 8180 1ffd CE010000 		.4byte	.LASF228
 8181 2001 01       		.byte	0x1
 8182 2002 7A01     		.2byte	0x17a
 8183 2004 861F0000 		.4byte	0x1f86
 8184 2008 05       		.uleb128 0x5
 8185 2009 03       		.byte	0x3
 8186 200a 2C000000 		.4byte	xNextTaskUnblockTime
 8187 200e 1F       		.uleb128 0x1f
 8188 200f F70C0000 		.4byte	.LASF229
 8189 2013 01       		.byte	0x1
 8190 2014 7B01     		.2byte	0x17b
 8191 2016 3F020000 		.4byte	0x23f
 8192 201a 05       		.uleb128 0x5
 8193 201b 03       		.byte	0x3
 8194 201c F4000000 		.4byte	xIdleTaskHandle
 8195 2020 1F       		.uleb128 0x1f
 8196 2021 36040000 		.4byte	.LASF230
 8197 2025 01       		.byte	0x1
 8198 2026 8501     		.2byte	0x185
 8199 2028 29020000 		.4byte	0x229
 8200 202c 05       		.uleb128 0x5
 8201 202d 03       		.byte	0x3
 8202 202e F0000000 		.4byte	uxSchedulerSuspended
 8203 2032 33       		.uleb128 0x33
 8204 2033 48010000 		.4byte	.LASF231
 8205 2037 09       		.byte	0x9
 8206 2038 1207     		.2byte	0x712
 8207 203a 3E200000 		.4byte	0x203e
 8208 203e 08       		.uleb128 0x8
 8209 203f E0000000 		.4byte	0xe0
 8210 2043 34       		.uleb128 0x34
 8211 2044 E7050000 		.4byte	.LASF232
 8212 2048 01       		.byte	0x1
 8213 2049 5101     		.2byte	0x151
 8214 204b 55200000 		.4byte	0x2055
 8215 204f 05       		.uleb128 0x5
 8216 2050 03       		.byte	0x3
 8217 2051 00000000 		.4byte	pxCurrentTCB
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 252


 8218 2055 08       		.uleb128 0x8
 8219 2056 45050000 		.4byte	0x545
 8220 205a 35       		.uleb128 0x35
 8221 205b EB0A0000 		.4byte	.LASF233
 8222 205f EB0A0000 		.4byte	.LASF233
 8223 2063 0A       		.byte	0xa
 8224 2064 A4       		.byte	0xa4
 8225 2065 35       		.uleb128 0x35
 8226 2066 DD0D0000 		.4byte	.LASF234
 8227 206a DD0D0000 		.4byte	.LASF234
 8228 206e 0B       		.byte	0xb
 8229 206f 19       		.byte	0x19
 8230 2070 36       		.uleb128 0x36
 8231 2071 C4060000 		.4byte	.LASF235
 8232 2075 C4060000 		.4byte	.LASF235
 8233 2079 07       		.byte	0x7
 8234 207a 6401     		.2byte	0x164
 8235 207c 35       		.uleb128 0x35
 8236 207d 0A0E0000 		.4byte	.LASF236
 8237 2081 0A0E0000 		.4byte	.LASF236
 8238 2085 0A       		.byte	0xa
 8239 2086 75       		.byte	0x75
 8240 2087 36       		.uleb128 0x36
 8241 2088 A60E0000 		.4byte	.LASF237
 8242 208c A60E0000 		.4byte	.LASF237
 8243 2090 07       		.byte	0x7
 8244 2091 5901     		.2byte	0x159
 8245 2093 35       		.uleb128 0x35
 8246 2094 480D0000 		.4byte	.LASF238
 8247 2098 480D0000 		.4byte	.LASF238
 8248 209c 02       		.byte	0x2
 8249 209d 61       		.byte	0x61
 8250 209e 36       		.uleb128 0x36
 8251 209f 26030000 		.4byte	.LASF239
 8252 20a3 26030000 		.4byte	.LASF239
 8253 20a7 07       		.byte	0x7
 8254 20a8 8601     		.2byte	0x186
 8255 20aa 35       		.uleb128 0x35
 8256 20ab 0A0C0000 		.4byte	.LASF240
 8257 20af 0A0C0000 		.4byte	.LASF240
 8258 20b3 02       		.byte	0x2
 8259 20b4 62       		.byte	0x62
 8260 20b5 36       		.uleb128 0x36
 8261 20b6 B10C0000 		.4byte	.LASF241
 8262 20ba B10C0000 		.4byte	.LASF241
 8263 20be 07       		.byte	0x7
 8264 20bf 9501     		.2byte	0x195
 8265 20c1 36       		.uleb128 0x36
 8266 20c2 9F0B0000 		.4byte	.LASF242
 8267 20c6 9F0B0000 		.4byte	.LASF242
 8268 20ca 07       		.byte	0x7
 8269 20cb 7101     		.2byte	0x171
 8270 20cd 35       		.uleb128 0x35
 8271 20ce D3030000 		.4byte	.LASF243
 8272 20d2 D3030000 		.4byte	.LASF243
 8273 20d6 0A       		.byte	0xa
 8274 20d7 A3       		.byte	0xa3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 253


 8275 20d8 35       		.uleb128 0x35
 8276 20d9 96070000 		.4byte	.LASF244
 8277 20dd 96070000 		.4byte	.LASF244
 8278 20e1 0A       		.byte	0xa
 8279 20e2 AD       		.byte	0xad
 8280 20e3 35       		.uleb128 0x35
 8281 20e4 EB070000 		.4byte	.LASF245
 8282 20e8 EB070000 		.4byte	.LASF245
 8283 20ec 0A       		.byte	0xa
 8284 20ed B4       		.byte	0xb4
 8285 20ee 36       		.uleb128 0x36
 8286 20ef 34050000 		.4byte	.LASF246
 8287 20f3 34050000 		.4byte	.LASF246
 8288 20f7 01       		.byte	0x1
 8289 20f8 9701     		.2byte	0x197
 8290 20fa 00       		.byte	0
 8291              		.section	.debug_abbrev,"",%progbits
 8292              	.Ldebug_abbrev0:
 8293 0000 01       		.uleb128 0x1
 8294 0001 11       		.uleb128 0x11
 8295 0002 01       		.byte	0x1
 8296 0003 25       		.uleb128 0x25
 8297 0004 0E       		.uleb128 0xe
 8298 0005 13       		.uleb128 0x13
 8299 0006 0B       		.uleb128 0xb
 8300 0007 03       		.uleb128 0x3
 8301 0008 0E       		.uleb128 0xe
 8302 0009 1B       		.uleb128 0x1b
 8303 000a 0E       		.uleb128 0xe
 8304 000b 55       		.uleb128 0x55
 8305 000c 17       		.uleb128 0x17
 8306 000d 11       		.uleb128 0x11
 8307 000e 01       		.uleb128 0x1
 8308 000f 10       		.uleb128 0x10
 8309 0010 17       		.uleb128 0x17
 8310 0011 00       		.byte	0
 8311 0012 00       		.byte	0
 8312 0013 02       		.uleb128 0x2
 8313 0014 16       		.uleb128 0x16
 8314 0015 00       		.byte	0
 8315 0016 03       		.uleb128 0x3
 8316 0017 0E       		.uleb128 0xe
 8317 0018 3A       		.uleb128 0x3a
 8318 0019 0B       		.uleb128 0xb
 8319 001a 3B       		.uleb128 0x3b
 8320 001b 0B       		.uleb128 0xb
 8321 001c 49       		.uleb128 0x49
 8322 001d 13       		.uleb128 0x13
 8323 001e 00       		.byte	0
 8324 001f 00       		.byte	0
 8325 0020 03       		.uleb128 0x3
 8326 0021 24       		.uleb128 0x24
 8327 0022 00       		.byte	0
 8328 0023 0B       		.uleb128 0xb
 8329 0024 0B       		.uleb128 0xb
 8330 0025 3E       		.uleb128 0x3e
 8331 0026 0B       		.uleb128 0xb
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 254


 8332 0027 03       		.uleb128 0x3
 8333 0028 0E       		.uleb128 0xe
 8334 0029 00       		.byte	0
 8335 002a 00       		.byte	0
 8336 002b 04       		.uleb128 0x4
 8337 002c 24       		.uleb128 0x24
 8338 002d 00       		.byte	0
 8339 002e 0B       		.uleb128 0xb
 8340 002f 0B       		.uleb128 0xb
 8341 0030 3E       		.uleb128 0x3e
 8342 0031 0B       		.uleb128 0xb
 8343 0032 03       		.uleb128 0x3
 8344 0033 08       		.uleb128 0x8
 8345 0034 00       		.byte	0
 8346 0035 00       		.byte	0
 8347 0036 05       		.uleb128 0x5
 8348 0037 0F       		.uleb128 0xf
 8349 0038 00       		.byte	0
 8350 0039 0B       		.uleb128 0xb
 8351 003a 0B       		.uleb128 0xb
 8352 003b 00       		.byte	0
 8353 003c 00       		.byte	0
 8354 003d 06       		.uleb128 0x6
 8355 003e 0F       		.uleb128 0xf
 8356 003f 00       		.byte	0
 8357 0040 0B       		.uleb128 0xb
 8358 0041 0B       		.uleb128 0xb
 8359 0042 49       		.uleb128 0x49
 8360 0043 13       		.uleb128 0x13
 8361 0044 00       		.byte	0
 8362 0045 00       		.byte	0
 8363 0046 07       		.uleb128 0x7
 8364 0047 26       		.uleb128 0x26
 8365 0048 00       		.byte	0
 8366 0049 49       		.uleb128 0x49
 8367 004a 13       		.uleb128 0x13
 8368 004b 00       		.byte	0
 8369 004c 00       		.byte	0
 8370 004d 08       		.uleb128 0x8
 8371 004e 35       		.uleb128 0x35
 8372 004f 00       		.byte	0
 8373 0050 49       		.uleb128 0x49
 8374 0051 13       		.uleb128 0x13
 8375 0052 00       		.byte	0
 8376 0053 00       		.byte	0
 8377 0054 09       		.uleb128 0x9
 8378 0055 15       		.uleb128 0x15
 8379 0056 01       		.byte	0x1
 8380 0057 27       		.uleb128 0x27
 8381 0058 19       		.uleb128 0x19
 8382 0059 01       		.uleb128 0x1
 8383 005a 13       		.uleb128 0x13
 8384 005b 00       		.byte	0
 8385 005c 00       		.byte	0
 8386 005d 0A       		.uleb128 0xa
 8387 005e 05       		.uleb128 0x5
 8388 005f 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 255


 8389 0060 49       		.uleb128 0x49
 8390 0061 13       		.uleb128 0x13
 8391 0062 00       		.byte	0
 8392 0063 00       		.byte	0
 8393 0064 0B       		.uleb128 0xb
 8394 0065 13       		.uleb128 0x13
 8395 0066 01       		.byte	0x1
 8396 0067 03       		.uleb128 0x3
 8397 0068 0E       		.uleb128 0xe
 8398 0069 0B       		.uleb128 0xb
 8399 006a 0B       		.uleb128 0xb
 8400 006b 3A       		.uleb128 0x3a
 8401 006c 0B       		.uleb128 0xb
 8402 006d 3B       		.uleb128 0x3b
 8403 006e 0B       		.uleb128 0xb
 8404 006f 01       		.uleb128 0x1
 8405 0070 13       		.uleb128 0x13
 8406 0071 00       		.byte	0
 8407 0072 00       		.byte	0
 8408 0073 0C       		.uleb128 0xc
 8409 0074 0D       		.uleb128 0xd
 8410 0075 00       		.byte	0
 8411 0076 03       		.uleb128 0x3
 8412 0077 0E       		.uleb128 0xe
 8413 0078 3A       		.uleb128 0x3a
 8414 0079 0B       		.uleb128 0xb
 8415 007a 3B       		.uleb128 0x3b
 8416 007b 0B       		.uleb128 0xb
 8417 007c 49       		.uleb128 0x49
 8418 007d 13       		.uleb128 0x13
 8419 007e 38       		.uleb128 0x38
 8420 007f 0B       		.uleb128 0xb
 8421 0080 00       		.byte	0
 8422 0081 00       		.byte	0
 8423 0082 0D       		.uleb128 0xd
 8424 0083 0D       		.uleb128 0xd
 8425 0084 00       		.byte	0
 8426 0085 03       		.uleb128 0x3
 8427 0086 0E       		.uleb128 0xe
 8428 0087 3A       		.uleb128 0x3a
 8429 0088 0B       		.uleb128 0xb
 8430 0089 3B       		.uleb128 0x3b
 8431 008a 05       		.uleb128 0x5
 8432 008b 49       		.uleb128 0x49
 8433 008c 13       		.uleb128 0x13
 8434 008d 38       		.uleb128 0x38
 8435 008e 0B       		.uleb128 0xb
 8436 008f 00       		.byte	0
 8437 0090 00       		.byte	0
 8438 0091 0E       		.uleb128 0xe
 8439 0092 04       		.uleb128 0x4
 8440 0093 01       		.byte	0x1
 8441 0094 0B       		.uleb128 0xb
 8442 0095 0B       		.uleb128 0xb
 8443 0096 49       		.uleb128 0x49
 8444 0097 13       		.uleb128 0x13
 8445 0098 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 256


 8446 0099 0B       		.uleb128 0xb
 8447 009a 3B       		.uleb128 0x3b
 8448 009b 0B       		.uleb128 0xb
 8449 009c 01       		.uleb128 0x1
 8450 009d 13       		.uleb128 0x13
 8451 009e 00       		.byte	0
 8452 009f 00       		.byte	0
 8453 00a0 0F       		.uleb128 0xf
 8454 00a1 28       		.uleb128 0x28
 8455 00a2 00       		.byte	0
 8456 00a3 03       		.uleb128 0x3
 8457 00a4 0E       		.uleb128 0xe
 8458 00a5 1C       		.uleb128 0x1c
 8459 00a6 0B       		.uleb128 0xb
 8460 00a7 00       		.byte	0
 8461 00a8 00       		.byte	0
 8462 00a9 10       		.uleb128 0x10
 8463 00aa 01       		.uleb128 0x1
 8464 00ab 01       		.byte	0x1
 8465 00ac 49       		.uleb128 0x49
 8466 00ad 13       		.uleb128 0x13
 8467 00ae 01       		.uleb128 0x1
 8468 00af 13       		.uleb128 0x13
 8469 00b0 00       		.byte	0
 8470 00b1 00       		.byte	0
 8471 00b2 11       		.uleb128 0x11
 8472 00b3 21       		.uleb128 0x21
 8473 00b4 00       		.byte	0
 8474 00b5 49       		.uleb128 0x49
 8475 00b6 13       		.uleb128 0x13
 8476 00b7 2F       		.uleb128 0x2f
 8477 00b8 0B       		.uleb128 0xb
 8478 00b9 00       		.byte	0
 8479 00ba 00       		.byte	0
 8480 00bb 12       		.uleb128 0x12
 8481 00bc 16       		.uleb128 0x16
 8482 00bd 00       		.byte	0
 8483 00be 03       		.uleb128 0x3
 8484 00bf 0E       		.uleb128 0xe
 8485 00c0 3A       		.uleb128 0x3a
 8486 00c1 0B       		.uleb128 0xb
 8487 00c2 3B       		.uleb128 0x3b
 8488 00c3 05       		.uleb128 0x5
 8489 00c4 49       		.uleb128 0x49
 8490 00c5 13       		.uleb128 0x13
 8491 00c6 00       		.byte	0
 8492 00c7 00       		.byte	0
 8493 00c8 13       		.uleb128 0x13
 8494 00c9 2E       		.uleb128 0x2e
 8495 00ca 01       		.byte	0x1
 8496 00cb 03       		.uleb128 0x3
 8497 00cc 0E       		.uleb128 0xe
 8498 00cd 3A       		.uleb128 0x3a
 8499 00ce 0B       		.uleb128 0xb
 8500 00cf 3B       		.uleb128 0x3b
 8501 00d0 0B       		.uleb128 0xb
 8502 00d1 27       		.uleb128 0x27
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 257


 8503 00d2 19       		.uleb128 0x19
 8504 00d3 49       		.uleb128 0x49
 8505 00d4 13       		.uleb128 0x13
 8506 00d5 20       		.uleb128 0x20
 8507 00d6 0B       		.uleb128 0xb
 8508 00d7 01       		.uleb128 0x1
 8509 00d8 13       		.uleb128 0x13
 8510 00d9 00       		.byte	0
 8511 00da 00       		.byte	0
 8512 00db 14       		.uleb128 0x14
 8513 00dc 34       		.uleb128 0x34
 8514 00dd 00       		.byte	0
 8515 00de 03       		.uleb128 0x3
 8516 00df 0E       		.uleb128 0xe
 8517 00e0 3A       		.uleb128 0x3a
 8518 00e1 0B       		.uleb128 0xb
 8519 00e2 3B       		.uleb128 0x3b
 8520 00e3 0B       		.uleb128 0xb
 8521 00e4 49       		.uleb128 0x49
 8522 00e5 13       		.uleb128 0x13
 8523 00e6 00       		.byte	0
 8524 00e7 00       		.byte	0
 8525 00e8 15       		.uleb128 0x15
 8526 00e9 2E       		.uleb128 0x2e
 8527 00ea 01       		.byte	0x1
 8528 00eb 03       		.uleb128 0x3
 8529 00ec 0E       		.uleb128 0xe
 8530 00ed 3A       		.uleb128 0x3a
 8531 00ee 0B       		.uleb128 0xb
 8532 00ef 3B       		.uleb128 0x3b
 8533 00f0 0B       		.uleb128 0xb
 8534 00f1 27       		.uleb128 0x27
 8535 00f2 19       		.uleb128 0x19
 8536 00f3 20       		.uleb128 0x20
 8537 00f4 0B       		.uleb128 0xb
 8538 00f5 01       		.uleb128 0x1
 8539 00f6 13       		.uleb128 0x13
 8540 00f7 00       		.byte	0
 8541 00f8 00       		.byte	0
 8542 00f9 16       		.uleb128 0x16
 8543 00fa 05       		.uleb128 0x5
 8544 00fb 00       		.byte	0
 8545 00fc 03       		.uleb128 0x3
 8546 00fd 0E       		.uleb128 0xe
 8547 00fe 3A       		.uleb128 0x3a
 8548 00ff 0B       		.uleb128 0xb
 8549 0100 3B       		.uleb128 0x3b
 8550 0101 0B       		.uleb128 0xb
 8551 0102 49       		.uleb128 0x49
 8552 0103 13       		.uleb128 0x13
 8553 0104 00       		.byte	0
 8554 0105 00       		.byte	0
 8555 0106 17       		.uleb128 0x17
 8556 0107 2E       		.uleb128 0x2e
 8557 0108 01       		.byte	0x1
 8558 0109 03       		.uleb128 0x3
 8559 010a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 258


 8560 010b 3A       		.uleb128 0x3a
 8561 010c 0B       		.uleb128 0xb
 8562 010d 3B       		.uleb128 0x3b
 8563 010e 05       		.uleb128 0x5
 8564 010f 27       		.uleb128 0x27
 8565 0110 19       		.uleb128 0x19
 8566 0111 49       		.uleb128 0x49
 8567 0112 13       		.uleb128 0x13
 8568 0113 11       		.uleb128 0x11
 8569 0114 01       		.uleb128 0x1
 8570 0115 12       		.uleb128 0x12
 8571 0116 06       		.uleb128 0x6
 8572 0117 40       		.uleb128 0x40
 8573 0118 18       		.uleb128 0x18
 8574 0119 9742     		.uleb128 0x2117
 8575 011b 19       		.uleb128 0x19
 8576 011c 01       		.uleb128 0x1
 8577 011d 13       		.uleb128 0x13
 8578 011e 00       		.byte	0
 8579 011f 00       		.byte	0
 8580 0120 18       		.uleb128 0x18
 8581 0121 05       		.uleb128 0x5
 8582 0122 00       		.byte	0
 8583 0123 03       		.uleb128 0x3
 8584 0124 0E       		.uleb128 0xe
 8585 0125 3A       		.uleb128 0x3a
 8586 0126 0B       		.uleb128 0xb
 8587 0127 3B       		.uleb128 0x3b
 8588 0128 05       		.uleb128 0x5
 8589 0129 49       		.uleb128 0x49
 8590 012a 13       		.uleb128 0x13
 8591 012b 02       		.uleb128 0x2
 8592 012c 17       		.uleb128 0x17
 8593 012d 00       		.byte	0
 8594 012e 00       		.byte	0
 8595 012f 19       		.uleb128 0x19
 8596 0130 34       		.uleb128 0x34
 8597 0131 00       		.byte	0
 8598 0132 03       		.uleb128 0x3
 8599 0133 0E       		.uleb128 0xe
 8600 0134 3A       		.uleb128 0x3a
 8601 0135 0B       		.uleb128 0xb
 8602 0136 3B       		.uleb128 0x3b
 8603 0137 05       		.uleb128 0x5
 8604 0138 49       		.uleb128 0x49
 8605 0139 13       		.uleb128 0x13
 8606 013a 02       		.uleb128 0x2
 8607 013b 17       		.uleb128 0x17
 8608 013c 00       		.byte	0
 8609 013d 00       		.byte	0
 8610 013e 1A       		.uleb128 0x1a
 8611 013f 2E       		.uleb128 0x2e
 8612 0140 01       		.byte	0x1
 8613 0141 03       		.uleb128 0x3
 8614 0142 0E       		.uleb128 0xe
 8615 0143 3A       		.uleb128 0x3a
 8616 0144 0B       		.uleb128 0xb
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 259


 8617 0145 3B       		.uleb128 0x3b
 8618 0146 05       		.uleb128 0x5
 8619 0147 27       		.uleb128 0x27
 8620 0148 19       		.uleb128 0x19
 8621 0149 11       		.uleb128 0x11
 8622 014a 01       		.uleb128 0x1
 8623 014b 12       		.uleb128 0x12
 8624 014c 06       		.uleb128 0x6
 8625 014d 40       		.uleb128 0x40
 8626 014e 18       		.uleb128 0x18
 8627 014f 9742     		.uleb128 0x2117
 8628 0151 19       		.uleb128 0x19
 8629 0152 01       		.uleb128 0x1
 8630 0153 13       		.uleb128 0x13
 8631 0154 00       		.byte	0
 8632 0155 00       		.byte	0
 8633 0156 1B       		.uleb128 0x1b
 8634 0157 898201   		.uleb128 0x4109
 8635 015a 00       		.byte	0
 8636 015b 11       		.uleb128 0x11
 8637 015c 01       		.uleb128 0x1
 8638 015d 31       		.uleb128 0x31
 8639 015e 13       		.uleb128 0x13
 8640 015f 00       		.byte	0
 8641 0160 00       		.byte	0
 8642 0161 1C       		.uleb128 0x1c
 8643 0162 898201   		.uleb128 0x4109
 8644 0165 01       		.byte	0x1
 8645 0166 11       		.uleb128 0x11
 8646 0167 01       		.uleb128 0x1
 8647 0168 31       		.uleb128 0x31
 8648 0169 13       		.uleb128 0x13
 8649 016a 00       		.byte	0
 8650 016b 00       		.byte	0
 8651 016c 1D       		.uleb128 0x1d
 8652 016d 8A8201   		.uleb128 0x410a
 8653 0170 00       		.byte	0
 8654 0171 02       		.uleb128 0x2
 8655 0172 18       		.uleb128 0x18
 8656 0173 9142     		.uleb128 0x2111
 8657 0175 18       		.uleb128 0x18
 8658 0176 00       		.byte	0
 8659 0177 00       		.byte	0
 8660 0178 1E       		.uleb128 0x1e
 8661 0179 05       		.uleb128 0x5
 8662 017a 00       		.byte	0
 8663 017b 03       		.uleb128 0x3
 8664 017c 0E       		.uleb128 0xe
 8665 017d 3A       		.uleb128 0x3a
 8666 017e 0B       		.uleb128 0xb
 8667 017f 3B       		.uleb128 0x3b
 8668 0180 05       		.uleb128 0x5
 8669 0181 49       		.uleb128 0x49
 8670 0182 13       		.uleb128 0x13
 8671 0183 02       		.uleb128 0x2
 8672 0184 18       		.uleb128 0x18
 8673 0185 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 260


 8674 0186 00       		.byte	0
 8675 0187 1F       		.uleb128 0x1f
 8676 0188 34       		.uleb128 0x34
 8677 0189 00       		.byte	0
 8678 018a 03       		.uleb128 0x3
 8679 018b 0E       		.uleb128 0xe
 8680 018c 3A       		.uleb128 0x3a
 8681 018d 0B       		.uleb128 0xb
 8682 018e 3B       		.uleb128 0x3b
 8683 018f 05       		.uleb128 0x5
 8684 0190 49       		.uleb128 0x49
 8685 0191 13       		.uleb128 0x13
 8686 0192 02       		.uleb128 0x2
 8687 0193 18       		.uleb128 0x18
 8688 0194 00       		.byte	0
 8689 0195 00       		.byte	0
 8690 0196 20       		.uleb128 0x20
 8691 0197 34       		.uleb128 0x34
 8692 0198 00       		.byte	0
 8693 0199 03       		.uleb128 0x3
 8694 019a 08       		.uleb128 0x8
 8695 019b 3A       		.uleb128 0x3a
 8696 019c 0B       		.uleb128 0xb
 8697 019d 3B       		.uleb128 0x3b
 8698 019e 05       		.uleb128 0x5
 8699 019f 49       		.uleb128 0x49
 8700 01a0 13       		.uleb128 0x13
 8701 01a1 02       		.uleb128 0x2
 8702 01a2 17       		.uleb128 0x17
 8703 01a3 00       		.byte	0
 8704 01a4 00       		.byte	0
 8705 01a5 21       		.uleb128 0x21
 8706 01a6 898201   		.uleb128 0x4109
 8707 01a9 01       		.byte	0x1
 8708 01aa 11       		.uleb128 0x11
 8709 01ab 01       		.uleb128 0x1
 8710 01ac 31       		.uleb128 0x31
 8711 01ad 13       		.uleb128 0x13
 8712 01ae 01       		.uleb128 0x1
 8713 01af 13       		.uleb128 0x13
 8714 01b0 00       		.byte	0
 8715 01b1 00       		.byte	0
 8716 01b2 22       		.uleb128 0x22
 8717 01b3 0B       		.uleb128 0xb
 8718 01b4 01       		.byte	0x1
 8719 01b5 11       		.uleb128 0x11
 8720 01b6 01       		.uleb128 0x1
 8721 01b7 12       		.uleb128 0x12
 8722 01b8 06       		.uleb128 0x6
 8723 01b9 00       		.byte	0
 8724 01ba 00       		.byte	0
 8725 01bb 23       		.uleb128 0x23
 8726 01bc 2E       		.uleb128 0x2e
 8727 01bd 01       		.byte	0x1
 8728 01be 03       		.uleb128 0x3
 8729 01bf 0E       		.uleb128 0xe
 8730 01c0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 261


 8731 01c1 0B       		.uleb128 0xb
 8732 01c2 3B       		.uleb128 0x3b
 8733 01c3 05       		.uleb128 0x5
 8734 01c4 27       		.uleb128 0x27
 8735 01c5 19       		.uleb128 0x19
 8736 01c6 8701     		.uleb128 0x87
 8737 01c8 19       		.uleb128 0x19
 8738 01c9 11       		.uleb128 0x11
 8739 01ca 01       		.uleb128 0x1
 8740 01cb 12       		.uleb128 0x12
 8741 01cc 06       		.uleb128 0x6
 8742 01cd 40       		.uleb128 0x40
 8743 01ce 18       		.uleb128 0x18
 8744 01cf 9742     		.uleb128 0x2117
 8745 01d1 19       		.uleb128 0x19
 8746 01d2 01       		.uleb128 0x1
 8747 01d3 13       		.uleb128 0x13
 8748 01d4 00       		.byte	0
 8749 01d5 00       		.byte	0
 8750 01d6 24       		.uleb128 0x24
 8751 01d7 2E       		.uleb128 0x2e
 8752 01d8 01       		.byte	0x1
 8753 01d9 3F       		.uleb128 0x3f
 8754 01da 19       		.uleb128 0x19
 8755 01db 03       		.uleb128 0x3
 8756 01dc 0E       		.uleb128 0xe
 8757 01dd 3A       		.uleb128 0x3a
 8758 01de 0B       		.uleb128 0xb
 8759 01df 3B       		.uleb128 0x3b
 8760 01e0 05       		.uleb128 0x5
 8761 01e1 27       		.uleb128 0x27
 8762 01e2 19       		.uleb128 0x19
 8763 01e3 49       		.uleb128 0x49
 8764 01e4 13       		.uleb128 0x13
 8765 01e5 11       		.uleb128 0x11
 8766 01e6 01       		.uleb128 0x1
 8767 01e7 12       		.uleb128 0x12
 8768 01e8 06       		.uleb128 0x6
 8769 01e9 40       		.uleb128 0x40
 8770 01ea 18       		.uleb128 0x18
 8771 01eb 9742     		.uleb128 0x2117
 8772 01ed 19       		.uleb128 0x19
 8773 01ee 01       		.uleb128 0x1
 8774 01ef 13       		.uleb128 0x13
 8775 01f0 00       		.byte	0
 8776 01f1 00       		.byte	0
 8777 01f2 25       		.uleb128 0x25
 8778 01f3 0B       		.uleb128 0xb
 8779 01f4 01       		.byte	0x1
 8780 01f5 11       		.uleb128 0x11
 8781 01f6 01       		.uleb128 0x1
 8782 01f7 12       		.uleb128 0x12
 8783 01f8 06       		.uleb128 0x6
 8784 01f9 01       		.uleb128 0x1
 8785 01fa 13       		.uleb128 0x13
 8786 01fb 00       		.byte	0
 8787 01fc 00       		.byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 262


 8788 01fd 26       		.uleb128 0x26
 8789 01fe 2E       		.uleb128 0x2e
 8790 01ff 01       		.byte	0x1
 8791 0200 3F       		.uleb128 0x3f
 8792 0201 19       		.uleb128 0x19
 8793 0202 03       		.uleb128 0x3
 8794 0203 0E       		.uleb128 0xe
 8795 0204 3A       		.uleb128 0x3a
 8796 0205 0B       		.uleb128 0xb
 8797 0206 3B       		.uleb128 0x3b
 8798 0207 05       		.uleb128 0x5
 8799 0208 27       		.uleb128 0x27
 8800 0209 19       		.uleb128 0x19
 8801 020a 11       		.uleb128 0x11
 8802 020b 01       		.uleb128 0x1
 8803 020c 12       		.uleb128 0x12
 8804 020d 06       		.uleb128 0x6
 8805 020e 40       		.uleb128 0x40
 8806 020f 18       		.uleb128 0x18
 8807 0210 9742     		.uleb128 0x2117
 8808 0212 19       		.uleb128 0x19
 8809 0213 01       		.uleb128 0x1
 8810 0214 13       		.uleb128 0x13
 8811 0215 00       		.byte	0
 8812 0216 00       		.byte	0
 8813 0217 27       		.uleb128 0x27
 8814 0218 34       		.uleb128 0x34
 8815 0219 00       		.byte	0
 8816 021a 03       		.uleb128 0x3
 8817 021b 0E       		.uleb128 0xe
 8818 021c 3A       		.uleb128 0x3a
 8819 021d 0B       		.uleb128 0xb
 8820 021e 3B       		.uleb128 0x3b
 8821 021f 05       		.uleb128 0x5
 8822 0220 49       		.uleb128 0x49
 8823 0221 13       		.uleb128 0x13
 8824 0222 00       		.byte	0
 8825 0223 00       		.byte	0
 8826 0224 28       		.uleb128 0x28
 8827 0225 1D       		.uleb128 0x1d
 8828 0226 01       		.byte	0x1
 8829 0227 31       		.uleb128 0x31
 8830 0228 13       		.uleb128 0x13
 8831 0229 11       		.uleb128 0x11
 8832 022a 01       		.uleb128 0x1
 8833 022b 12       		.uleb128 0x12
 8834 022c 06       		.uleb128 0x6
 8835 022d 58       		.uleb128 0x58
 8836 022e 0B       		.uleb128 0xb
 8837 022f 59       		.uleb128 0x59
 8838 0230 05       		.uleb128 0x5
 8839 0231 01       		.uleb128 0x1
 8840 0232 13       		.uleb128 0x13
 8841 0233 00       		.byte	0
 8842 0234 00       		.byte	0
 8843 0235 29       		.uleb128 0x29
 8844 0236 34       		.uleb128 0x34
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 263


 8845 0237 00       		.byte	0
 8846 0238 31       		.uleb128 0x31
 8847 0239 13       		.uleb128 0x13
 8848 023a 00       		.byte	0
 8849 023b 00       		.byte	0
 8850 023c 2A       		.uleb128 0x2a
 8851 023d 1D       		.uleb128 0x1d
 8852 023e 01       		.byte	0x1
 8853 023f 31       		.uleb128 0x31
 8854 0240 13       		.uleb128 0x13
 8855 0241 11       		.uleb128 0x11
 8856 0242 01       		.uleb128 0x1
 8857 0243 12       		.uleb128 0x12
 8858 0244 06       		.uleb128 0x6
 8859 0245 58       		.uleb128 0x58
 8860 0246 0B       		.uleb128 0xb
 8861 0247 59       		.uleb128 0x59
 8862 0248 05       		.uleb128 0x5
 8863 0249 00       		.byte	0
 8864 024a 00       		.byte	0
 8865 024b 2B       		.uleb128 0x2b
 8866 024c 05       		.uleb128 0x5
 8867 024d 00       		.byte	0
 8868 024e 31       		.uleb128 0x31
 8869 024f 13       		.uleb128 0x13
 8870 0250 02       		.uleb128 0x2
 8871 0251 17       		.uleb128 0x17
 8872 0252 00       		.byte	0
 8873 0253 00       		.byte	0
 8874 0254 2C       		.uleb128 0x2c
 8875 0255 2E       		.uleb128 0x2e
 8876 0256 00       		.byte	0
 8877 0257 3F       		.uleb128 0x3f
 8878 0258 19       		.uleb128 0x19
 8879 0259 03       		.uleb128 0x3
 8880 025a 0E       		.uleb128 0xe
 8881 025b 3A       		.uleb128 0x3a
 8882 025c 0B       		.uleb128 0xb
 8883 025d 3B       		.uleb128 0x3b
 8884 025e 05       		.uleb128 0x5
 8885 025f 27       		.uleb128 0x27
 8886 0260 19       		.uleb128 0x19
 8887 0261 11       		.uleb128 0x11
 8888 0262 01       		.uleb128 0x1
 8889 0263 12       		.uleb128 0x12
 8890 0264 06       		.uleb128 0x6
 8891 0265 40       		.uleb128 0x40
 8892 0266 18       		.uleb128 0x18
 8893 0267 9742     		.uleb128 0x2117
 8894 0269 19       		.uleb128 0x19
 8895 026a 00       		.byte	0
 8896 026b 00       		.byte	0
 8897 026c 2D       		.uleb128 0x2d
 8898 026d 34       		.uleb128 0x34
 8899 026e 00       		.byte	0
 8900 026f 03       		.uleb128 0x3
 8901 0270 0E       		.uleb128 0xe
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 264


 8902 0271 3A       		.uleb128 0x3a
 8903 0272 0B       		.uleb128 0xb
 8904 0273 3B       		.uleb128 0x3b
 8905 0274 05       		.uleb128 0x5
 8906 0275 49       		.uleb128 0x49
 8907 0276 13       		.uleb128 0x13
 8908 0277 1C       		.uleb128 0x1c
 8909 0278 0B       		.uleb128 0xb
 8910 0279 00       		.byte	0
 8911 027a 00       		.byte	0
 8912 027b 2E       		.uleb128 0x2e
 8913 027c 2E       		.uleb128 0x2e
 8914 027d 00       		.byte	0
 8915 027e 3F       		.uleb128 0x3f
 8916 027f 19       		.uleb128 0x19
 8917 0280 03       		.uleb128 0x3
 8918 0281 0E       		.uleb128 0xe
 8919 0282 3A       		.uleb128 0x3a
 8920 0283 0B       		.uleb128 0xb
 8921 0284 3B       		.uleb128 0x3b
 8922 0285 05       		.uleb128 0x5
 8923 0286 27       		.uleb128 0x27
 8924 0287 19       		.uleb128 0x19
 8925 0288 49       		.uleb128 0x49
 8926 0289 13       		.uleb128 0x13
 8927 028a 11       		.uleb128 0x11
 8928 028b 01       		.uleb128 0x1
 8929 028c 12       		.uleb128 0x12
 8930 028d 06       		.uleb128 0x6
 8931 028e 40       		.uleb128 0x40
 8932 028f 18       		.uleb128 0x18
 8933 0290 9742     		.uleb128 0x2117
 8934 0292 19       		.uleb128 0x19
 8935 0293 00       		.byte	0
 8936 0294 00       		.byte	0
 8937 0295 2F       		.uleb128 0x2f
 8938 0296 0B       		.uleb128 0xb
 8939 0297 01       		.byte	0x1
 8940 0298 55       		.uleb128 0x55
 8941 0299 17       		.uleb128 0x17
 8942 029a 00       		.byte	0
 8943 029b 00       		.byte	0
 8944 029c 30       		.uleb128 0x30
 8945 029d 0B       		.uleb128 0xb
 8946 029e 01       		.byte	0x1
 8947 029f 55       		.uleb128 0x55
 8948 02a0 17       		.uleb128 0x17
 8949 02a1 01       		.uleb128 0x1
 8950 02a2 13       		.uleb128 0x13
 8951 02a3 00       		.byte	0
 8952 02a4 00       		.byte	0
 8953 02a5 31       		.uleb128 0x31
 8954 02a6 34       		.uleb128 0x34
 8955 02a7 00       		.byte	0
 8956 02a8 03       		.uleb128 0x3
 8957 02a9 0E       		.uleb128 0xe
 8958 02aa 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 265


 8959 02ab 0B       		.uleb128 0xb
 8960 02ac 3B       		.uleb128 0x3b
 8961 02ad 05       		.uleb128 0x5
 8962 02ae 49       		.uleb128 0x49
 8963 02af 13       		.uleb128 0x13
 8964 02b0 1C       		.uleb128 0x1c
 8965 02b1 0D       		.uleb128 0xd
 8966 02b2 00       		.byte	0
 8967 02b3 00       		.byte	0
 8968 02b4 32       		.uleb128 0x32
 8969 02b5 34       		.uleb128 0x34
 8970 02b6 00       		.byte	0
 8971 02b7 31       		.uleb128 0x31
 8972 02b8 13       		.uleb128 0x13
 8973 02b9 02       		.uleb128 0x2
 8974 02ba 18       		.uleb128 0x18
 8975 02bb 00       		.byte	0
 8976 02bc 00       		.byte	0
 8977 02bd 33       		.uleb128 0x33
 8978 02be 34       		.uleb128 0x34
 8979 02bf 00       		.byte	0
 8980 02c0 03       		.uleb128 0x3
 8981 02c1 0E       		.uleb128 0xe
 8982 02c2 3A       		.uleb128 0x3a
 8983 02c3 0B       		.uleb128 0xb
 8984 02c4 3B       		.uleb128 0x3b
 8985 02c5 05       		.uleb128 0x5
 8986 02c6 49       		.uleb128 0x49
 8987 02c7 13       		.uleb128 0x13
 8988 02c8 3F       		.uleb128 0x3f
 8989 02c9 19       		.uleb128 0x19
 8990 02ca 3C       		.uleb128 0x3c
 8991 02cb 19       		.uleb128 0x19
 8992 02cc 00       		.byte	0
 8993 02cd 00       		.byte	0
 8994 02ce 34       		.uleb128 0x34
 8995 02cf 34       		.uleb128 0x34
 8996 02d0 00       		.byte	0
 8997 02d1 03       		.uleb128 0x3
 8998 02d2 0E       		.uleb128 0xe
 8999 02d3 3A       		.uleb128 0x3a
 9000 02d4 0B       		.uleb128 0xb
 9001 02d5 3B       		.uleb128 0x3b
 9002 02d6 05       		.uleb128 0x5
 9003 02d7 49       		.uleb128 0x49
 9004 02d8 13       		.uleb128 0x13
 9005 02d9 3F       		.uleb128 0x3f
 9006 02da 19       		.uleb128 0x19
 9007 02db 02       		.uleb128 0x2
 9008 02dc 18       		.uleb128 0x18
 9009 02dd 00       		.byte	0
 9010 02de 00       		.byte	0
 9011 02df 35       		.uleb128 0x35
 9012 02e0 2E       		.uleb128 0x2e
 9013 02e1 00       		.byte	0
 9014 02e2 3F       		.uleb128 0x3f
 9015 02e3 19       		.uleb128 0x19
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 266


 9016 02e4 3C       		.uleb128 0x3c
 9017 02e5 19       		.uleb128 0x19
 9018 02e6 6E       		.uleb128 0x6e
 9019 02e7 0E       		.uleb128 0xe
 9020 02e8 03       		.uleb128 0x3
 9021 02e9 0E       		.uleb128 0xe
 9022 02ea 3A       		.uleb128 0x3a
 9023 02eb 0B       		.uleb128 0xb
 9024 02ec 3B       		.uleb128 0x3b
 9025 02ed 0B       		.uleb128 0xb
 9026 02ee 00       		.byte	0
 9027 02ef 00       		.byte	0
 9028 02f0 36       		.uleb128 0x36
 9029 02f1 2E       		.uleb128 0x2e
 9030 02f2 00       		.byte	0
 9031 02f3 3F       		.uleb128 0x3f
 9032 02f4 19       		.uleb128 0x19
 9033 02f5 3C       		.uleb128 0x3c
 9034 02f6 19       		.uleb128 0x19
 9035 02f7 6E       		.uleb128 0x6e
 9036 02f8 0E       		.uleb128 0xe
 9037 02f9 03       		.uleb128 0x3
 9038 02fa 0E       		.uleb128 0xe
 9039 02fb 3A       		.uleb128 0x3a
 9040 02fc 0B       		.uleb128 0xb
 9041 02fd 3B       		.uleb128 0x3b
 9042 02fe 05       		.uleb128 0x5
 9043 02ff 00       		.byte	0
 9044 0300 00       		.byte	0
 9045 0301 00       		.byte	0
 9046              		.section	.debug_loc,"",%progbits
 9047              	.Ldebug_loc0:
 9048              	.LLST0:
 9049 0000 00000000 		.4byte	.LVL0
 9050 0004 14000000 		.4byte	.LVL1
 9051 0008 0100     		.2byte	0x1
 9052 000a 50       		.byte	0x50
 9053 000b 14000000 		.4byte	.LVL1
 9054 000f 16000000 		.4byte	.LVL2
 9055 0013 0400     		.2byte	0x4
 9056 0015 F3       		.byte	0xf3
 9057 0016 01       		.uleb128 0x1
 9058 0017 50       		.byte	0x50
 9059 0018 9F       		.byte	0x9f
 9060 0019 16000000 		.4byte	.LVL2
 9061 001d 18000000 		.4byte	.LVL3
 9062 0021 0100     		.2byte	0x1
 9063 0023 50       		.byte	0x50
 9064 0024 18000000 		.4byte	.LVL3
 9065 0028 1A000000 		.4byte	.LVL4
 9066 002c 0400     		.2byte	0x4
 9067 002e F3       		.byte	0xf3
 9068 002f 01       		.uleb128 0x1
 9069 0030 50       		.byte	0x50
 9070 0031 9F       		.byte	0x9f
 9071 0032 1A000000 		.4byte	.LVL4
 9072 0036 1C000000 		.4byte	.LVL5
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 267


 9073 003a 0100     		.2byte	0x1
 9074 003c 50       		.byte	0x50
 9075 003d 1C000000 		.4byte	.LVL5
 9076 0041 1E000000 		.4byte	.LVL6
 9077 0045 0400     		.2byte	0x4
 9078 0047 F3       		.byte	0xf3
 9079 0048 01       		.uleb128 0x1
 9080 0049 50       		.byte	0x50
 9081 004a 9F       		.byte	0x9f
 9082 004b 1E000000 		.4byte	.LVL6
 9083 004f 20000000 		.4byte	.LVL7
 9084 0053 0100     		.2byte	0x1
 9085 0055 50       		.byte	0x50
 9086 0056 20000000 		.4byte	.LVL7
 9087 005a 2C000000 		.4byte	.LFE79
 9088 005e 0400     		.2byte	0x4
 9089 0060 F3       		.byte	0xf3
 9090 0061 01       		.uleb128 0x1
 9091 0062 50       		.byte	0x50
 9092 0063 9F       		.byte	0x9f
 9093 0064 00000000 		.4byte	0
 9094 0068 00000000 		.4byte	0
 9095              	.LLST1:
 9096 006c 00000000 		.4byte	.LVL0
 9097 0070 20000000 		.4byte	.LVL7
 9098 0074 0200     		.2byte	0x2
 9099 0076 30       		.byte	0x30
 9100 0077 9F       		.byte	0x9f
 9101 0078 20000000 		.4byte	.LVL7
 9102 007c 2C000000 		.4byte	.LFE79
 9103 0080 0100     		.2byte	0x1
 9104 0082 50       		.byte	0x50
 9105 0083 00000000 		.4byte	0
 9106 0087 00000000 		.4byte	0
 9107              	.LLST2:
 9108 008b 00000000 		.4byte	.LVL0
 9109 008f 14000000 		.4byte	.LVL1
 9110 0093 0100     		.2byte	0x1
 9111 0095 50       		.byte	0x50
 9112 0096 14000000 		.4byte	.LVL1
 9113 009a 16000000 		.4byte	.LVL2
 9114 009e 0400     		.2byte	0x4
 9115 00a0 F3       		.byte	0xf3
 9116 00a1 01       		.uleb128 0x1
 9117 00a2 50       		.byte	0x50
 9118 00a3 9F       		.byte	0x9f
 9119 00a4 16000000 		.4byte	.LVL2
 9120 00a8 18000000 		.4byte	.LVL3
 9121 00ac 0100     		.2byte	0x1
 9122 00ae 50       		.byte	0x50
 9123 00af 18000000 		.4byte	.LVL3
 9124 00b3 1A000000 		.4byte	.LVL4
 9125 00b7 0400     		.2byte	0x4
 9126 00b9 F3       		.byte	0xf3
 9127 00ba 01       		.uleb128 0x1
 9128 00bb 50       		.byte	0x50
 9129 00bc 9F       		.byte	0x9f
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 268


 9130 00bd 1A000000 		.4byte	.LVL4
 9131 00c1 1C000000 		.4byte	.LVL5
 9132 00c5 0100     		.2byte	0x1
 9133 00c7 50       		.byte	0x50
 9134 00c8 1C000000 		.4byte	.LVL5
 9135 00cc 1E000000 		.4byte	.LVL6
 9136 00d0 0400     		.2byte	0x4
 9137 00d2 F3       		.byte	0xf3
 9138 00d3 01       		.uleb128 0x1
 9139 00d4 50       		.byte	0x50
 9140 00d5 9F       		.byte	0x9f
 9141 00d6 1E000000 		.4byte	.LVL6
 9142 00da 20000000 		.4byte	.LVL7
 9143 00de 0100     		.2byte	0x1
 9144 00e0 50       		.byte	0x50
 9145 00e1 20000000 		.4byte	.LVL7
 9146 00e5 2C000000 		.4byte	.LFE79
 9147 00e9 0400     		.2byte	0x4
 9148 00eb F3       		.byte	0xf3
 9149 00ec 01       		.uleb128 0x1
 9150 00ed 50       		.byte	0x50
 9151 00ee 9F       		.byte	0x9f
 9152 00ef 00000000 		.4byte	0
 9153 00f3 00000000 		.4byte	0
 9154              	.LLST3:
 9155 00f7 00000000 		.4byte	.LVL8
 9156 00fb 06000000 		.4byte	.LVL10
 9157 00ff 0100     		.2byte	0x1
 9158 0101 50       		.byte	0x50
 9159 0102 06000000 		.4byte	.LVL10
 9160 0106 12000000 		.4byte	.LVL13
 9161 010a 0100     		.2byte	0x1
 9162 010c 50       		.byte	0x50
 9163 010d 00000000 		.4byte	0
 9164 0111 00000000 		.4byte	0
 9165              	.LLST4:
 9166 0115 00000000 		.4byte	.LVL8
 9167 0119 04000000 		.4byte	.LVL9
 9168 011d 0200     		.2byte	0x2
 9169 011f 30       		.byte	0x30
 9170 0120 9F       		.byte	0x9f
 9171 0121 04000000 		.4byte	.LVL9
 9172 0125 0E000000 		.4byte	.LVL12
 9173 0129 0100     		.2byte	0x1
 9174 012b 53       		.byte	0x53
 9175 012c 0E000000 		.4byte	.LVL12
 9176 0130 14000000 		.4byte	.LFE104
 9177 0134 0500     		.2byte	0x5
 9178 0136 73       		.byte	0x73
 9179 0137 00       		.sleb128 0
 9180 0138 32       		.byte	0x32
 9181 0139 25       		.byte	0x25
 9182 013a 9F       		.byte	0x9f
 9183 013b 00000000 		.4byte	0
 9184 013f 00000000 		.4byte	0
 9185              	.LLST5:
 9186 0143 1A000000 		.4byte	.LVL14
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 269


 9187 0147 1C000000 		.4byte	.LVL15
 9188 014b 0100     		.2byte	0x1
 9189 014d 52       		.byte	0x52
 9190 014e 00000000 		.4byte	0
 9191 0152 00000000 		.4byte	0
 9192              	.LLST6:
 9193 0156 00000000 		.4byte	.LVL16
 9194 015a 06000000 		.4byte	.LVL17
 9195 015e 0100     		.2byte	0x1
 9196 0160 50       		.byte	0x50
 9197 0161 06000000 		.4byte	.LVL17
 9198 0165 12000000 		.4byte	.LFE106
 9199 0169 0100     		.2byte	0x1
 9200 016b 54       		.byte	0x54
 9201 016c 00000000 		.4byte	0
 9202 0170 00000000 		.4byte	0
 9203              	.LLST7:
 9204 0174 00000000 		.4byte	.LVL20
 9205 0178 1A000000 		.4byte	.LVL23
 9206 017c 0100     		.2byte	0x1
 9207 017e 50       		.byte	0x50
 9208 017f 1A000000 		.4byte	.LVL23
 9209 0183 9C000000 		.4byte	.LFE69
 9210 0187 0100     		.2byte	0x1
 9211 0189 59       		.byte	0x59
 9212 018a 00000000 		.4byte	0
 9213 018e 00000000 		.4byte	0
 9214              	.LLST8:
 9215 0192 00000000 		.4byte	.LVL20
 9216 0196 18000000 		.4byte	.LVL22
 9217 019a 0100     		.2byte	0x1
 9218 019c 51       		.byte	0x51
 9219 019d 18000000 		.4byte	.LVL22
 9220 01a1 62000000 		.4byte	.LVL33
 9221 01a5 0100     		.2byte	0x1
 9222 01a7 55       		.byte	0x55
 9223 01a8 62000000 		.4byte	.LVL33
 9224 01ac 9C000000 		.4byte	.LFE69
 9225 01b0 0400     		.2byte	0x4
 9226 01b2 F3       		.byte	0xf3
 9227 01b3 01       		.uleb128 0x1
 9228 01b4 51       		.byte	0x51
 9229 01b5 9F       		.byte	0x9f
 9230 01b6 00000000 		.4byte	0
 9231 01ba 00000000 		.4byte	0
 9232              	.LLST9:
 9233 01be 00000000 		.4byte	.LVL20
 9234 01c2 16000000 		.4byte	.LVL21
 9235 01c6 0100     		.2byte	0x1
 9236 01c8 52       		.byte	0x52
 9237 01c9 16000000 		.4byte	.LVL21
 9238 01cd 2A000000 		.4byte	.LVL25
 9239 01d1 0100     		.2byte	0x1
 9240 01d3 57       		.byte	0x57
 9241 01d4 2A000000 		.4byte	.LVL25
 9242 01d8 32000000 		.4byte	.LVL27
 9243 01dc 0700     		.2byte	0x7
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 270


 9244 01de 72       		.byte	0x72
 9245 01df 81808080 		.sleb128 -1073741823
 9245      7C
 9246 01e4 9F       		.byte	0x9f
 9247 01e5 32000000 		.4byte	.LVL27
 9248 01e9 9C000000 		.4byte	.LFE69
 9249 01ed 0400     		.2byte	0x4
 9250 01ef F3       		.byte	0xf3
 9251 01f0 01       		.uleb128 0x1
 9252 01f1 52       		.byte	0x52
 9253 01f2 9F       		.byte	0x9f
 9254 01f3 00000000 		.4byte	0
 9255 01f7 00000000 		.4byte	0
 9256              	.LLST10:
 9257 01fb 00000000 		.4byte	.LVL20
 9258 01ff 1D000000 		.4byte	.LVL24-1
 9259 0203 0100     		.2byte	0x1
 9260 0205 53       		.byte	0x53
 9261 0206 1D000000 		.4byte	.LVL24-1
 9262 020a 9C000000 		.4byte	.LFE69
 9263 020e 0100     		.2byte	0x1
 9264 0210 5A       		.byte	0x5a
 9265 0211 00000000 		.4byte	0
 9266 0215 00000000 		.4byte	0
 9267              	.LLST11:
 9268 0219 00000000 		.4byte	.LVL20
 9269 021d 5C000000 		.4byte	.LVL32
 9270 0221 0200     		.2byte	0x2
 9271 0223 91       		.byte	0x91
 9272 0224 00       		.sleb128 0
 9273 0225 5C000000 		.4byte	.LVL32
 9274 0229 78000000 		.4byte	.LVL36
 9275 022d 0100     		.2byte	0x1
 9276 022f 56       		.byte	0x56
 9277 0230 00000000 		.4byte	0
 9278 0234 00000000 		.4byte	0
 9279              	.LLST12:
 9280 0238 32000000 		.4byte	.LVL27
 9281 023c 42000000 		.4byte	.LVL29
 9282 0240 0100     		.2byte	0x1
 9283 0242 53       		.byte	0x53
 9284 0243 44000000 		.4byte	.LVL30
 9285 0247 4A000000 		.4byte	.LVL31
 9286 024b 0100     		.2byte	0x1
 9287 024d 53       		.byte	0x53
 9288 024e 00000000 		.4byte	0
 9289 0252 00000000 		.4byte	0
 9290              	.LLST13:
 9291 0256 02000000 		.4byte	.LVL38
 9292 025a 06000000 		.4byte	.LVL39
 9293 025e 0200     		.2byte	0x2
 9294 0260 30       		.byte	0x30
 9295 0261 9F       		.byte	0x9f
 9296 0262 06000000 		.4byte	.LVL39
 9297 0266 1C000000 		.4byte	.LVL42
 9298 026a 0100     		.2byte	0x1
 9299 026c 54       		.byte	0x54
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 271


 9300 026d 00000000 		.4byte	0
 9301 0271 00000000 		.4byte	0
 9302              	.LLST14:
 9303 0275 00000000 		.4byte	.LVL48
 9304 0279 07000000 		.4byte	.LVL49-1
 9305 027d 0100     		.2byte	0x1
 9306 027f 50       		.byte	0x50
 9307 0280 07000000 		.4byte	.LVL49-1
 9308 0284 A2000000 		.4byte	.LVL53
 9309 0288 0100     		.2byte	0x1
 9310 028a 55       		.byte	0x55
 9311 028b A2000000 		.4byte	.LVL53
 9312 028f AC000000 		.4byte	.LFE70
 9313 0293 0400     		.2byte	0x4
 9314 0295 F3       		.byte	0xf3
 9315 0296 01       		.uleb128 0x1
 9316 0297 50       		.byte	0x50
 9317 0298 9F       		.byte	0x9f
 9318 0299 00000000 		.4byte	0
 9319 029d 00000000 		.4byte	0
 9320              	.LLST15:
 9321 02a1 10000000 		.4byte	.LVL55
 9322 02a5 34000000 		.4byte	.LVL58
 9323 02a9 0100     		.2byte	0x1
 9324 02ab 55       		.byte	0x55
 9325 02ac 00000000 		.4byte	0
 9326 02b0 00000000 		.4byte	0
 9327              	.LLST16:
 9328 02b4 00000000 		.4byte	.LVL59
 9329 02b8 02000000 		.4byte	.LVL60
 9330 02bc 0100     		.2byte	0x1
 9331 02be 50       		.byte	0x50
 9332 02bf 02000000 		.4byte	.LVL60
 9333 02c3 08000000 		.4byte	.LFE101
 9334 02c7 0400     		.2byte	0x4
 9335 02c9 F3       		.byte	0xf3
 9336 02ca 01       		.uleb128 0x1
 9337 02cb 50       		.byte	0x50
 9338 02cc 9F       		.byte	0x9f
 9339 02cd 00000000 		.4byte	0
 9340 02d1 00000000 		.4byte	0
 9341              	.LLST17:
 9342 02d5 00000000 		.4byte	.LVL62
 9343 02d9 10000000 		.4byte	.LVL64
 9344 02dd 0100     		.2byte	0x1
 9345 02df 50       		.byte	0x50
 9346 02e0 10000000 		.4byte	.LVL64
 9347 02e4 4A000000 		.4byte	.LVL68
 9348 02e8 0100     		.2byte	0x1
 9349 02ea 54       		.byte	0x54
 9350 02eb 4A000000 		.4byte	.LVL68
 9351 02ef 84000000 		.4byte	.LFE121
 9352 02f3 0400     		.2byte	0x4
 9353 02f5 F3       		.byte	0xf3
 9354 02f6 01       		.uleb128 0x1
 9355 02f7 50       		.byte	0x50
 9356 02f8 9F       		.byte	0x9f
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 272


 9357 02f9 00000000 		.4byte	0
 9358 02fd 00000000 		.4byte	0
 9359              	.LLST18:
 9360 0301 00000000 		.4byte	.LVL62
 9361 0305 15000000 		.4byte	.LVL65-1
 9362 0309 0100     		.2byte	0x1
 9363 030b 51       		.byte	0x51
 9364 030c 15000000 		.4byte	.LVL65-1
 9365 0310 80000000 		.4byte	.LVL73
 9366 0314 0100     		.2byte	0x1
 9367 0316 56       		.byte	0x56
 9368 0317 80000000 		.4byte	.LVL73
 9369 031b 84000000 		.4byte	.LFE121
 9370 031f 0400     		.2byte	0x4
 9371 0321 F3       		.byte	0xf3
 9372 0322 01       		.uleb128 0x1
 9373 0323 51       		.byte	0x51
 9374 0324 9F       		.byte	0x9f
 9375 0325 00000000 		.4byte	0
 9376 0329 00000000 		.4byte	0
 9377              	.LLST19:
 9378 032d 4A000000 		.4byte	.LVL68
 9379 0331 80000000 		.4byte	.LVL73
 9380 0335 0100     		.2byte	0x1
 9381 0337 54       		.byte	0x54
 9382 0338 00000000 		.4byte	0
 9383 033c 00000000 		.4byte	0
 9384              	.LLST20:
 9385 0340 0C000000 		.4byte	.LVL63
 9386 0344 6A000000 		.4byte	.LVL71
 9387 0348 0100     		.2byte	0x1
 9388 034a 55       		.byte	0x55
 9389 034b 00000000 		.4byte	0
 9390 034f 00000000 		.4byte	0
 9391              	.LLST21:
 9392 0353 00000000 		.4byte	.LVL74
 9393 0357 10000000 		.4byte	.LVL75
 9394 035b 0100     		.2byte	0x1
 9395 035d 50       		.byte	0x50
 9396 035e 10000000 		.4byte	.LVL75
 9397 0362 62000000 		.4byte	.LFE68
 9398 0366 0100     		.2byte	0x1
 9399 0368 56       		.byte	0x56
 9400 0369 00000000 		.4byte	0
 9401 036d 00000000 		.4byte	0
 9402              	.LLST22:
 9403 0371 00000000 		.4byte	.LVL74
 9404 0375 13000000 		.4byte	.LVL76-1
 9405 0379 0100     		.2byte	0x1
 9406 037b 51       		.byte	0x51
 9407 037c 13000000 		.4byte	.LVL76-1
 9408 0380 62000000 		.4byte	.LFE68
 9409 0384 0100     		.2byte	0x1
 9410 0386 57       		.byte	0x57
 9411 0387 00000000 		.4byte	0
 9412 038b 00000000 		.4byte	0
 9413              	.LLST23:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 273


 9414 038f 00000000 		.4byte	.LVL74
 9415 0393 13000000 		.4byte	.LVL76-1
 9416 0397 0100     		.2byte	0x1
 9417 0399 52       		.byte	0x52
 9418 039a 13000000 		.4byte	.LVL76-1
 9419 039e 62000000 		.4byte	.LFE68
 9420 03a2 0400     		.2byte	0x4
 9421 03a4 F3       		.byte	0xf3
 9422 03a5 01       		.uleb128 0x1
 9423 03a6 52       		.byte	0x52
 9424 03a7 9F       		.byte	0x9f
 9425 03a8 00000000 		.4byte	0
 9426 03ac 00000000 		.4byte	0
 9427              	.LLST24:
 9428 03b0 00000000 		.4byte	.LVL74
 9429 03b4 13000000 		.4byte	.LVL76-1
 9430 03b8 0100     		.2byte	0x1
 9431 03ba 53       		.byte	0x53
 9432 03bb 13000000 		.4byte	.LVL76-1
 9433 03bf 62000000 		.4byte	.LFE68
 9434 03c3 0100     		.2byte	0x1
 9435 03c5 58       		.byte	0x58
 9436 03c6 00000000 		.4byte	0
 9437 03ca 00000000 		.4byte	0
 9438              	.LLST25:
 9439 03ce 1E000000 		.4byte	.LVL78
 9440 03d2 2A000000 		.4byte	.LVL79
 9441 03d6 0100     		.2byte	0x1
 9442 03d8 50       		.byte	0x50
 9443 03d9 2A000000 		.4byte	.LVL79
 9444 03dd 30000000 		.4byte	.LVL81
 9445 03e1 0100     		.2byte	0x1
 9446 03e3 54       		.byte	0x54
 9447 03e4 32000000 		.4byte	.LVL82
 9448 03e8 62000000 		.4byte	.LFE68
 9449 03ec 0100     		.2byte	0x1
 9450 03ee 54       		.byte	0x54
 9451 03ef 00000000 		.4byte	0
 9452 03f3 00000000 		.4byte	0
 9453              	.LLST26:
 9454 03f7 54000000 		.4byte	.LVL84
 9455 03fb 58000000 		.4byte	.LVL85
 9456 03ff 0200     		.2byte	0x2
 9457 0401 31       		.byte	0x31
 9458 0402 9F       		.byte	0x9f
 9459 0403 5C000000 		.4byte	.LVL86
 9460 0407 62000000 		.4byte	.LFE68
 9461 040b 0100     		.2byte	0x1
 9462 040d 50       		.byte	0x50
 9463 040e 00000000 		.4byte	0
 9464 0412 00000000 		.4byte	0
 9465              	.LLST27:
 9466 0416 14000000 		.4byte	.LVL76
 9467 041a 1A000000 		.4byte	.LVL77
 9468 041e 0100     		.2byte	0x1
 9469 0420 50       		.byte	0x50
 9470 0421 1A000000 		.4byte	.LVL77
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 274


 9471 0425 30000000 		.4byte	.LVL81
 9472 0429 0100     		.2byte	0x1
 9473 042b 59       		.byte	0x59
 9474 042c 30000000 		.4byte	.LVL81
 9475 0430 32000000 		.4byte	.LVL82
 9476 0434 0100     		.2byte	0x1
 9477 0436 50       		.byte	0x50
 9478 0437 00000000 		.4byte	0
 9479 043b 00000000 		.4byte	0
 9480              	.LLST28:
 9481 043f 00000000 		.4byte	.LVL87
 9482 0443 07000000 		.4byte	.LVL88-1
 9483 0447 0100     		.2byte	0x1
 9484 0449 50       		.byte	0x50
 9485 044a 07000000 		.4byte	.LVL88-1
 9486 044e 10000000 		.4byte	.LVL89
 9487 0452 0100     		.2byte	0x1
 9488 0454 54       		.byte	0x54
 9489 0455 00000000 		.4byte	0
 9490 0459 00000000 		.4byte	0
 9491              	.LLST29:
 9492 045d 10000000 		.4byte	.LVL89
 9493 0461 B2000000 		.4byte	.LVL96
 9494 0465 0100     		.2byte	0x1
 9495 0467 54       		.byte	0x54
 9496 0468 00000000 		.4byte	0
 9497 046c 00000000 		.4byte	0
 9498              	.LLST30:
 9499 0470 00000000 		.4byte	.LVL97
 9500 0474 11000000 		.4byte	.LVL99-1
 9501 0478 0100     		.2byte	0x1
 9502 047a 50       		.byte	0x50
 9503 047b 11000000 		.4byte	.LVL99-1
 9504 047f 4C000000 		.4byte	.LVL105
 9505 0483 0100     		.2byte	0x1
 9506 0485 54       		.byte	0x54
 9507 0486 4C000000 		.4byte	.LVL105
 9508 048a 4E000000 		.4byte	.LVL106
 9509 048e 0100     		.2byte	0x1
 9510 0490 50       		.byte	0x50
 9511 0491 4E000000 		.4byte	.LVL106
 9512 0495 50000000 		.4byte	.LVL107
 9513 0499 0400     		.2byte	0x4
 9514 049b F3       		.byte	0xf3
 9515 049c 01       		.uleb128 0x1
 9516 049d 50       		.byte	0x50
 9517 049e 9F       		.byte	0x9f
 9518 049f 50000000 		.4byte	.LVL107
 9519 04a3 68000000 		.4byte	.LVL114
 9520 04a7 0100     		.2byte	0x1
 9521 04a9 54       		.byte	0x54
 9522 04aa 68000000 		.4byte	.LVL114
 9523 04ae 70000000 		.4byte	.LFE74
 9524 04b2 0400     		.2byte	0x4
 9525 04b4 F3       		.byte	0xf3
 9526 04b5 01       		.uleb128 0x1
 9527 04b6 50       		.byte	0x50
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 275


 9528 04b7 9F       		.byte	0x9f
 9529 04b8 00000000 		.4byte	0
 9530 04bc 00000000 		.4byte	0
 9531              	.LLST31:
 9532 04c0 14000000 		.4byte	.LVL100
 9533 04c4 4C000000 		.4byte	.LVL105
 9534 04c8 0100     		.2byte	0x1
 9535 04ca 55       		.byte	0x55
 9536 04cb 50000000 		.4byte	.LVL107
 9537 04cf 68000000 		.4byte	.LVL114
 9538 04d3 0100     		.2byte	0x1
 9539 04d5 55       		.byte	0x55
 9540 04d6 00000000 		.4byte	0
 9541 04da 00000000 		.4byte	0
 9542              	.LLST32:
 9543 04de 18000000 		.4byte	.LVL101
 9544 04e2 4C000000 		.4byte	.LVL105
 9545 04e6 0100     		.2byte	0x1
 9546 04e8 56       		.byte	0x56
 9547 04e9 50000000 		.4byte	.LVL107
 9548 04ed 68000000 		.4byte	.LVL114
 9549 04f1 0100     		.2byte	0x1
 9550 04f3 56       		.byte	0x56
 9551 04f4 00000000 		.4byte	0
 9552 04f8 00000000 		.4byte	0
 9553              	.LLST33:
 9554 04fc 1C000000 		.4byte	.LVL102
 9555 0500 4C000000 		.4byte	.LVL105
 9556 0504 0100     		.2byte	0x1
 9557 0506 57       		.byte	0x57
 9558 0507 50000000 		.4byte	.LVL107
 9559 050b 68000000 		.4byte	.LVL114
 9560 050f 0100     		.2byte	0x1
 9561 0511 57       		.byte	0x57
 9562 0512 00000000 		.4byte	0
 9563 0516 00000000 		.4byte	0
 9564              	.LLST34:
 9565 051a 02000000 		.4byte	.LVL98
 9566 051e 11000000 		.4byte	.LVL99-1
 9567 0522 0100     		.2byte	0x1
 9568 0524 50       		.byte	0x50
 9569 0525 11000000 		.4byte	.LVL99-1
 9570 0529 4C000000 		.4byte	.LVL105
 9571 052d 0100     		.2byte	0x1
 9572 052f 54       		.byte	0x54
 9573 0530 4C000000 		.4byte	.LVL105
 9574 0534 4E000000 		.4byte	.LVL106
 9575 0538 0100     		.2byte	0x1
 9576 053a 50       		.byte	0x50
 9577 053b 4E000000 		.4byte	.LVL106
 9578 053f 50000000 		.4byte	.LVL107
 9579 0543 0400     		.2byte	0x4
 9580 0545 F3       		.byte	0xf3
 9581 0546 01       		.uleb128 0x1
 9582 0547 50       		.byte	0x50
 9583 0548 9F       		.byte	0x9f
 9584 0549 50000000 		.4byte	.LVL107
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 276


 9585 054d 68000000 		.4byte	.LVL114
 9586 0551 0100     		.2byte	0x1
 9587 0553 54       		.byte	0x54
 9588 0554 68000000 		.4byte	.LVL114
 9589 0558 70000000 		.4byte	.LFE74
 9590 055c 0400     		.2byte	0x4
 9591 055e F3       		.byte	0xf3
 9592 055f 01       		.uleb128 0x1
 9593 0560 50       		.byte	0x50
 9594 0561 9F       		.byte	0x9f
 9595 0562 00000000 		.4byte	0
 9596 0566 00000000 		.4byte	0
 9597              	.LLST35:
 9598 056a 00000000 		.4byte	.LVL115
 9599 056e 07000000 		.4byte	.LVL116-1
 9600 0572 0100     		.2byte	0x1
 9601 0574 50       		.byte	0x50
 9602 0575 07000000 		.4byte	.LVL116-1
 9603 0579 10000000 		.4byte	.LVL117
 9604 057d 0100     		.2byte	0x1
 9605 057f 54       		.byte	0x54
 9606 0580 10000000 		.4byte	.LVL117
 9607 0584 20000000 		.4byte	.LFE75
 9608 0588 0400     		.2byte	0x4
 9609 058a F3       		.byte	0xf3
 9610 058b 01       		.uleb128 0x1
 9611 058c 50       		.byte	0x50
 9612 058d 9F       		.byte	0x9f
 9613 058e 00000000 		.4byte	0
 9614 0592 00000000 		.4byte	0
 9615              	.LLST36:
 9616 0596 10000000 		.4byte	.LVL117
 9617 059a 12000000 		.4byte	.LVL118
 9618 059e 0100     		.2byte	0x1
 9619 05a0 54       		.byte	0x54
 9620 05a1 00000000 		.4byte	0
 9621 05a5 00000000 		.4byte	0
 9622              	.LLST37:
 9623 05a9 12000000 		.4byte	.LVL118
 9624 05ad 1A000000 		.4byte	.LVL120
 9625 05b1 0100     		.2byte	0x1
 9626 05b3 54       		.byte	0x54
 9627 05b4 1A000000 		.4byte	.LVL120
 9628 05b8 20000000 		.4byte	.LFE75
 9629 05bc 0100     		.2byte	0x1
 9630 05be 50       		.byte	0x50
 9631 05bf 00000000 		.4byte	0
 9632 05c3 00000000 		.4byte	0
 9633              	.LLST38:
 9634 05c7 00000000 		.4byte	.LVL121
 9635 05cb 1C000000 		.4byte	.LVL122
 9636 05cf 0100     		.2byte	0x1
 9637 05d1 50       		.byte	0x50
 9638 05d2 1C000000 		.4byte	.LVL122
 9639 05d6 28000000 		.4byte	.LFE76
 9640 05da 0400     		.2byte	0x4
 9641 05dc F3       		.byte	0xf3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 277


 9642 05dd 01       		.uleb128 0x1
 9643 05de 50       		.byte	0x50
 9644 05df 9F       		.byte	0x9f
 9645 05e0 00000000 		.4byte	0
 9646 05e4 00000000 		.4byte	0
 9647              	.LLST39:
 9648 05e8 1C000000 		.4byte	.LVL122
 9649 05ec 1E000000 		.4byte	.LVL123
 9650 05f0 0100     		.2byte	0x1
 9651 05f2 50       		.byte	0x50
 9652 05f3 00000000 		.4byte	0
 9653 05f7 00000000 		.4byte	0
 9654              	.LLST40:
 9655 05fb 1E000000 		.4byte	.LVL123
 9656 05ff 22000000 		.4byte	.LVL124
 9657 0603 0100     		.2byte	0x1
 9658 0605 53       		.byte	0x53
 9659 0606 00000000 		.4byte	0
 9660 060a 00000000 		.4byte	0
 9661              	.LLST41:
 9662 060e 00000000 		.4byte	.LVL125
 9663 0612 0F000000 		.4byte	.LVL128-1
 9664 0616 0100     		.2byte	0x1
 9665 0618 50       		.byte	0x50
 9666 0619 0F000000 		.4byte	.LVL128-1
 9667 061d 18000000 		.4byte	.LVL129
 9668 0621 0100     		.2byte	0x1
 9669 0623 54       		.byte	0x54
 9670 0624 00000000 		.4byte	0
 9671 0628 00000000 		.4byte	0
 9672              	.LLST42:
 9673 062c 00000000 		.4byte	.LVL125
 9674 0630 0C000000 		.4byte	.LVL127
 9675 0634 0100     		.2byte	0x1
 9676 0636 51       		.byte	0x51
 9677 0637 0C000000 		.4byte	.LVL127
 9678 063b 66000000 		.4byte	.LVL134
 9679 063f 0100     		.2byte	0x1
 9680 0641 55       		.byte	0x55
 9681 0642 66000000 		.4byte	.LVL134
 9682 0646 7F000000 		.4byte	.LVL135-1
 9683 064a 0300     		.2byte	0x3
 9684 064c 74       		.byte	0x74
 9685 064d C000     		.sleb128 64
 9686 064f 00000000 		.4byte	0
 9687 0653 00000000 		.4byte	0
 9688              	.LLST43:
 9689 0657 18000000 		.4byte	.LVL129
 9690 065b D2000000 		.4byte	.LVL140
 9691 065f 0100     		.2byte	0x1
 9692 0661 54       		.byte	0x54
 9693 0662 00000000 		.4byte	0
 9694 0666 00000000 		.4byte	0
 9695              	.LLST44:
 9696 066a 1A000000 		.4byte	.LVL130
 9697 066e 5E000000 		.4byte	.LVL133
 9698 0672 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 278


 9699 0674 53       		.byte	0x53
 9700 0675 00000000 		.4byte	0
 9701 0679 00000000 		.4byte	0
 9702              	.LLST45:
 9703 067d 54000000 		.4byte	.LVL132
 9704 0681 88000000 		.4byte	.LVL136
 9705 0685 0100     		.2byte	0x1
 9706 0687 56       		.byte	0x56
 9707 0688 00000000 		.4byte	0
 9708 068c 00000000 		.4byte	0
 9709              	.LLST46:
 9710 0690 06000000 		.4byte	.LVL126
 9711 0694 52000000 		.4byte	.LVL131
 9712 0698 0200     		.2byte	0x2
 9713 069a 30       		.byte	0x30
 9714 069b 9F       		.byte	0x9f
 9715 069c 52000000 		.4byte	.LVL131
 9716 06a0 CC000000 		.4byte	.LVL138
 9717 06a4 0100     		.2byte	0x1
 9718 06a6 57       		.byte	0x57
 9719 06a7 00000000 		.4byte	0
 9720 06ab 00000000 		.4byte	0
 9721              	.LLST47:
 9722 06af 00000000 		.4byte	.LVL141
 9723 06b3 13000000 		.4byte	.LVL142-1
 9724 06b7 0100     		.2byte	0x1
 9725 06b9 50       		.byte	0x50
 9726 06ba 13000000 		.4byte	.LVL142-1
 9727 06be 6C000000 		.4byte	.LVL147
 9728 06c2 0100     		.2byte	0x1
 9729 06c4 54       		.byte	0x54
 9730 06c5 6C000000 		.4byte	.LVL147
 9731 06c9 78000000 		.4byte	.LFE80
 9732 06cd 0100     		.2byte	0x1
 9733 06cf 50       		.byte	0x50
 9734 06d0 00000000 		.4byte	0
 9735 06d4 00000000 		.4byte	0
 9736              	.LLST49:
 9737 06d8 00000000 		.4byte	.LVL148
 9738 06dc 1B000000 		.4byte	.LVL150-1
 9739 06e0 0100     		.2byte	0x1
 9740 06e2 50       		.byte	0x50
 9741 06e3 1B000000 		.4byte	.LVL150-1
 9742 06e7 80000000 		.4byte	.LVL158
 9743 06eb 0100     		.2byte	0x1
 9744 06ed 54       		.byte	0x54
 9745 06ee 80000000 		.4byte	.LVL158
 9746 06f2 88000000 		.4byte	.LFE81
 9747 06f6 0400     		.2byte	0x4
 9748 06f8 F3       		.byte	0xf3
 9749 06f9 01       		.uleb128 0x1
 9750 06fa 50       		.byte	0x50
 9751 06fb 9F       		.byte	0x9f
 9752 06fc 00000000 		.4byte	0
 9753 0700 00000000 		.4byte	0
 9754              	.LLST50:
 9755 0704 04000000 		.4byte	.LVL149
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 279


 9756 0708 3A000000 		.4byte	.LVL151
 9757 070c 0200     		.2byte	0x2
 9758 070e 30       		.byte	0x30
 9759 070f 9F       		.byte	0x9f
 9760 0710 3A000000 		.4byte	.LVL151
 9761 0714 68000000 		.4byte	.LVL154
 9762 0718 0100     		.2byte	0x1
 9763 071a 56       		.byte	0x56
 9764 071b 68000000 		.4byte	.LVL154
 9765 071f 78000000 		.4byte	.LVL156
 9766 0723 0200     		.2byte	0x2
 9767 0725 30       		.byte	0x30
 9768 0726 9F       		.byte	0x9f
 9769 0727 78000000 		.4byte	.LVL156
 9770 072b 80000000 		.4byte	.LVL158
 9771 072f 0100     		.2byte	0x1
 9772 0731 56       		.byte	0x56
 9773 0732 80000000 		.4byte	.LVL158
 9774 0736 88000000 		.4byte	.LFE81
 9775 073a 0100     		.2byte	0x1
 9776 073c 50       		.byte	0x50
 9777 073d 00000000 		.4byte	0
 9778 0741 00000000 		.4byte	0
 9779              	.LLST51:
 9780 0745 04000000 		.4byte	.LVL149
 9781 0749 1B000000 		.4byte	.LVL150-1
 9782 074d 0100     		.2byte	0x1
 9783 074f 50       		.byte	0x50
 9784 0750 1B000000 		.4byte	.LVL150-1
 9785 0754 80000000 		.4byte	.LVL158
 9786 0758 0100     		.2byte	0x1
 9787 075a 54       		.byte	0x54
 9788 075b 80000000 		.4byte	.LVL158
 9789 075f 88000000 		.4byte	.LFE81
 9790 0763 0400     		.2byte	0x4
 9791 0765 F3       		.byte	0xf3
 9792 0766 01       		.uleb128 0x1
 9793 0767 50       		.byte	0x50
 9794 0768 9F       		.byte	0x9f
 9795 0769 00000000 		.4byte	0
 9796 076d 00000000 		.4byte	0
 9797              	.LLST52:
 9798 0771 78000000 		.4byte	.LVL156
 9799 0775 7C000000 		.4byte	.LVL157
 9800 0779 0100     		.2byte	0x1
 9801 077b 55       		.byte	0x55
 9802 077c 00000000 		.4byte	0
 9803 0780 00000000 		.4byte	0
 9804              	.LLST53:
 9805 0784 16000000 		.4byte	.LVL159
 9806 0788 41000000 		.4byte	.LVL160-1
 9807 078c 0100     		.2byte	0x1
 9808 078e 50       		.byte	0x50
 9809 078f 00000000 		.4byte	0
 9810 0793 00000000 		.4byte	0
 9811              	.LLST54:
 9812 0797 00000000 		.4byte	.LVL165
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 280


 9813 079b 0A000000 		.4byte	.LVL166
 9814 079f 0100     		.2byte	0x1
 9815 07a1 50       		.byte	0x50
 9816 07a2 00000000 		.4byte	0
 9817 07a6 00000000 		.4byte	0
 9818              	.LLST55:
 9819 07aa 44000000 		.4byte	.LVL173
 9820 07ae 4A000000 		.4byte	.LVL175
 9821 07b2 0100     		.2byte	0x1
 9822 07b4 54       		.byte	0x54
 9823 07b5 68000000 		.4byte	.LVL177
 9824 07b9 BC000000 		.4byte	.LVL182
 9825 07bd 0100     		.2byte	0x1
 9826 07bf 54       		.byte	0x54
 9827 07c0 00000000 		.4byte	0
 9828 07c4 00000000 		.4byte	0
 9829              	.LLST56:
 9830 07c8 6A000000 		.4byte	.LVL178
 9831 07cc 7B000000 		.4byte	.LVL179-1
 9832 07d0 0100     		.2byte	0x1
 9833 07d2 53       		.byte	0x53
 9834 07d3 00000000 		.4byte	0
 9835 07d7 00000000 		.4byte	0
 9836              	.LLST57:
 9837 07db 04000000 		.4byte	.LVL167
 9838 07df 44000000 		.4byte	.LVL173
 9839 07e3 0200     		.2byte	0x2
 9840 07e5 30       		.byte	0x30
 9841 07e6 9F       		.byte	0x9f
 9842 07e7 44000000 		.4byte	.LVL173
 9843 07eb 48000000 		.4byte	.LVL174
 9844 07ef 0100     		.2byte	0x1
 9845 07f1 58       		.byte	0x58
 9846 07f2 4A000000 		.4byte	.LVL175
 9847 07f6 4E000000 		.4byte	.LVL176
 9848 07fa 0200     		.2byte	0x2
 9849 07fc 30       		.byte	0x30
 9850 07fd 9F       		.byte	0x9f
 9851 07fe 4E000000 		.4byte	.LVL176
 9852 0802 E0000000 		.4byte	.LVL184
 9853 0806 0100     		.2byte	0x1
 9854 0808 58       		.byte	0x58
 9855 0809 E0000000 		.4byte	.LVL184
 9856 080d F2000000 		.4byte	.LVL185
 9857 0811 0200     		.2byte	0x2
 9858 0813 30       		.byte	0x30
 9859 0814 9F       		.byte	0x9f
 9860 0815 F2000000 		.4byte	.LVL185
 9861 0819 FC000000 		.4byte	.LVL187
 9862 081d 0100     		.2byte	0x1
 9863 081f 58       		.byte	0x58
 9864 0820 FC000000 		.4byte	.LVL187
 9865 0824 00010000 		.4byte	.LFE91
 9866 0828 0100     		.2byte	0x1
 9867 082a 50       		.byte	0x50
 9868 082b 00000000 		.4byte	0
 9869 082f 00000000 		.4byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 281


 9870              	.LLST58:
 9871 0833 16000000 		.4byte	.LVL168
 9872 0837 E0000000 		.4byte	.LVL184
 9873 083b 0100     		.2byte	0x1
 9874 083d 57       		.byte	0x57
 9875 083e F2000000 		.4byte	.LVL185
 9876 0842 F6000000 		.4byte	.LVL186
 9877 0846 0100     		.2byte	0x1
 9878 0848 57       		.byte	0x57
 9879 0849 00000000 		.4byte	0
 9880 084d 00000000 		.4byte	0
 9881              	.LLST59:
 9882 0851 1E000000 		.4byte	.LVL169
 9883 0855 2C000000 		.4byte	.LVL170
 9884 0859 0100     		.2byte	0x1
 9885 085b 52       		.byte	0x52
 9886 085c 2C000000 		.4byte	.LVL170
 9887 0860 32000000 		.4byte	.LVL171
 9888 0864 0500     		.2byte	0x5
 9889 0866 03       		.byte	0x3
 9890 0867 D0000000 		.4byte	pxOverflowDelayedTaskList
 9891 086b 00000000 		.4byte	0
 9892 086f 00000000 		.4byte	0
 9893              	.LLST60:
 9894 0873 02000000 		.4byte	.LVL188
 9895 0877 26000000 		.4byte	.LVL190
 9896 087b 0200     		.2byte	0x2
 9897 087d 30       		.byte	0x30
 9898 087e 9F       		.byte	0x9f
 9899 087f 26000000 		.4byte	.LVL190
 9900 0883 74000000 		.4byte	.LVL195
 9901 0887 0100     		.2byte	0x1
 9902 0889 55       		.byte	0x55
 9903 088a 74000000 		.4byte	.LVL195
 9904 088e 76000000 		.4byte	.LVL196
 9905 0892 0200     		.2byte	0x2
 9906 0894 30       		.byte	0x30
 9907 0895 9F       		.byte	0x9f
 9908 0896 76000000 		.4byte	.LVL196
 9909 089a C2000000 		.4byte	.LVL204
 9910 089e 0100     		.2byte	0x1
 9911 08a0 55       		.byte	0x55
 9912 08a1 C2000000 		.4byte	.LVL204
 9913 08a5 C6000000 		.4byte	.LVL205
 9914 08a9 0200     		.2byte	0x2
 9915 08ab 30       		.byte	0x30
 9916 08ac 9F       		.byte	0x9f
 9917 08ad C6000000 		.4byte	.LVL205
 9918 08b1 C8000000 		.4byte	.LVL206
 9919 08b5 0100     		.2byte	0x1
 9920 08b7 55       		.byte	0x55
 9921 08b8 00000000 		.4byte	0
 9922 08bc 00000000 		.4byte	0
 9923              	.LLST61:
 9924 08c0 02000000 		.4byte	.LVL188
 9925 08c4 AE000000 		.4byte	.LVL202
 9926 08c8 0200     		.2byte	0x2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 282


 9927 08ca 30       		.byte	0x30
 9928 08cb 9F       		.byte	0x9f
 9929 08cc AE000000 		.4byte	.LVL202
 9930 08d0 C2000000 		.4byte	.LVL204
 9931 08d4 0200     		.2byte	0x2
 9932 08d6 31       		.byte	0x31
 9933 08d7 9F       		.byte	0x9f
 9934 08d8 C2000000 		.4byte	.LVL204
 9935 08dc C8000000 		.4byte	.LVL206
 9936 08e0 0200     		.2byte	0x2
 9937 08e2 30       		.byte	0x30
 9938 08e3 9F       		.byte	0x9f
 9939 08e4 C8000000 		.4byte	.LVL206
 9940 08e8 D0000000 		.4byte	.LVL208
 9941 08ec 0100     		.2byte	0x1
 9942 08ee 54       		.byte	0x54
 9943 08ef D0000000 		.4byte	.LVL208
 9944 08f3 D8000000 		.4byte	.LFE85
 9945 08f7 0100     		.2byte	0x1
 9946 08f9 50       		.byte	0x50
 9947 08fa 00000000 		.4byte	0
 9948 08fe 00000000 		.4byte	0
 9949              	.LLST62:
 9950 0902 8A000000 		.4byte	.LVL198
 9951 0906 9A000000 		.4byte	.LVL200
 9952 090a 0100     		.2byte	0x1
 9953 090c 54       		.byte	0x54
 9954 090d 9A000000 		.4byte	.LVL200
 9955 0911 9C000000 		.4byte	.LVL201
 9956 0915 0300     		.2byte	0x3
 9957 0917 74       		.byte	0x74
 9958 0918 7F       		.sleb128 -1
 9959 0919 9F       		.byte	0x9f
 9960 091a 9C000000 		.4byte	.LVL201
 9961 091e C0000000 		.4byte	.LVL203
 9962 0922 0100     		.2byte	0x1
 9963 0924 54       		.byte	0x54
 9964 0925 C6000000 		.4byte	.LVL205
 9965 0929 C8000000 		.4byte	.LVL206
 9966 092d 0100     		.2byte	0x1
 9967 092f 54       		.byte	0x54
 9968 0930 00000000 		.4byte	0
 9969 0934 00000000 		.4byte	0
 9970              	.LLST63:
 9971 0938 00000000 		.4byte	.LVL209
 9972 093c 09000000 		.4byte	.LVL211-1
 9973 0940 0100     		.2byte	0x1
 9974 0942 50       		.byte	0x50
 9975 0943 09000000 		.4byte	.LVL211-1
 9976 0947 62000000 		.4byte	.LVL218
 9977 094b 0100     		.2byte	0x1
 9978 094d 55       		.byte	0x55
 9979 094e 62000000 		.4byte	.LVL218
 9980 0952 6C000000 		.4byte	.LFE72
 9981 0956 0400     		.2byte	0x4
 9982 0958 F3       		.byte	0xf3
 9983 0959 01       		.uleb128 0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 283


 9984 095a 50       		.byte	0x50
 9985 095b 9F       		.byte	0x9f
 9986 095c 00000000 		.4byte	0
 9987 0960 00000000 		.4byte	0
 9988              	.LLST64:
 9989 0964 00000000 		.4byte	.LVL209
 9990 0968 09000000 		.4byte	.LVL211-1
 9991 096c 0100     		.2byte	0x1
 9992 096e 51       		.byte	0x51
 9993 096f 09000000 		.4byte	.LVL211-1
 9994 0973 62000000 		.4byte	.LVL218
 9995 0977 0100     		.2byte	0x1
 9996 0979 54       		.byte	0x54
 9997 097a 62000000 		.4byte	.LVL218
 9998 097e 6C000000 		.4byte	.LFE72
 9999 0982 0400     		.2byte	0x4
 10000 0984 F3       		.byte	0xf3
 10001 0985 01       		.uleb128 0x1
 10002 0986 51       		.byte	0x51
 10003 0987 9F       		.byte	0x9f
 10004 0988 00000000 		.4byte	0
 10005 098c 00000000 		.4byte	0
 10006              	.LLST65:
 10007 0990 14000000 		.4byte	.LVL213
 10008 0994 49000000 		.4byte	.LVL216-1
 10009 0998 0100     		.2byte	0x1
 10010 099a 53       		.byte	0x53
 10011 099b 00000000 		.4byte	0
 10012 099f 00000000 		.4byte	0
 10013              	.LLST66:
 10014 09a3 06000000 		.4byte	.LVL210
 10015 09a7 3E000000 		.4byte	.LVL214
 10016 09ab 0200     		.2byte	0x2
 10017 09ad 30       		.byte	0x30
 10018 09ae 9F       		.byte	0x9f
 10019 09af 3E000000 		.4byte	.LVL214
 10020 09b3 49000000 		.4byte	.LVL216-1
 10021 09b7 0100     		.2byte	0x1
 10022 09b9 52       		.byte	0x52
 10023 09ba 00000000 		.4byte	0
 10024 09be 00000000 		.4byte	0
 10025              	.LLST67:
 10026 09c2 10000000 		.4byte	.LVL212
 10027 09c6 46000000 		.4byte	.LVL215
 10028 09ca 0100     		.2byte	0x1
 10029 09cc 50       		.byte	0x50
 10030 09cd 00000000 		.4byte	0
 10031 09d1 00000000 		.4byte	0
 10032              	.LLST68:
 10033 09d5 00000000 		.4byte	.LVL219
 10034 09d9 09000000 		.4byte	.LVL221-1
 10035 09dd 0100     		.2byte	0x1
 10036 09df 50       		.byte	0x50
 10037 09e0 09000000 		.4byte	.LVL221-1
 10038 09e4 18000000 		.4byte	.LVL224
 10039 09e8 0100     		.2byte	0x1
 10040 09ea 54       		.byte	0x54
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 284


 10041 09eb 18000000 		.4byte	.LVL224
 10042 09ef 1A000000 		.4byte	.LVL225
 10043 09f3 0100     		.2byte	0x1
 10044 09f5 50       		.byte	0x50
 10045 09f6 1A000000 		.4byte	.LVL225
 10046 09fa 34000000 		.4byte	.LFE73
 10047 09fe 0400     		.2byte	0x4
 10048 0a00 F3       		.byte	0xf3
 10049 0a01 01       		.uleb128 0x1
 10050 0a02 50       		.byte	0x50
 10051 0a03 9F       		.byte	0x9f
 10052 0a04 00000000 		.4byte	0
 10053 0a08 00000000 		.4byte	0
 10054              	.LLST69:
 10055 0a0c 02000000 		.4byte	.LVL220
 10056 0a10 16000000 		.4byte	.LVL223
 10057 0a14 0200     		.2byte	0x2
 10058 0a16 30       		.byte	0x30
 10059 0a17 9F       		.byte	0x9f
 10060 0a18 16000000 		.4byte	.LVL223
 10061 0a1c 18000000 		.4byte	.LVL224
 10062 0a20 0100     		.2byte	0x1
 10063 0a22 50       		.byte	0x50
 10064 0a23 18000000 		.4byte	.LVL224
 10065 0a27 1A000000 		.4byte	.LVL225
 10066 0a2b 0200     		.2byte	0x2
 10067 0a2d 30       		.byte	0x30
 10068 0a2e 9F       		.byte	0x9f
 10069 0a2f 1A000000 		.4byte	.LVL225
 10070 0a33 34000000 		.4byte	.LFE73
 10071 0a37 0100     		.2byte	0x1
 10072 0a39 50       		.byte	0x50
 10073 0a3a 00000000 		.4byte	0
 10074 0a3e 00000000 		.4byte	0
 10075              	.LLST70:
 10076 0a42 00000000 		.4byte	.LVL226
 10077 0a46 07000000 		.4byte	.LVL228-1
 10078 0a4a 0100     		.2byte	0x1
 10079 0a4c 50       		.byte	0x50
 10080 0a4d 07000000 		.4byte	.LVL228-1
 10081 0a51 10000000 		.4byte	.LVL229
 10082 0a55 0100     		.2byte	0x1
 10083 0a57 54       		.byte	0x54
 10084 0a58 10000000 		.4byte	.LVL229
 10085 0a5c 20000000 		.4byte	.LFE90
 10086 0a60 0400     		.2byte	0x4
 10087 0a62 F3       		.byte	0xf3
 10088 0a63 01       		.uleb128 0x1
 10089 0a64 50       		.byte	0x50
 10090 0a65 9F       		.byte	0x9f
 10091 0a66 00000000 		.4byte	0
 10092 0a6a 00000000 		.4byte	0
 10093              	.LLST71:
 10094 0a6e 04000000 		.4byte	.LVL227
 10095 0a72 18000000 		.4byte	.LVL230
 10096 0a76 0200     		.2byte	0x2
 10097 0a78 30       		.byte	0x30
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 285


 10098 0a79 9F       		.byte	0x9f
 10099 0a7a 18000000 		.4byte	.LVL230
 10100 0a7e 20000000 		.4byte	.LFE90
 10101 0a82 0100     		.2byte	0x1
 10102 0a84 50       		.byte	0x50
 10103 0a85 00000000 		.4byte	0
 10104 0a89 00000000 		.4byte	0
 10105              	.LLST72:
 10106 0a8d 22000000 		.4byte	.LVL231
 10107 0a91 3C000000 		.4byte	.LVL232
 10108 0a95 0100     		.2byte	0x1
 10109 0a97 53       		.byte	0x53
 10110 0a98 00000000 		.4byte	0
 10111 0a9c 00000000 		.4byte	0
 10112              	.LLST73:
 10113 0aa0 62000000 		.4byte	.LVL236
 10114 0aa4 94000000 		.4byte	.LVL237
 10115 0aa8 0100     		.2byte	0x1
 10116 0aaa 53       		.byte	0x53
 10117 0aab 00000000 		.4byte	0
 10118 0aaf 00000000 		.4byte	0
 10119              	.LLST74:
 10120 0ab3 58000000 		.4byte	.LVL234
 10121 0ab7 5C000000 		.4byte	.LVL235
 10122 0abb 0100     		.2byte	0x1
 10123 0abd 53       		.byte	0x53
 10124 0abe 00000000 		.4byte	0
 10125 0ac2 00000000 		.4byte	0
 10126              	.LLST75:
 10127 0ac6 62000000 		.4byte	.LVL236
 10128 0aca 94000000 		.4byte	.LVL237
 10129 0ace 0B00     		.2byte	0xb
 10130 0ad0 73       		.byte	0x73
 10131 0ad1 00       		.sleb128 0
 10132 0ad2 44       		.byte	0x44
 10133 0ad3 1E       		.byte	0x1e
 10134 0ad4 03       		.byte	0x3
 10135 0ad5 30000000 		.4byte	pxReadyTasksLists
 10136 0ad9 22       		.byte	0x22
 10137 0ada 9F       		.byte	0x9f
 10138 0adb 00000000 		.4byte	0
 10139 0adf 00000000 		.4byte	0
 10140              	.LLST76:
 10141 0ae3 00000000 		.4byte	.LVL238
 10142 0ae7 07000000 		.4byte	.LVL239-1
 10143 0aeb 0100     		.2byte	0x1
 10144 0aed 50       		.byte	0x50
 10145 0aee 07000000 		.4byte	.LVL239-1
 10146 0af2 10000000 		.4byte	.LVL240
 10147 0af6 0100     		.2byte	0x1
 10148 0af8 54       		.byte	0x54
 10149 0af9 00000000 		.4byte	0
 10150 0afd 00000000 		.4byte	0
 10151              	.LLST77:
 10152 0b01 10000000 		.4byte	.LVL240
 10153 0b05 B8000000 		.4byte	.LVL251
 10154 0b09 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 286


 10155 0b0b 54       		.byte	0x54
 10156 0b0c 00000000 		.4byte	0
 10157 0b10 00000000 		.4byte	0
 10158              	.LLST78:
 10159 0b14 00000000 		.4byte	.LVL252
 10160 0b18 0F000000 		.4byte	.LVL254-1
 10161 0b1c 0100     		.2byte	0x1
 10162 0b1e 50       		.byte	0x50
 10163 0b1f 0F000000 		.4byte	.LVL254-1
 10164 0b23 20000000 		.4byte	.LFE93
 10165 0b27 0400     		.2byte	0x4
 10166 0b29 F3       		.byte	0xf3
 10167 0b2a 01       		.uleb128 0x1
 10168 0b2b 50       		.byte	0x50
 10169 0b2c 9F       		.byte	0x9f
 10170 0b2d 00000000 		.4byte	0
 10171 0b31 00000000 		.4byte	0
 10172              	.LLST79:
 10173 0b35 00000000 		.4byte	.LVL252
 10174 0b39 0A000000 		.4byte	.LVL253
 10175 0b3d 0100     		.2byte	0x1
 10176 0b3f 51       		.byte	0x51
 10177 0b40 0A000000 		.4byte	.LVL253
 10178 0b44 1A000000 		.4byte	.LVL256
 10179 0b48 0100     		.2byte	0x1
 10180 0b4a 54       		.byte	0x54
 10181 0b4b 1A000000 		.4byte	.LVL256
 10182 0b4f 20000000 		.4byte	.LFE93
 10183 0b53 0400     		.2byte	0x4
 10184 0b55 F3       		.byte	0xf3
 10185 0b56 01       		.uleb128 0x1
 10186 0b57 51       		.byte	0x51
 10187 0b58 9F       		.byte	0x9f
 10188 0b59 00000000 		.4byte	0
 10189 0b5d 00000000 		.4byte	0
 10190              	.LLST80:
 10191 0b61 00000000 		.4byte	.LVL257
 10192 0b65 19000000 		.4byte	.LVL260-1
 10193 0b69 0100     		.2byte	0x1
 10194 0b6b 50       		.byte	0x50
 10195 0b6c 19000000 		.4byte	.LVL260-1
 10196 0b70 28000000 		.4byte	.LFE94
 10197 0b74 0400     		.2byte	0x4
 10198 0b76 F3       		.byte	0xf3
 10199 0b77 01       		.uleb128 0x1
 10200 0b78 50       		.byte	0x50
 10201 0b79 9F       		.byte	0x9f
 10202 0b7a 00000000 		.4byte	0
 10203 0b7e 00000000 		.4byte	0
 10204              	.LLST81:
 10205 0b82 00000000 		.4byte	.LVL257
 10206 0b86 0E000000 		.4byte	.LVL259
 10207 0b8a 0100     		.2byte	0x1
 10208 0b8c 51       		.byte	0x51
 10209 0b8d 0E000000 		.4byte	.LVL259
 10210 0b91 28000000 		.4byte	.LFE94
 10211 0b95 0400     		.2byte	0x4
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 287


 10212 0b97 F3       		.byte	0xf3
 10213 0b98 01       		.uleb128 0x1
 10214 0b99 51       		.byte	0x51
 10215 0b9a 9F       		.byte	0x9f
 10216 0b9b 00000000 		.4byte	0
 10217 0b9f 00000000 		.4byte	0
 10218              	.LLST82:
 10219 0ba3 00000000 		.4byte	.LVL257
 10220 0ba7 0A000000 		.4byte	.LVL258
 10221 0bab 0100     		.2byte	0x1
 10222 0bad 52       		.byte	0x52
 10223 0bae 0A000000 		.4byte	.LVL258
 10224 0bb2 24000000 		.4byte	.LVL262
 10225 0bb6 0100     		.2byte	0x1
 10226 0bb8 54       		.byte	0x54
 10227 0bb9 24000000 		.4byte	.LVL262
 10228 0bbd 28000000 		.4byte	.LFE94
 10229 0bc1 0400     		.2byte	0x4
 10230 0bc3 F3       		.byte	0xf3
 10231 0bc4 01       		.uleb128 0x1
 10232 0bc5 52       		.byte	0x52
 10233 0bc6 9F       		.byte	0x9f
 10234 0bc7 00000000 		.4byte	0
 10235 0bcb 00000000 		.4byte	0
 10236              	.LLST83:
 10237 0bcf 00000000 		.4byte	.LVL263
 10238 0bd3 0C000000 		.4byte	.LVL265
 10239 0bd7 0100     		.2byte	0x1
 10240 0bd9 50       		.byte	0x50
 10241 0bda 0C000000 		.4byte	.LVL265
 10242 0bde 74000000 		.4byte	.LFE95
 10243 0be2 0400     		.2byte	0x4
 10244 0be4 F3       		.byte	0xf3
 10245 0be5 01       		.uleb128 0x1
 10246 0be6 50       		.byte	0x50
 10247 0be7 9F       		.byte	0x9f
 10248 0be8 00000000 		.4byte	0
 10249 0bec 00000000 		.4byte	0
 10250              	.LLST84:
 10251 0bf0 06000000 		.4byte	.LVL264
 10252 0bf4 6A000000 		.4byte	.LVL273
 10253 0bf8 0100     		.2byte	0x1
 10254 0bfa 54       		.byte	0x54
 10255 0bfb 00000000 		.4byte	0
 10256 0bff 00000000 		.4byte	0
 10257              	.LLST85:
 10258 0c03 5C000000 		.4byte	.LVL270
 10259 0c07 66000000 		.4byte	.LVL271
 10260 0c0b 0200     		.2byte	0x2
 10261 0c0d 31       		.byte	0x31
 10262 0c0e 9F       		.byte	0x9f
 10263 0c0f 68000000 		.4byte	.LVL272
 10264 0c13 74000000 		.4byte	.LFE95
 10265 0c17 0100     		.2byte	0x1
 10266 0c19 50       		.byte	0x50
 10267 0c1a 00000000 		.4byte	0
 10268 0c1e 00000000 		.4byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 288


 10269              	.LLST86:
 10270 0c22 00000000 		.4byte	.LVL274
 10271 0c26 0D000000 		.4byte	.LVL277-1
 10272 0c2a 0100     		.2byte	0x1
 10273 0c2c 50       		.byte	0x50
 10274 0c2d 0D000000 		.4byte	.LVL277-1
 10275 0c31 54000000 		.4byte	.LFE96
 10276 0c35 0400     		.2byte	0x4
 10277 0c37 F3       		.byte	0xf3
 10278 0c38 01       		.uleb128 0x1
 10279 0c39 50       		.byte	0x50
 10280 0c3a 9F       		.byte	0x9f
 10281 0c3b 00000000 		.4byte	0
 10282 0c3f 00000000 		.4byte	0
 10283              	.LLST87:
 10284 0c43 00000000 		.4byte	.LVL274
 10285 0c47 06000000 		.4byte	.LVL275
 10286 0c4b 0100     		.2byte	0x1
 10287 0c4d 51       		.byte	0x51
 10288 0c4e 06000000 		.4byte	.LVL275
 10289 0c52 54000000 		.4byte	.LFE96
 10290 0c56 0400     		.2byte	0x4
 10291 0c58 F3       		.byte	0xf3
 10292 0c59 01       		.uleb128 0x1
 10293 0c5a 51       		.byte	0x51
 10294 0c5b 9F       		.byte	0x9f
 10295 0c5c 00000000 		.4byte	0
 10296 0c60 00000000 		.4byte	0
 10297              	.LLST88:
 10298 0c64 0A000000 		.4byte	.LVL276
 10299 0c68 50000000 		.4byte	.LVL280
 10300 0c6c 0100     		.2byte	0x1
 10301 0c6e 55       		.byte	0x55
 10302 0c6f 00000000 		.4byte	0
 10303 0c73 00000000 		.4byte	0
 10304              	.LLST89:
 10305 0c77 00000000 		.4byte	.LVL281
 10306 0c7b 07000000 		.4byte	.LVL282-1
 10307 0c7f 0100     		.2byte	0x1
 10308 0c81 50       		.byte	0x50
 10309 0c82 07000000 		.4byte	.LVL282-1
 10310 0c86 1C000000 		.4byte	.LVL284
 10311 0c8a 0100     		.2byte	0x1
 10312 0c8c 54       		.byte	0x54
 10313 0c8d 1C000000 		.4byte	.LVL284
 10314 0c91 20000000 		.4byte	.LFE97
 10315 0c95 0400     		.2byte	0x4
 10316 0c97 F3       		.byte	0xf3
 10317 0c98 01       		.uleb128 0x1
 10318 0c99 50       		.byte	0x50
 10319 0c9a 9F       		.byte	0x9f
 10320 0c9b 00000000 		.4byte	0
 10321 0c9f 00000000 		.4byte	0
 10322              	.LLST90:
 10323 0ca3 00000000 		.4byte	.LVL286
 10324 0ca7 09000000 		.4byte	.LVL287-1
 10325 0cab 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 289


 10326 0cad 50       		.byte	0x50
 10327 0cae 09000000 		.4byte	.LVL287-1
 10328 0cb2 3C000000 		.4byte	.LVL292
 10329 0cb6 0100     		.2byte	0x1
 10330 0cb8 54       		.byte	0x54
 10331 0cb9 3C000000 		.4byte	.LVL292
 10332 0cbd 3E000000 		.4byte	.LVL293
 10333 0cc1 0400     		.2byte	0x4
 10334 0cc3 F3       		.byte	0xf3
 10335 0cc4 01       		.uleb128 0x1
 10336 0cc5 50       		.byte	0x50
 10337 0cc6 9F       		.byte	0x9f
 10338 0cc7 3E000000 		.4byte	.LVL293
 10339 0ccb 44000000 		.4byte	.LVL295
 10340 0ccf 0100     		.2byte	0x1
 10341 0cd1 54       		.byte	0x54
 10342 0cd2 44000000 		.4byte	.LVL295
 10343 0cd6 46000000 		.4byte	.LVL296
 10344 0cda 0400     		.2byte	0x4
 10345 0cdc F3       		.byte	0xf3
 10346 0cdd 01       		.uleb128 0x1
 10347 0cde 50       		.byte	0x50
 10348 0cdf 9F       		.byte	0x9f
 10349 0ce0 46000000 		.4byte	.LVL296
 10350 0ce4 48000000 		.4byte	.LVL297
 10351 0ce8 0100     		.2byte	0x1
 10352 0cea 54       		.byte	0x54
 10353 0ceb 48000000 		.4byte	.LVL297
 10354 0cef 4A000000 		.4byte	.LVL298
 10355 0cf3 0400     		.2byte	0x4
 10356 0cf5 F3       		.byte	0xf3
 10357 0cf6 01       		.uleb128 0x1
 10358 0cf7 50       		.byte	0x50
 10359 0cf8 9F       		.byte	0x9f
 10360 0cf9 4A000000 		.4byte	.LVL298
 10361 0cfd 4C000000 		.4byte	.LVL299
 10362 0d01 0100     		.2byte	0x1
 10363 0d03 54       		.byte	0x54
 10364 0d04 4C000000 		.4byte	.LVL299
 10365 0d08 58000000 		.4byte	.LFE99
 10366 0d0c 0400     		.2byte	0x4
 10367 0d0e F3       		.byte	0xf3
 10368 0d0f 01       		.uleb128 0x1
 10369 0d10 50       		.byte	0x50
 10370 0d11 9F       		.byte	0x9f
 10371 0d12 00000000 		.4byte	0
 10372 0d16 00000000 		.4byte	0
 10373              	.LLST91:
 10374 0d1a 00000000 		.4byte	.LVL286
 10375 0d1e 09000000 		.4byte	.LVL287-1
 10376 0d22 0100     		.2byte	0x1
 10377 0d24 51       		.byte	0x51
 10378 0d25 09000000 		.4byte	.LVL287-1
 10379 0d29 54000000 		.4byte	.LVL301
 10380 0d2d 0100     		.2byte	0x1
 10381 0d2f 55       		.byte	0x55
 10382 0d30 54000000 		.4byte	.LVL301
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 290


 10383 0d34 58000000 		.4byte	.LFE99
 10384 0d38 0400     		.2byte	0x4
 10385 0d3a F3       		.byte	0xf3
 10386 0d3b 01       		.uleb128 0x1
 10387 0d3c 51       		.byte	0x51
 10388 0d3d 9F       		.byte	0x9f
 10389 0d3e 00000000 		.4byte	0
 10390 0d42 00000000 		.4byte	0
 10391              	.LLST92:
 10392 0d46 3A000000 		.4byte	.LVL291
 10393 0d4a 3E000000 		.4byte	.LVL293
 10394 0d4e 0200     		.2byte	0x2
 10395 0d50 30       		.byte	0x30
 10396 0d51 9F       		.byte	0x9f
 10397 0d52 42000000 		.4byte	.LVL294
 10398 0d56 46000000 		.4byte	.LVL296
 10399 0d5a 0200     		.2byte	0x2
 10400 0d5c 31       		.byte	0x31
 10401 0d5d 9F       		.byte	0x9f
 10402 0d5e 4C000000 		.4byte	.LVL299
 10403 0d62 54000000 		.4byte	.LVL301
 10404 0d66 0100     		.2byte	0x1
 10405 0d68 54       		.byte	0x54
 10406 0d69 54000000 		.4byte	.LVL301
 10407 0d6d 58000000 		.4byte	.LFE99
 10408 0d71 0100     		.2byte	0x1
 10409 0d73 50       		.byte	0x50
 10410 0d74 00000000 		.4byte	0
 10411 0d78 00000000 		.4byte	0
 10412              	.LLST93:
 10413 0d7c 10000000 		.4byte	.LVL288
 10414 0d80 39000000 		.4byte	.LVL291-1
 10415 0d84 0100     		.2byte	0x1
 10416 0d86 51       		.byte	0x51
 10417 0d87 3E000000 		.4byte	.LVL293
 10418 0d8b 4C000000 		.4byte	.LVL299
 10419 0d8f 0100     		.2byte	0x1
 10420 0d91 51       		.byte	0x51
 10421 0d92 00000000 		.4byte	0
 10422 0d96 00000000 		.4byte	0
 10423              	.LLST94:
 10424 0d9a 14000000 		.4byte	.LVL289
 10425 0d9e 36000000 		.4byte	.LVL290
 10426 0da2 0100     		.2byte	0x1
 10427 0da4 50       		.byte	0x50
 10428 0da5 36000000 		.4byte	.LVL290
 10429 0da9 39000000 		.4byte	.LVL291-1
 10430 0dad 0600     		.2byte	0x6
 10431 0daf 71       		.byte	0x71
 10432 0db0 00       		.sleb128 0
 10433 0db1 72       		.byte	0x72
 10434 0db2 00       		.sleb128 0
 10435 0db3 1C       		.byte	0x1c
 10436 0db4 9F       		.byte	0x9f
 10437 0db5 3E000000 		.4byte	.LVL293
 10438 0db9 4C000000 		.4byte	.LVL299
 10439 0dbd 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 291


 10440 0dbf 50       		.byte	0x50
 10441 0dc0 00000000 		.4byte	0
 10442 0dc4 00000000 		.4byte	0
 10443              	.LLST95:
 10444 0dc8 00000000 		.4byte	.LVL302
 10445 0dcc 0C000000 		.4byte	.LVL303
 10446 0dd0 0100     		.2byte	0x1
 10447 0dd2 50       		.byte	0x50
 10448 0dd3 00000000 		.4byte	0
 10449 0dd7 00000000 		.4byte	0
 10450              	.LLST96:
 10451 0ddb 0C000000 		.4byte	.LVL303
 10452 0ddf 11000000 		.4byte	.LVL304-1
 10453 0de3 0100     		.2byte	0x1
 10454 0de5 53       		.byte	0x53
 10455 0de6 00000000 		.4byte	0
 10456 0dea 00000000 		.4byte	0
 10457              	.LLST97:
 10458 0dee 0C000000 		.4byte	.LVL303
 10459 0df2 11000000 		.4byte	.LVL304-1
 10460 0df6 0200     		.2byte	0x2
 10461 0df8 73       		.byte	0x73
 10462 0df9 30       		.sleb128 48
 10463 0dfa 00000000 		.4byte	0
 10464 0dfe 00000000 		.4byte	0
 10465              	.LLST98:
 10466 0e02 00000000 		.4byte	.LVL306
 10467 0e06 2C000000 		.4byte	.LVL307
 10468 0e0a 0100     		.2byte	0x1
 10469 0e0c 50       		.byte	0x50
 10470 0e0d 2C000000 		.4byte	.LVL307
 10471 0e11 43000000 		.4byte	.LVL308-1
 10472 0e15 0100     		.2byte	0x1
 10473 0e17 53       		.byte	0x53
 10474 0e18 43000000 		.4byte	.LVL308-1
 10475 0e1c 68000000 		.4byte	.LVL309
 10476 0e20 0100     		.2byte	0x1
 10477 0e22 54       		.byte	0x54
 10478 0e23 68000000 		.4byte	.LVL309
 10479 0e27 8A000000 		.4byte	.LVL311
 10480 0e2b 0300     		.2byte	0x3
 10481 0e2d 75       		.byte	0x75
 10482 0e2e 7C       		.sleb128 -4
 10483 0e2f 9F       		.byte	0x9f
 10484 0e30 8A000000 		.4byte	.LVL311
 10485 0e34 98000000 		.4byte	.LVL312
 10486 0e38 0100     		.2byte	0x1
 10487 0e3a 53       		.byte	0x53
 10488 0e3b 98000000 		.4byte	.LVL312
 10489 0e3f A8000000 		.4byte	.LVL313
 10490 0e43 0100     		.2byte	0x1
 10491 0e45 50       		.byte	0x50
 10492 0e46 A8000000 		.4byte	.LVL313
 10493 0e4a AA000000 		.4byte	.LVL314
 10494 0e4e 0400     		.2byte	0x4
 10495 0e50 F3       		.byte	0xf3
 10496 0e51 01       		.uleb128 0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 292


 10497 0e52 50       		.byte	0x50
 10498 0e53 9F       		.byte	0x9f
 10499 0e54 AA000000 		.4byte	.LVL314
 10500 0e58 AC000000 		.4byte	.LVL315
 10501 0e5c 0100     		.2byte	0x1
 10502 0e5e 50       		.byte	0x50
 10503 0e5f AC000000 		.4byte	.LVL315
 10504 0e63 AE000000 		.4byte	.LVL316
 10505 0e67 0400     		.2byte	0x4
 10506 0e69 F3       		.byte	0xf3
 10507 0e6a 01       		.uleb128 0x1
 10508 0e6b 50       		.byte	0x50
 10509 0e6c 9F       		.byte	0x9f
 10510 0e6d AE000000 		.4byte	.LVL316
 10511 0e71 B0000000 		.4byte	.LVL317
 10512 0e75 0100     		.2byte	0x1
 10513 0e77 50       		.byte	0x50
 10514 0e78 B0000000 		.4byte	.LVL317
 10515 0e7c BC000000 		.4byte	.LFE109
 10516 0e80 0400     		.2byte	0x4
 10517 0e82 F3       		.byte	0xf3
 10518 0e83 01       		.uleb128 0x1
 10519 0e84 50       		.byte	0x50
 10520 0e85 9F       		.byte	0x9f
 10521 0e86 00000000 		.4byte	0
 10522 0e8a 00000000 		.4byte	0
 10523              	.LLST99:
 10524 0e8e 00000000 		.4byte	.LVL306
 10525 0e92 2C000000 		.4byte	.LVL307
 10526 0e96 0100     		.2byte	0x1
 10527 0e98 50       		.byte	0x50
 10528 0e99 2C000000 		.4byte	.LVL307
 10529 0e9d 43000000 		.4byte	.LVL308-1
 10530 0ea1 0100     		.2byte	0x1
 10531 0ea3 53       		.byte	0x53
 10532 0ea4 43000000 		.4byte	.LVL308-1
 10533 0ea8 68000000 		.4byte	.LVL309
 10534 0eac 0100     		.2byte	0x1
 10535 0eae 54       		.byte	0x54
 10536 0eaf 68000000 		.4byte	.LVL309
 10537 0eb3 8A000000 		.4byte	.LVL311
 10538 0eb7 0300     		.2byte	0x3
 10539 0eb9 75       		.byte	0x75
 10540 0eba 7C       		.sleb128 -4
 10541 0ebb 9F       		.byte	0x9f
 10542 0ebc 8A000000 		.4byte	.LVL311
 10543 0ec0 98000000 		.4byte	.LVL312
 10544 0ec4 0100     		.2byte	0x1
 10545 0ec6 53       		.byte	0x53
 10546 0ec7 98000000 		.4byte	.LVL312
 10547 0ecb A8000000 		.4byte	.LVL313
 10548 0ecf 0100     		.2byte	0x1
 10549 0ed1 50       		.byte	0x50
 10550 0ed2 A8000000 		.4byte	.LVL313
 10551 0ed6 AA000000 		.4byte	.LVL314
 10552 0eda 0400     		.2byte	0x4
 10553 0edc F3       		.byte	0xf3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 293


 10554 0edd 01       		.uleb128 0x1
 10555 0ede 50       		.byte	0x50
 10556 0edf 9F       		.byte	0x9f
 10557 0ee0 AA000000 		.4byte	.LVL314
 10558 0ee4 AC000000 		.4byte	.LVL315
 10559 0ee8 0100     		.2byte	0x1
 10560 0eea 50       		.byte	0x50
 10561 0eeb AC000000 		.4byte	.LVL315
 10562 0eef AE000000 		.4byte	.LVL316
 10563 0ef3 0400     		.2byte	0x4
 10564 0ef5 F3       		.byte	0xf3
 10565 0ef6 01       		.uleb128 0x1
 10566 0ef7 50       		.byte	0x50
 10567 0ef8 9F       		.byte	0x9f
 10568 0ef9 AE000000 		.4byte	.LVL316
 10569 0efd B0000000 		.4byte	.LVL317
 10570 0f01 0100     		.2byte	0x1
 10571 0f03 50       		.byte	0x50
 10572 0f04 B0000000 		.4byte	.LVL317
 10573 0f08 BC000000 		.4byte	.LFE109
 10574 0f0c 0400     		.2byte	0x4
 10575 0f0e F3       		.byte	0xf3
 10576 0f0f 01       		.uleb128 0x1
 10577 0f10 50       		.byte	0x50
 10578 0f11 9F       		.byte	0x9f
 10579 0f12 00000000 		.4byte	0
 10580 0f16 00000000 		.4byte	0
 10581              	.LLST100:
 10582 0f1a 00000000 		.4byte	.LVL306
 10583 0f1e AC000000 		.4byte	.LVL315
 10584 0f22 0200     		.2byte	0x2
 10585 0f24 30       		.byte	0x30
 10586 0f25 9F       		.byte	0x9f
 10587 0f26 AC000000 		.4byte	.LVL315
 10588 0f2a AE000000 		.4byte	.LVL316
 10589 0f2e 0100     		.2byte	0x1
 10590 0f30 50       		.byte	0x50
 10591 0f31 AE000000 		.4byte	.LVL316
 10592 0f35 B0000000 		.4byte	.LVL317
 10593 0f39 0200     		.2byte	0x2
 10594 0f3b 30       		.byte	0x30
 10595 0f3c 9F       		.byte	0x9f
 10596 0f3d B0000000 		.4byte	.LVL317
 10597 0f41 BC000000 		.4byte	.LFE109
 10598 0f45 0100     		.2byte	0x1
 10599 0f47 50       		.byte	0x50
 10600 0f48 00000000 		.4byte	0
 10601 0f4c 00000000 		.4byte	0
 10602              	.LLST101:
 10603 0f50 00000000 		.4byte	.LVL318
 10604 0f54 10000000 		.4byte	.LVL319
 10605 0f58 0100     		.2byte	0x1
 10606 0f5a 50       		.byte	0x50
 10607 0f5b 10000000 		.4byte	.LVL319
 10608 0f5f 21000000 		.4byte	.LVL320-1
 10609 0f63 0100     		.2byte	0x1
 10610 0f65 53       		.byte	0x53
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 294


 10611 0f66 21000000 		.4byte	.LVL320-1
 10612 0f6a 52000000 		.4byte	.LVL321
 10613 0f6e 0100     		.2byte	0x1
 10614 0f70 54       		.byte	0x54
 10615 0f71 52000000 		.4byte	.LVL321
 10616 0f75 76000000 		.4byte	.LVL323
 10617 0f79 0300     		.2byte	0x3
 10618 0f7b 75       		.byte	0x75
 10619 0f7c 7C       		.sleb128 -4
 10620 0f7d 9F       		.byte	0x9f
 10621 0f7e 76000000 		.4byte	.LVL323
 10622 0f82 78000000 		.4byte	.LVL324
 10623 0f86 0100     		.2byte	0x1
 10624 0f88 50       		.byte	0x50
 10625 0f89 78000000 		.4byte	.LVL324
 10626 0f8d 7A000000 		.4byte	.LVL325
 10627 0f91 0400     		.2byte	0x4
 10628 0f93 F3       		.byte	0xf3
 10629 0f94 01       		.uleb128 0x1
 10630 0f95 50       		.byte	0x50
 10631 0f96 9F       		.byte	0x9f
 10632 0f97 7A000000 		.4byte	.LVL325
 10633 0f9b 82000000 		.4byte	.LVL328
 10634 0f9f 0100     		.2byte	0x1
 10635 0fa1 53       		.byte	0x53
 10636 0fa2 82000000 		.4byte	.LVL328
 10637 0fa6 88000000 		.4byte	.LFE110
 10638 0faa 0400     		.2byte	0x4
 10639 0fac F3       		.byte	0xf3
 10640 0fad 01       		.uleb128 0x1
 10641 0fae 50       		.byte	0x50
 10642 0faf 9F       		.byte	0x9f
 10643 0fb0 00000000 		.4byte	0
 10644 0fb4 00000000 		.4byte	0
 10645              	.LLST102:
 10646 0fb8 00000000 		.4byte	.LVL318
 10647 0fbc 10000000 		.4byte	.LVL319
 10648 0fc0 0100     		.2byte	0x1
 10649 0fc2 50       		.byte	0x50
 10650 0fc3 10000000 		.4byte	.LVL319
 10651 0fc7 21000000 		.4byte	.LVL320-1
 10652 0fcb 0100     		.2byte	0x1
 10653 0fcd 53       		.byte	0x53
 10654 0fce 21000000 		.4byte	.LVL320-1
 10655 0fd2 52000000 		.4byte	.LVL321
 10656 0fd6 0100     		.2byte	0x1
 10657 0fd8 54       		.byte	0x54
 10658 0fd9 52000000 		.4byte	.LVL321
 10659 0fdd 76000000 		.4byte	.LVL323
 10660 0fe1 0300     		.2byte	0x3
 10661 0fe3 75       		.byte	0x75
 10662 0fe4 7C       		.sleb128 -4
 10663 0fe5 9F       		.byte	0x9f
 10664 0fe6 76000000 		.4byte	.LVL323
 10665 0fea 78000000 		.4byte	.LVL324
 10666 0fee 0100     		.2byte	0x1
 10667 0ff0 50       		.byte	0x50
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 295


 10668 0ff1 78000000 		.4byte	.LVL324
 10669 0ff5 7A000000 		.4byte	.LVL325
 10670 0ff9 0400     		.2byte	0x4
 10671 0ffb F3       		.byte	0xf3
 10672 0ffc 01       		.uleb128 0x1
 10673 0ffd 50       		.byte	0x50
 10674 0ffe 9F       		.byte	0x9f
 10675 0fff 7A000000 		.4byte	.LVL325
 10676 1003 82000000 		.4byte	.LVL328
 10677 1007 0100     		.2byte	0x1
 10678 1009 53       		.byte	0x53
 10679 100a 82000000 		.4byte	.LVL328
 10680 100e 88000000 		.4byte	.LFE110
 10681 1012 0400     		.2byte	0x4
 10682 1014 F3       		.byte	0xf3
 10683 1015 01       		.uleb128 0x1
 10684 1016 50       		.byte	0x50
 10685 1017 9F       		.byte	0x9f
 10686 1018 00000000 		.4byte	0
 10687 101c 00000000 		.4byte	0
 10688              	.LLST103:
 10689 1020 00000000 		.4byte	.LVL318
 10690 1024 72000000 		.4byte	.LVL322
 10691 1028 0200     		.2byte	0x2
 10692 102a 30       		.byte	0x30
 10693 102b 9F       		.byte	0x9f
 10694 102c 72000000 		.4byte	.LVL322
 10695 1030 76000000 		.4byte	.LVL323
 10696 1034 0200     		.2byte	0x2
 10697 1036 31       		.byte	0x31
 10698 1037 9F       		.byte	0x9f
 10699 1038 76000000 		.4byte	.LVL323
 10700 103c 78000000 		.4byte	.LVL324
 10701 1040 0200     		.2byte	0x2
 10702 1042 30       		.byte	0x30
 10703 1043 9F       		.byte	0x9f
 10704 1044 78000000 		.4byte	.LVL324
 10705 1048 7A000000 		.4byte	.LVL325
 10706 104c 0100     		.2byte	0x1
 10707 104e 50       		.byte	0x50
 10708 104f 7A000000 		.4byte	.LVL325
 10709 1053 80000000 		.4byte	.LVL327
 10710 1057 0200     		.2byte	0x2
 10711 1059 30       		.byte	0x30
 10712 105a 9F       		.byte	0x9f
 10713 105b 80000000 		.4byte	.LVL327
 10714 105f 88000000 		.4byte	.LFE110
 10715 1063 0100     		.2byte	0x1
 10716 1065 50       		.byte	0x50
 10717 1066 00000000 		.4byte	0
 10718 106a 00000000 		.4byte	0
 10719              	.LLST104:
 10720 106e 00000000 		.4byte	.LVL329
 10721 1072 18000000 		.4byte	.LVL332
 10722 1076 0100     		.2byte	0x1
 10723 1078 50       		.byte	0x50
 10724 1079 18000000 		.4byte	.LVL332
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 296


 10725 107d 43000000 		.4byte	.LVL336-1
 10726 1081 0100     		.2byte	0x1
 10727 1083 53       		.byte	0x53
 10728 1084 43000000 		.4byte	.LVL336-1
 10729 1088 80000000 		.4byte	.LVL337
 10730 108c 0100     		.2byte	0x1
 10731 108e 54       		.byte	0x54
 10732 108f 80000000 		.4byte	.LVL337
 10733 1093 82000000 		.4byte	.LVL338
 10734 1097 0400     		.2byte	0x4
 10735 1099 F3       		.byte	0xf3
 10736 109a 01       		.uleb128 0x1
 10737 109b 50       		.byte	0x50
 10738 109c 9F       		.byte	0x9f
 10739 109d 82000000 		.4byte	.LVL338
 10740 10a1 8C000000 		.4byte	.LFE111
 10741 10a5 0100     		.2byte	0x1
 10742 10a7 50       		.byte	0x50
 10743 10a8 00000000 		.4byte	0
 10744 10ac 00000000 		.4byte	0
 10745              	.LLST105:
 10746 10b0 00000000 		.4byte	.LVL329
 10747 10b4 12000000 		.4byte	.LVL331
 10748 10b8 0100     		.2byte	0x1
 10749 10ba 51       		.byte	0x51
 10750 10bb 12000000 		.4byte	.LVL331
 10751 10bf 82000000 		.4byte	.LVL338
 10752 10c3 0400     		.2byte	0x4
 10753 10c5 F3       		.byte	0xf3
 10754 10c6 01       		.uleb128 0x1
 10755 10c7 51       		.byte	0x51
 10756 10c8 9F       		.byte	0x9f
 10757 10c9 82000000 		.4byte	.LVL338
 10758 10cd 8C000000 		.4byte	.LFE111
 10759 10d1 0100     		.2byte	0x1
 10760 10d3 51       		.byte	0x51
 10761 10d4 00000000 		.4byte	0
 10762 10d8 00000000 		.4byte	0
 10763              	.LLST106:
 10764 10dc 00000000 		.4byte	.LVL329
 10765 10e0 18000000 		.4byte	.LVL332
 10766 10e4 0100     		.2byte	0x1
 10767 10e6 50       		.byte	0x50
 10768 10e7 18000000 		.4byte	.LVL332
 10769 10eb 43000000 		.4byte	.LVL336-1
 10770 10ef 0100     		.2byte	0x1
 10771 10f1 53       		.byte	0x53
 10772 10f2 43000000 		.4byte	.LVL336-1
 10773 10f6 80000000 		.4byte	.LVL337
 10774 10fa 0100     		.2byte	0x1
 10775 10fc 54       		.byte	0x54
 10776 10fd 80000000 		.4byte	.LVL337
 10777 1101 82000000 		.4byte	.LVL338
 10778 1105 0400     		.2byte	0x4
 10779 1107 F3       		.byte	0xf3
 10780 1108 01       		.uleb128 0x1
 10781 1109 50       		.byte	0x50
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 297


 10782 110a 9F       		.byte	0x9f
 10783 110b 82000000 		.4byte	.LVL338
 10784 110f 8C000000 		.4byte	.LFE111
 10785 1113 0100     		.2byte	0x1
 10786 1115 50       		.byte	0x50
 10787 1116 00000000 		.4byte	0
 10788 111a 00000000 		.4byte	0
 10789              	.LLST107:
 10790 111e 1C000000 		.4byte	.LVL333
 10791 1122 30000000 		.4byte	.LVL335
 10792 1126 0100     		.2byte	0x1
 10793 1128 51       		.byte	0x51
 10794 1129 00000000 		.4byte	0
 10795 112d 00000000 		.4byte	0
 10796              	.LLST108:
 10797 1131 10000000 		.4byte	.LVL330
 10798 1135 28000000 		.4byte	.LVL334
 10799 1139 0100     		.2byte	0x1
 10800 113b 52       		.byte	0x52
 10801 113c 28000000 		.4byte	.LVL334
 10802 1140 43000000 		.4byte	.LVL336-1
 10803 1144 0200     		.2byte	0x2
 10804 1146 73       		.byte	0x73
 10805 1147 2C       		.sleb128 44
 10806 1148 00000000 		.4byte	0
 10807 114c 00000000 		.4byte	0
 10808              	.LLST109:
 10809 1150 00000000 		.4byte	.LVL340
 10810 1154 09000000 		.4byte	.LVL341-1
 10811 1158 0100     		.2byte	0x1
 10812 115a 50       		.byte	0x50
 10813 115b 09000000 		.4byte	.LVL341-1
 10814 115f 78000000 		.4byte	.LVL347
 10815 1163 0100     		.2byte	0x1
 10816 1165 55       		.byte	0x55
 10817 1166 78000000 		.4byte	.LVL347
 10818 116a 80000000 		.4byte	.LFE114
 10819 116e 0400     		.2byte	0x4
 10820 1170 F3       		.byte	0xf3
 10821 1171 01       		.uleb128 0x1
 10822 1172 50       		.byte	0x50
 10823 1173 9F       		.byte	0x9f
 10824 1174 00000000 		.4byte	0
 10825 1178 00000000 		.4byte	0
 10826              	.LLST110:
 10827 117c 00000000 		.4byte	.LVL340
 10828 1180 09000000 		.4byte	.LVL341-1
 10829 1184 0100     		.2byte	0x1
 10830 1186 51       		.byte	0x51
 10831 1187 09000000 		.4byte	.LVL341-1
 10832 118b 4A000000 		.4byte	.LVL345
 10833 118f 0100     		.2byte	0x1
 10834 1191 54       		.byte	0x54
 10835 1192 4A000000 		.4byte	.LVL345
 10836 1196 80000000 		.4byte	.LFE114
 10837 119a 0400     		.2byte	0x4
 10838 119c F3       		.byte	0xf3
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 298


 10839 119d 01       		.uleb128 0x1
 10840 119e 51       		.byte	0x51
 10841 119f 9F       		.byte	0x9f
 10842 11a0 00000000 		.4byte	0
 10843 11a4 00000000 		.4byte	0
 10844              	.LLST111:
 10845 11a8 4A000000 		.4byte	.LVL345
 10846 11ac 78000000 		.4byte	.LVL347
 10847 11b0 0100     		.2byte	0x1
 10848 11b2 54       		.byte	0x54
 10849 11b3 78000000 		.4byte	.LVL347
 10850 11b7 80000000 		.4byte	.LFE114
 10851 11bb 0100     		.2byte	0x1
 10852 11bd 50       		.byte	0x50
 10853 11be 00000000 		.4byte	0
 10854 11c2 00000000 		.4byte	0
 10855              	.LLST112:
 10856 11c6 00000000 		.4byte	.LVL348
 10857 11ca 0D000000 		.4byte	.LVL349-1
 10858 11ce 0100     		.2byte	0x1
 10859 11d0 50       		.byte	0x50
 10860 11d1 0D000000 		.4byte	.LVL349-1
 10861 11d5 9C000000 		.4byte	.LVL359
 10862 11d9 0100     		.2byte	0x1
 10863 11db 57       		.byte	0x57
 10864 11dc 9C000000 		.4byte	.LVL359
 10865 11e0 A4000000 		.4byte	.LFE115
 10866 11e4 0400     		.2byte	0x4
 10867 11e6 F3       		.byte	0xf3
 10868 11e7 01       		.uleb128 0x1
 10869 11e8 50       		.byte	0x50
 10870 11e9 9F       		.byte	0x9f
 10871 11ea 00000000 		.4byte	0
 10872 11ee 00000000 		.4byte	0
 10873              	.LLST113:
 10874 11f2 00000000 		.4byte	.LVL348
 10875 11f6 0D000000 		.4byte	.LVL349-1
 10876 11fa 0100     		.2byte	0x1
 10877 11fc 51       		.byte	0x51
 10878 11fd 0D000000 		.4byte	.LVL349-1
 10879 1201 80000000 		.4byte	.LVL353
 10880 1205 0100     		.2byte	0x1
 10881 1207 55       		.byte	0x55
 10882 1208 80000000 		.4byte	.LVL353
 10883 120c 86000000 		.4byte	.LVL356
 10884 1210 0400     		.2byte	0x4
 10885 1212 F3       		.byte	0xf3
 10886 1213 01       		.uleb128 0x1
 10887 1214 51       		.byte	0x51
 10888 1215 9F       		.byte	0x9f
 10889 1216 86000000 		.4byte	.LVL356
 10890 121a 88000000 		.4byte	.LVL357
 10891 121e 0100     		.2byte	0x1
 10892 1220 55       		.byte	0x55
 10893 1221 88000000 		.4byte	.LVL357
 10894 1225 A4000000 		.4byte	.LFE115
 10895 1229 0400     		.2byte	0x4
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 299


 10896 122b F3       		.byte	0xf3
 10897 122c 01       		.uleb128 0x1
 10898 122d 51       		.byte	0x51
 10899 122e 9F       		.byte	0x9f
 10900 122f 00000000 		.4byte	0
 10901 1233 00000000 		.4byte	0
 10902              	.LLST114:
 10903 1237 00000000 		.4byte	.LVL348
 10904 123b 0D000000 		.4byte	.LVL349-1
 10905 123f 0100     		.2byte	0x1
 10906 1241 52       		.byte	0x52
 10907 1242 0D000000 		.4byte	.LVL349-1
 10908 1246 84000000 		.4byte	.LVL355
 10909 124a 0100     		.2byte	0x1
 10910 124c 54       		.byte	0x54
 10911 124d 84000000 		.4byte	.LVL355
 10912 1251 86000000 		.4byte	.LVL356
 10913 1255 0400     		.2byte	0x4
 10914 1257 F3       		.byte	0xf3
 10915 1258 01       		.uleb128 0x1
 10916 1259 52       		.byte	0x52
 10917 125a 9F       		.byte	0x9f
 10918 125b 86000000 		.4byte	.LVL356
 10919 125f 88000000 		.4byte	.LVL357
 10920 1263 0100     		.2byte	0x1
 10921 1265 54       		.byte	0x54
 10922 1266 88000000 		.4byte	.LVL357
 10923 126a A4000000 		.4byte	.LFE115
 10924 126e 0400     		.2byte	0x4
 10925 1270 F3       		.byte	0xf3
 10926 1271 01       		.uleb128 0x1
 10927 1272 52       		.byte	0x52
 10928 1273 9F       		.byte	0x9f
 10929 1274 00000000 		.4byte	0
 10930 1278 00000000 		.4byte	0
 10931              	.LLST115:
 10932 127c 00000000 		.4byte	.LVL348
 10933 1280 0D000000 		.4byte	.LVL349-1
 10934 1284 0100     		.2byte	0x1
 10935 1286 53       		.byte	0x53
 10936 1287 0D000000 		.4byte	.LVL349-1
 10937 128b 9C000000 		.4byte	.LVL359
 10938 128f 0100     		.2byte	0x1
 10939 1291 56       		.byte	0x56
 10940 1292 9C000000 		.4byte	.LVL359
 10941 1296 A4000000 		.4byte	.LFE115
 10942 129a 0400     		.2byte	0x4
 10943 129c F3       		.byte	0xf3
 10944 129d 01       		.uleb128 0x1
 10945 129e 53       		.byte	0x53
 10946 129f 9F       		.byte	0x9f
 10947 12a0 00000000 		.4byte	0
 10948 12a4 00000000 		.4byte	0
 10949              	.LLST116:
 10950 12a8 82000000 		.4byte	.LVL354
 10951 12ac 86000000 		.4byte	.LVL356
 10952 12b0 0200     		.2byte	0x2
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 300


 10953 12b2 31       		.byte	0x31
 10954 12b3 9F       		.byte	0x9f
 10955 12b4 88000000 		.4byte	.LVL357
 10956 12b8 9C000000 		.4byte	.LVL359
 10957 12bc 0100     		.2byte	0x1
 10958 12be 54       		.byte	0x54
 10959 12bf 9C000000 		.4byte	.LVL359
 10960 12c3 A4000000 		.4byte	.LFE115
 10961 12c7 0100     		.2byte	0x1
 10962 12c9 50       		.byte	0x50
 10963 12ca 00000000 		.4byte	0
 10964 12ce 00000000 		.4byte	0
 10965              	.LLST117:
 10966 12d2 00000000 		.4byte	.LVL360
 10967 12d6 0D000000 		.4byte	.LVL362-1
 10968 12da 0100     		.2byte	0x1
 10969 12dc 50       		.byte	0x50
 10970 12dd 0D000000 		.4byte	.LVL362-1
 10971 12e1 AE000000 		.4byte	.LVL371
 10972 12e5 0100     		.2byte	0x1
 10973 12e7 54       		.byte	0x54
 10974 12e8 AE000000 		.4byte	.LVL371
 10975 12ec B8000000 		.4byte	.LFE116
 10976 12f0 0400     		.2byte	0x4
 10977 12f2 F3       		.byte	0xf3
 10978 12f3 01       		.uleb128 0x1
 10979 12f4 50       		.byte	0x50
 10980 12f5 9F       		.byte	0x9f
 10981 12f6 00000000 		.4byte	0
 10982 12fa 00000000 		.4byte	0
 10983              	.LLST118:
 10984 12fe 00000000 		.4byte	.LVL360
 10985 1302 0D000000 		.4byte	.LVL362-1
 10986 1306 0100     		.2byte	0x1
 10987 1308 51       		.byte	0x51
 10988 1309 0D000000 		.4byte	.LVL362-1
 10989 130d 32000000 		.4byte	.LVL364
 10990 1311 0100     		.2byte	0x1
 10991 1313 57       		.byte	0x57
 10992 1314 32000000 		.4byte	.LVL364
 10993 1318 38000000 		.4byte	.LVL365
 10994 131c 0400     		.2byte	0x4
 10995 131e F3       		.byte	0xf3
 10996 131f 01       		.uleb128 0x1
 10997 1320 51       		.byte	0x51
 10998 1321 9F       		.byte	0x9f
 10999 1322 38000000 		.4byte	.LVL365
 11000 1326 58000000 		.4byte	.LVL366
 11001 132a 0100     		.2byte	0x1
 11002 132c 57       		.byte	0x57
 11003 132d 58000000 		.4byte	.LVL366
 11004 1331 B8000000 		.4byte	.LFE116
 11005 1335 0400     		.2byte	0x4
 11006 1337 F3       		.byte	0xf3
 11007 1338 01       		.uleb128 0x1
 11008 1339 51       		.byte	0x51
 11009 133a 9F       		.byte	0x9f
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 301


 11010 133b 00000000 		.4byte	0
 11011 133f 00000000 		.4byte	0
 11012              	.LLST119:
 11013 1343 00000000 		.4byte	.LVL360
 11014 1347 0D000000 		.4byte	.LVL362-1
 11015 134b 0100     		.2byte	0x1
 11016 134d 52       		.byte	0x52
 11017 134e 0D000000 		.4byte	.LVL362-1
 11018 1352 B8000000 		.4byte	.LFE116
 11019 1356 0400     		.2byte	0x4
 11020 1358 F3       		.byte	0xf3
 11021 1359 01       		.uleb128 0x1
 11022 135a 52       		.byte	0x52
 11023 135b 9F       		.byte	0x9f
 11024 135c 00000000 		.4byte	0
 11025 1360 00000000 		.4byte	0
 11026              	.LLST120:
 11027 1364 00000000 		.4byte	.LVL360
 11028 1368 0D000000 		.4byte	.LVL362-1
 11029 136c 0100     		.2byte	0x1
 11030 136e 53       		.byte	0x53
 11031 136f 0D000000 		.4byte	.LVL362-1
 11032 1373 6E000000 		.4byte	.LVL368
 11033 1377 0100     		.2byte	0x1
 11034 1379 56       		.byte	0x56
 11035 137a 6E000000 		.4byte	.LVL368
 11036 137e B8000000 		.4byte	.LFE116
 11037 1382 0400     		.2byte	0x4
 11038 1384 F3       		.byte	0xf3
 11039 1385 01       		.uleb128 0x1
 11040 1386 53       		.byte	0x53
 11041 1387 9F       		.byte	0x9f
 11042 1388 00000000 		.4byte	0
 11043 138c 00000000 		.4byte	0
 11044              	.LLST121:
 11045 1390 0A000000 		.4byte	.LVL361
 11046 1394 0D000000 		.4byte	.LVL362-1
 11047 1398 0100     		.2byte	0x1
 11048 139a 50       		.byte	0x50
 11049 139b 0D000000 		.4byte	.LVL362-1
 11050 139f AE000000 		.4byte	.LVL371
 11051 13a3 0100     		.2byte	0x1
 11052 13a5 54       		.byte	0x54
 11053 13a6 AE000000 		.4byte	.LVL371
 11054 13aa B8000000 		.4byte	.LFE116
 11055 13ae 0400     		.2byte	0x4
 11056 13b0 F3       		.byte	0xf3
 11057 13b1 01       		.uleb128 0x1
 11058 13b2 50       		.byte	0x50
 11059 13b3 9F       		.byte	0x9f
 11060 13b4 00000000 		.4byte	0
 11061 13b8 00000000 		.4byte	0
 11062              	.LLST122:
 11063 13bc 0A000000 		.4byte	.LVL361
 11064 13c0 58000000 		.4byte	.LVL366
 11065 13c4 0200     		.2byte	0x2
 11066 13c6 31       		.byte	0x31
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 302


 11067 13c7 9F       		.byte	0x9f
 11068 13c8 58000000 		.4byte	.LVL366
 11069 13cc AE000000 		.4byte	.LVL371
 11070 13d0 0100     		.2byte	0x1
 11071 13d2 55       		.byte	0x55
 11072 13d3 AE000000 		.4byte	.LVL371
 11073 13d7 B8000000 		.4byte	.LFE116
 11074 13db 0100     		.2byte	0x1
 11075 13dd 50       		.byte	0x50
 11076 13de 00000000 		.4byte	0
 11077 13e2 00000000 		.4byte	0
 11078              	.LLST123:
 11079 13e6 1A000000 		.4byte	.LVL363
 11080 13ea 63000000 		.4byte	.LVL367-1
 11081 13ee 0100     		.2byte	0x1
 11082 13f0 53       		.byte	0x53
 11083 13f1 00000000 		.4byte	0
 11084 13f5 00000000 		.4byte	0
 11085              	.LLST124:
 11086 13f9 00000000 		.4byte	.LVL372
 11087 13fd 72000000 		.4byte	.LVL381
 11088 1401 0100     		.2byte	0x1
 11089 1403 50       		.byte	0x50
 11090 1404 72000000 		.4byte	.LVL381
 11091 1408 9C000000 		.4byte	.LVL384
 11092 140c 0100     		.2byte	0x1
 11093 140e 56       		.byte	0x56
 11094 140f 9C000000 		.4byte	.LVL384
 11095 1413 A2000000 		.4byte	.LVL385
 11096 1417 0100     		.2byte	0x1
 11097 1419 50       		.byte	0x50
 11098 141a A2000000 		.4byte	.LVL385
 11099 141e C6000000 		.4byte	.LVL387
 11100 1422 0100     		.2byte	0x1
 11101 1424 56       		.byte	0x56
 11102 1425 C6000000 		.4byte	.LVL387
 11103 1429 D8000000 		.4byte	.LFE117
 11104 142d 0400     		.2byte	0x4
 11105 142f F3       		.byte	0xf3
 11106 1430 01       		.uleb128 0x1
 11107 1431 50       		.byte	0x50
 11108 1432 9F       		.byte	0x9f
 11109 1433 00000000 		.4byte	0
 11110 1437 00000000 		.4byte	0
 11111              	.LLST125:
 11112 143b 00000000 		.4byte	.LVL372
 11113 143f 3A000000 		.4byte	.LVL377
 11114 1443 0100     		.2byte	0x1
 11115 1445 51       		.byte	0x51
 11116 1446 3A000000 		.4byte	.LVL377
 11117 144a 40000000 		.4byte	.LVL378
 11118 144e 0400     		.2byte	0x4
 11119 1450 F3       		.byte	0xf3
 11120 1451 01       		.uleb128 0x1
 11121 1452 51       		.byte	0x51
 11122 1453 9F       		.byte	0x9f
 11123 1454 40000000 		.4byte	.LVL378
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 303


 11124 1458 60000000 		.4byte	.LVL379
 11125 145c 0100     		.2byte	0x1
 11126 145e 51       		.byte	0x51
 11127 145f 60000000 		.4byte	.LVL379
 11128 1463 D8000000 		.4byte	.LFE117
 11129 1467 0400     		.2byte	0x4
 11130 1469 F3       		.byte	0xf3
 11131 146a 01       		.uleb128 0x1
 11132 146b 51       		.byte	0x51
 11133 146c 9F       		.byte	0x9f
 11134 146d 00000000 		.4byte	0
 11135 1471 00000000 		.4byte	0
 11136              	.LLST126:
 11137 1475 00000000 		.4byte	.LVL372
 11138 1479 2A000000 		.4byte	.LVL376
 11139 147d 0100     		.2byte	0x1
 11140 147f 52       		.byte	0x52
 11141 1480 2A000000 		.4byte	.LVL376
 11142 1484 D8000000 		.4byte	.LFE117
 11143 1488 0400     		.2byte	0x4
 11144 148a F3       		.byte	0xf3
 11145 148b 01       		.uleb128 0x1
 11146 148c 52       		.byte	0x52
 11147 148d 9F       		.byte	0x9f
 11148 148e 00000000 		.4byte	0
 11149 1492 00000000 		.4byte	0
 11150              	.LLST127:
 11151 1496 00000000 		.4byte	.LVL372
 11152 149a 20000000 		.4byte	.LVL374
 11153 149e 0100     		.2byte	0x1
 11154 14a0 53       		.byte	0x53
 11155 14a1 20000000 		.4byte	.LVL374
 11156 14a5 D8000000 		.4byte	.LFE117
 11157 14a9 0400     		.2byte	0x4
 11158 14ab F3       		.byte	0xf3
 11159 14ac 01       		.uleb128 0x1
 11160 14ad 53       		.byte	0x53
 11161 14ae 9F       		.byte	0x9f
 11162 14af 00000000 		.4byte	0
 11163 14b3 00000000 		.4byte	0
 11164              	.LLST128:
 11165 14b7 00000000 		.4byte	.LVL372
 11166 14bb CE000000 		.4byte	.LVL389
 11167 14bf 0200     		.2byte	0x2
 11168 14c1 91       		.byte	0x91
 11169 14c2 00       		.sleb128 0
 11170 14c3 CE000000 		.4byte	.LVL389
 11171 14c7 D8000000 		.4byte	.LFE117
 11172 14cb 0200     		.2byte	0x2
 11173 14cd 7D       		.byte	0x7d
 11174 14ce 00       		.sleb128 0
 11175 14cf 00000000 		.4byte	0
 11176 14d3 00000000 		.4byte	0
 11177              	.LLST129:
 11178 14d7 02000000 		.4byte	.LVL373
 11179 14db 72000000 		.4byte	.LVL381
 11180 14df 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 304


 11181 14e1 50       		.byte	0x50
 11182 14e2 72000000 		.4byte	.LVL381
 11183 14e6 9C000000 		.4byte	.LVL384
 11184 14ea 0100     		.2byte	0x1
 11185 14ec 56       		.byte	0x56
 11186 14ed 9C000000 		.4byte	.LVL384
 11187 14f1 A2000000 		.4byte	.LVL385
 11188 14f5 0100     		.2byte	0x1
 11189 14f7 50       		.byte	0x50
 11190 14f8 A2000000 		.4byte	.LVL385
 11191 14fc C6000000 		.4byte	.LVL387
 11192 1500 0100     		.2byte	0x1
 11193 1502 56       		.byte	0x56
 11194 1503 C6000000 		.4byte	.LVL387
 11195 1507 D8000000 		.4byte	.LFE117
 11196 150b 0400     		.2byte	0x4
 11197 150d F3       		.byte	0xf3
 11198 150e 01       		.uleb128 0x1
 11199 150f 50       		.byte	0x50
 11200 1510 9F       		.byte	0x9f
 11201 1511 00000000 		.4byte	0
 11202 1515 00000000 		.4byte	0
 11203              	.LLST130:
 11204 1519 22000000 		.4byte	.LVL375
 11205 151d 68000000 		.4byte	.LVL380
 11206 1521 0100     		.2byte	0x1
 11207 1523 53       		.byte	0x53
 11208 1524 00000000 		.4byte	0
 11209 1528 00000000 		.4byte	0
 11210              	.LLST131:
 11211 152c 02000000 		.4byte	.LVL373
 11212 1530 60000000 		.4byte	.LVL379
 11213 1534 0200     		.2byte	0x2
 11214 1536 31       		.byte	0x31
 11215 1537 9F       		.byte	0x9f
 11216 1538 60000000 		.4byte	.LVL379
 11217 153c CE000000 		.4byte	.LVL389
 11218 1540 0100     		.2byte	0x1
 11219 1542 54       		.byte	0x54
 11220 1543 CE000000 		.4byte	.LVL389
 11221 1547 D8000000 		.4byte	.LFE117
 11222 154b 0100     		.2byte	0x1
 11223 154d 50       		.byte	0x50
 11224 154e 00000000 		.4byte	0
 11225 1552 00000000 		.4byte	0
 11226              	.LLST132:
 11227 1556 C6000000 		.4byte	.LVL387
 11228 155a CA000000 		.4byte	.LVL388
 11229 155e 0100     		.2byte	0x1
 11230 1560 55       		.byte	0x55
 11231 1561 00000000 		.4byte	0
 11232 1565 00000000 		.4byte	0
 11233              	.LLST133:
 11234 1569 00000000 		.4byte	.LVL390
 11235 156d 3C000000 		.4byte	.LVL394
 11236 1571 0100     		.2byte	0x1
 11237 1573 50       		.byte	0x50
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 305


 11238 1574 3C000000 		.4byte	.LVL394
 11239 1578 66000000 		.4byte	.LVL397
 11240 157c 0100     		.2byte	0x1
 11241 157e 54       		.byte	0x54
 11242 157f 66000000 		.4byte	.LVL397
 11243 1583 6C000000 		.4byte	.LVL399
 11244 1587 0100     		.2byte	0x1
 11245 1589 50       		.byte	0x50
 11246 158a 6C000000 		.4byte	.LVL399
 11247 158e 8C000000 		.4byte	.LVL401
 11248 1592 0100     		.2byte	0x1
 11249 1594 54       		.byte	0x54
 11250 1595 8C000000 		.4byte	.LVL401
 11251 1599 9C000000 		.4byte	.LFE118
 11252 159d 0400     		.2byte	0x4
 11253 159f F3       		.byte	0xf3
 11254 15a0 01       		.uleb128 0x1
 11255 15a1 50       		.byte	0x50
 11256 15a2 9F       		.byte	0x9f
 11257 15a3 00000000 		.4byte	0
 11258 15a7 00000000 		.4byte	0
 11259              	.LLST134:
 11260 15ab 00000000 		.4byte	.LVL390
 11261 15af 3F000000 		.4byte	.LVL395-1
 11262 15b3 0100     		.2byte	0x1
 11263 15b5 51       		.byte	0x51
 11264 15b6 3F000000 		.4byte	.LVL395-1
 11265 15ba 66000000 		.4byte	.LVL397
 11266 15be 0100     		.2byte	0x1
 11267 15c0 56       		.byte	0x56
 11268 15c1 66000000 		.4byte	.LVL397
 11269 15c5 6A000000 		.4byte	.LVL398
 11270 15c9 0100     		.2byte	0x1
 11271 15cb 51       		.byte	0x51
 11272 15cc 6A000000 		.4byte	.LVL398
 11273 15d0 8C000000 		.4byte	.LVL401
 11274 15d4 0100     		.2byte	0x1
 11275 15d6 56       		.byte	0x56
 11276 15d7 8C000000 		.4byte	.LVL401
 11277 15db 9C000000 		.4byte	.LFE118
 11278 15df 0400     		.2byte	0x4
 11279 15e1 F3       		.byte	0xf3
 11280 15e2 01       		.uleb128 0x1
 11281 15e3 51       		.byte	0x51
 11282 15e4 9F       		.byte	0x9f
 11283 15e5 00000000 		.4byte	0
 11284 15e9 00000000 		.4byte	0
 11285              	.LLST135:
 11286 15ed 02000000 		.4byte	.LVL391
 11287 15f1 3C000000 		.4byte	.LVL394
 11288 15f5 0100     		.2byte	0x1
 11289 15f7 50       		.byte	0x50
 11290 15f8 3C000000 		.4byte	.LVL394
 11291 15fc 66000000 		.4byte	.LVL397
 11292 1600 0100     		.2byte	0x1
 11293 1602 54       		.byte	0x54
 11294 1603 66000000 		.4byte	.LVL397
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 306


 11295 1607 6C000000 		.4byte	.LVL399
 11296 160b 0100     		.2byte	0x1
 11297 160d 50       		.byte	0x50
 11298 160e 6C000000 		.4byte	.LVL399
 11299 1612 8C000000 		.4byte	.LVL401
 11300 1616 0100     		.2byte	0x1
 11301 1618 54       		.byte	0x54
 11302 1619 8C000000 		.4byte	.LVL401
 11303 161d 9C000000 		.4byte	.LFE118
 11304 1621 0400     		.2byte	0x4
 11305 1623 F3       		.byte	0xf3
 11306 1624 01       		.uleb128 0x1
 11307 1625 50       		.byte	0x50
 11308 1626 9F       		.byte	0x9f
 11309 1627 00000000 		.4byte	0
 11310 162b 00000000 		.4byte	0
 11311              	.LLST136:
 11312 162f 1C000000 		.4byte	.LVL392
 11313 1633 32000000 		.4byte	.LVL393
 11314 1637 0100     		.2byte	0x1
 11315 1639 53       		.byte	0x53
 11316 163a 00000000 		.4byte	0
 11317 163e 00000000 		.4byte	0
 11318              	.LLST137:
 11319 1642 8C000000 		.4byte	.LVL401
 11320 1646 90000000 		.4byte	.LVL402
 11321 164a 0100     		.2byte	0x1
 11322 164c 55       		.byte	0x55
 11323 164d 00000000 		.4byte	0
 11324 1651 00000000 		.4byte	0
 11325              	.LLST138:
 11326 1655 00000000 		.4byte	.LVL403
 11327 1659 0C000000 		.4byte	.LVL404
 11328 165d 0100     		.2byte	0x1
 11329 165f 50       		.byte	0x50
 11330 1660 00000000 		.4byte	0
 11331 1664 00000000 		.4byte	0
 11332              	.LLST139:
 11333 1668 0C000000 		.4byte	.LVL404
 11334 166c 22000000 		.4byte	.LVL407
 11335 1670 0100     		.2byte	0x1
 11336 1672 54       		.byte	0x54
 11337 1673 24000000 		.4byte	.LVL408
 11338 1677 26000000 		.4byte	.LVL409
 11339 167b 0100     		.2byte	0x1
 11340 167d 54       		.byte	0x54
 11341 167e 00000000 		.4byte	0
 11342 1682 00000000 		.4byte	0
 11343              	.LLST140:
 11344 1686 20000000 		.4byte	.LVL406
 11345 168a 24000000 		.4byte	.LVL408
 11346 168e 0200     		.2byte	0x2
 11347 1690 31       		.byte	0x31
 11348 1691 9F       		.byte	0x9f
 11349 1692 26000000 		.4byte	.LVL409
 11350 1696 2E000000 		.4byte	.LVL411
 11351 169a 0100     		.2byte	0x1
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 307


 11352 169c 54       		.byte	0x54
 11353 169d 2E000000 		.4byte	.LVL411
 11354 16a1 34000000 		.4byte	.LFE119
 11355 16a5 0100     		.2byte	0x1
 11356 16a7 50       		.byte	0x50
 11357 16a8 00000000 		.4byte	0
 11358 16ac 00000000 		.4byte	0
 11359              	.LLST141:
 11360 16b0 00000000 		.4byte	.LVL412
 11361 16b4 0E000000 		.4byte	.LVL413
 11362 16b8 0100     		.2byte	0x1
 11363 16ba 50       		.byte	0x50
 11364 16bb 00000000 		.4byte	0
 11365 16bf 00000000 		.4byte	0
 11366              	.LLST142:
 11367 16c3 00000000 		.4byte	.LVL412
 11368 16c7 11000000 		.4byte	.LVL414-1
 11369 16cb 0100     		.2byte	0x1
 11370 16cd 51       		.byte	0x51
 11371 16ce 11000000 		.4byte	.LVL414-1
 11372 16d2 2A000000 		.4byte	.LVL417
 11373 16d6 0100     		.2byte	0x1
 11374 16d8 56       		.byte	0x56
 11375 16d9 2A000000 		.4byte	.LVL417
 11376 16dd 30000000 		.4byte	.LFE120
 11377 16e1 0400     		.2byte	0x4
 11378 16e3 F3       		.byte	0xf3
 11379 16e4 01       		.uleb128 0x1
 11380 16e5 51       		.byte	0x51
 11381 16e6 9F       		.byte	0x9f
 11382 16e7 00000000 		.4byte	0
 11383 16eb 00000000 		.4byte	0
 11384              	.LLST143:
 11385 16ef 0E000000 		.4byte	.LVL413
 11386 16f3 2A000000 		.4byte	.LVL417
 11387 16f7 0100     		.2byte	0x1
 11388 16f9 54       		.byte	0x54
 11389 16fa 00000000 		.4byte	0
 11390 16fe 00000000 		.4byte	0
 11391              	.LLST144:
 11392 1702 1A000000 		.4byte	.LVL415
 11393 1706 2A000000 		.4byte	.LVL417
 11394 170a 0100     		.2byte	0x1
 11395 170c 55       		.byte	0x55
 11396 170d 2A000000 		.4byte	.LVL417
 11397 1711 30000000 		.4byte	.LFE120
 11398 1715 0100     		.2byte	0x1
 11399 1717 50       		.byte	0x50
 11400 1718 00000000 		.4byte	0
 11401 171c 00000000 		.4byte	0
 11402              		.section	.debug_aranges,"",%progbits
 11403 0000 C4010000 		.4byte	0x1c4
 11404 0004 0200     		.2byte	0x2
 11405 0006 00000000 		.4byte	.Ldebug_info0
 11406 000a 04       		.byte	0x4
 11407 000b 00       		.byte	0
 11408 000c 0000     		.2byte	0
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 308


 11409 000e 0000     		.2byte	0
 11410 0010 00000000 		.4byte	.LFB79
 11411 0014 2C000000 		.4byte	.LFE79-.LFB79
 11412 0018 00000000 		.4byte	.LFB104
 11413 001c 14000000 		.4byte	.LFE104-.LFB104
 11414 0020 00000000 		.4byte	.LFB107
 11415 0024 24000000 		.4byte	.LFE107-.LFB107
 11416 0028 00000000 		.4byte	.LFB106
 11417 002c 12000000 		.4byte	.LFE106-.LFB106
 11418 0030 00000000 		.4byte	.LFB69
 11419 0034 9C000000 		.4byte	.LFE69-.LFB69
 11420 0038 00000000 		.4byte	.LFB102
 11421 003c 58000000 		.4byte	.LFE102-.LFB102
 11422 0040 00000000 		.4byte	.LFB70
 11423 0044 AC000000 		.4byte	.LFE70-.LFB70
 11424 0048 00000000 		.4byte	.LFB103
 11425 004c 44000000 		.4byte	.LFE103-.LFB103
 11426 0050 00000000 		.4byte	.LFB101
 11427 0054 08000000 		.4byte	.LFE101-.LFB101
 11428 0058 00000000 		.4byte	.LFB121
 11429 005c 84000000 		.4byte	.LFE121-.LFB121
 11430 0060 00000000 		.4byte	.LFB68
 11431 0064 62000000 		.4byte	.LFE68-.LFB68
 11432 0068 00000000 		.4byte	.LFB71
 11433 006c BC000000 		.4byte	.LFE71-.LFB71
 11434 0070 00000000 		.4byte	.LFB74
 11435 0074 70000000 		.4byte	.LFE74-.LFB74
 11436 0078 00000000 		.4byte	.LFB75
 11437 007c 20000000 		.4byte	.LFE75-.LFB75
 11438 0080 00000000 		.4byte	.LFB76
 11439 0084 28000000 		.4byte	.LFE76-.LFB76
 11440 0088 00000000 		.4byte	.LFB77
 11441 008c E0000000 		.4byte	.LFE77-.LFB77
 11442 0090 00000000 		.4byte	.LFB80
 11443 0094 78000000 		.4byte	.LFE80-.LFB80
 11444 0098 00000000 		.4byte	.LFB81
 11445 009c 88000000 		.4byte	.LFE81-.LFB81
 11446 00a0 00000000 		.4byte	.LFB82
 11447 00a4 58000000 		.4byte	.LFE82-.LFB82
 11448 00a8 00000000 		.4byte	.LFB83
 11449 00ac 24000000 		.4byte	.LFE83-.LFB83
 11450 00b0 00000000 		.4byte	.LFB84
 11451 00b4 14000000 		.4byte	.LFE84-.LFB84
 11452 00b8 00000000 		.4byte	.LFB86
 11453 00bc 0C000000 		.4byte	.LFE86-.LFB86
 11454 00c0 00000000 		.4byte	.LFB87
 11455 00c4 0C000000 		.4byte	.LFE87-.LFB87
 11456 00c8 00000000 		.4byte	.LFB88
 11457 00cc 0C000000 		.4byte	.LFE88-.LFB88
 11458 00d0 00000000 		.4byte	.LFB89
 11459 00d4 14000000 		.4byte	.LFE89-.LFB89
 11460 00d8 00000000 		.4byte	.LFB91
 11461 00dc 00010000 		.4byte	.LFE91-.LFB91
 11462 00e0 00000000 		.4byte	.LFB85
 11463 00e4 D8000000 		.4byte	.LFE85-.LFB85
 11464 00e8 00000000 		.4byte	.LFB72
 11465 00ec 6C000000 		.4byte	.LFE72-.LFB72
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 309


 11466 00f0 00000000 		.4byte	.LFB73
 11467 00f4 34000000 		.4byte	.LFE73-.LFB73
 11468 00f8 00000000 		.4byte	.LFB90
 11469 00fc 20000000 		.4byte	.LFE90-.LFB90
 11470 0100 00000000 		.4byte	.LFB92
 11471 0104 A8000000 		.4byte	.LFE92-.LFB92
 11472 0108 00000000 		.4byte	.LFB78
 11473 010c C0000000 		.4byte	.LFE78-.LFB78
 11474 0110 00000000 		.4byte	.LFB93
 11475 0114 20000000 		.4byte	.LFE93-.LFB93
 11476 0118 00000000 		.4byte	.LFB94
 11477 011c 28000000 		.4byte	.LFE94-.LFB94
 11478 0120 00000000 		.4byte	.LFB95
 11479 0124 74000000 		.4byte	.LFE95-.LFB95
 11480 0128 00000000 		.4byte	.LFB96
 11481 012c 54000000 		.4byte	.LFE96-.LFB96
 11482 0130 00000000 		.4byte	.LFB97
 11483 0134 20000000 		.4byte	.LFE97-.LFB97
 11484 0138 00000000 		.4byte	.LFB98
 11485 013c 14000000 		.4byte	.LFE98-.LFB98
 11486 0140 00000000 		.4byte	.LFB99
 11487 0144 58000000 		.4byte	.LFE99-.LFB99
 11488 0148 00000000 		.4byte	.LFB100
 11489 014c 10000000 		.4byte	.LFE100-.LFB100
 11490 0150 00000000 		.4byte	.LFB105
 11491 0154 18000000 		.4byte	.LFE105-.LFB105
 11492 0158 00000000 		.4byte	.LFB108
 11493 015c 0C000000 		.4byte	.LFE108-.LFB108
 11494 0160 00000000 		.4byte	.LFB109
 11495 0164 BC000000 		.4byte	.LFE109-.LFB109
 11496 0168 00000000 		.4byte	.LFB110
 11497 016c 88000000 		.4byte	.LFE110-.LFB110
 11498 0170 00000000 		.4byte	.LFB111
 11499 0174 8C000000 		.4byte	.LFE111-.LFB111
 11500 0178 00000000 		.4byte	.LFB112
 11501 017c 20000000 		.4byte	.LFE112-.LFB112
 11502 0180 00000000 		.4byte	.LFB113
 11503 0184 20000000 		.4byte	.LFE113-.LFB113
 11504 0188 00000000 		.4byte	.LFB114
 11505 018c 80000000 		.4byte	.LFE114-.LFB114
 11506 0190 00000000 		.4byte	.LFB115
 11507 0194 A4000000 		.4byte	.LFE115-.LFB115
 11508 0198 00000000 		.4byte	.LFB116
 11509 019c B8000000 		.4byte	.LFE116-.LFB116
 11510 01a0 00000000 		.4byte	.LFB117
 11511 01a4 D8000000 		.4byte	.LFE117-.LFB117
 11512 01a8 00000000 		.4byte	.LFB118
 11513 01ac 9C000000 		.4byte	.LFE118-.LFB118
 11514 01b0 00000000 		.4byte	.LFB119
 11515 01b4 34000000 		.4byte	.LFE119-.LFB119
 11516 01b8 00000000 		.4byte	.LFB120
 11517 01bc 30000000 		.4byte	.LFE120-.LFB120
 11518 01c0 00000000 		.4byte	0
 11519 01c4 00000000 		.4byte	0
 11520              		.section	.debug_ranges,"",%progbits
 11521              	.Ldebug_ranges0:
 11522 0000 0E000000 		.4byte	.LBB41
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 310


 11523 0004 3E000000 		.4byte	.LBE41
 11524 0008 44000000 		.4byte	.LBB43
 11525 000c E0000000 		.4byte	.LBE43
 11526 0010 F2000000 		.4byte	.LBB44
 11527 0014 F6000000 		.4byte	.LBE44
 11528 0018 00000000 		.4byte	0
 11529 001c 00000000 		.4byte	0
 11530 0020 0A000000 		.4byte	.LBB46
 11531 0024 20000000 		.4byte	.LBE46
 11532 0028 24000000 		.4byte	.LBB47
 11533 002c 2C000000 		.4byte	.LBE47
 11534 0030 34000000 		.4byte	.LBB48
 11535 0034 4A000000 		.4byte	.LBE48
 11536 0038 00000000 		.4byte	0
 11537 003c 00000000 		.4byte	0
 11538 0040 00000000 		.4byte	.LFB79
 11539 0044 2C000000 		.4byte	.LFE79
 11540 0048 00000000 		.4byte	.LFB104
 11541 004c 14000000 		.4byte	.LFE104
 11542 0050 00000000 		.4byte	.LFB107
 11543 0054 24000000 		.4byte	.LFE107
 11544 0058 00000000 		.4byte	.LFB106
 11545 005c 12000000 		.4byte	.LFE106
 11546 0060 00000000 		.4byte	.LFB69
 11547 0064 9C000000 		.4byte	.LFE69
 11548 0068 00000000 		.4byte	.LFB102
 11549 006c 58000000 		.4byte	.LFE102
 11550 0070 00000000 		.4byte	.LFB70
 11551 0074 AC000000 		.4byte	.LFE70
 11552 0078 00000000 		.4byte	.LFB103
 11553 007c 44000000 		.4byte	.LFE103
 11554 0080 00000000 		.4byte	.LFB101
 11555 0084 08000000 		.4byte	.LFE101
 11556 0088 00000000 		.4byte	.LFB121
 11557 008c 84000000 		.4byte	.LFE121
 11558 0090 00000000 		.4byte	.LFB68
 11559 0094 62000000 		.4byte	.LFE68
 11560 0098 00000000 		.4byte	.LFB71
 11561 009c BC000000 		.4byte	.LFE71
 11562 00a0 00000000 		.4byte	.LFB74
 11563 00a4 70000000 		.4byte	.LFE74
 11564 00a8 00000000 		.4byte	.LFB75
 11565 00ac 20000000 		.4byte	.LFE75
 11566 00b0 00000000 		.4byte	.LFB76
 11567 00b4 28000000 		.4byte	.LFE76
 11568 00b8 00000000 		.4byte	.LFB77
 11569 00bc E0000000 		.4byte	.LFE77
 11570 00c0 00000000 		.4byte	.LFB80
 11571 00c4 78000000 		.4byte	.LFE80
 11572 00c8 00000000 		.4byte	.LFB81
 11573 00cc 88000000 		.4byte	.LFE81
 11574 00d0 00000000 		.4byte	.LFB82
 11575 00d4 58000000 		.4byte	.LFE82
 11576 00d8 00000000 		.4byte	.LFB83
 11577 00dc 24000000 		.4byte	.LFE83
 11578 00e0 00000000 		.4byte	.LFB84
 11579 00e4 14000000 		.4byte	.LFE84
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 311


 11580 00e8 00000000 		.4byte	.LFB86
 11581 00ec 0C000000 		.4byte	.LFE86
 11582 00f0 00000000 		.4byte	.LFB87
 11583 00f4 0C000000 		.4byte	.LFE87
 11584 00f8 00000000 		.4byte	.LFB88
 11585 00fc 0C000000 		.4byte	.LFE88
 11586 0100 00000000 		.4byte	.LFB89
 11587 0104 14000000 		.4byte	.LFE89
 11588 0108 00000000 		.4byte	.LFB91
 11589 010c 00010000 		.4byte	.LFE91
 11590 0110 00000000 		.4byte	.LFB85
 11591 0114 D8000000 		.4byte	.LFE85
 11592 0118 00000000 		.4byte	.LFB72
 11593 011c 6C000000 		.4byte	.LFE72
 11594 0120 00000000 		.4byte	.LFB73
 11595 0124 34000000 		.4byte	.LFE73
 11596 0128 00000000 		.4byte	.LFB90
 11597 012c 20000000 		.4byte	.LFE90
 11598 0130 00000000 		.4byte	.LFB92
 11599 0134 A8000000 		.4byte	.LFE92
 11600 0138 00000000 		.4byte	.LFB78
 11601 013c C0000000 		.4byte	.LFE78
 11602 0140 00000000 		.4byte	.LFB93
 11603 0144 20000000 		.4byte	.LFE93
 11604 0148 00000000 		.4byte	.LFB94
 11605 014c 28000000 		.4byte	.LFE94
 11606 0150 00000000 		.4byte	.LFB95
 11607 0154 74000000 		.4byte	.LFE95
 11608 0158 00000000 		.4byte	.LFB96
 11609 015c 54000000 		.4byte	.LFE96
 11610 0160 00000000 		.4byte	.LFB97
 11611 0164 20000000 		.4byte	.LFE97
 11612 0168 00000000 		.4byte	.LFB98
 11613 016c 14000000 		.4byte	.LFE98
 11614 0170 00000000 		.4byte	.LFB99
 11615 0174 58000000 		.4byte	.LFE99
 11616 0178 00000000 		.4byte	.LFB100
 11617 017c 10000000 		.4byte	.LFE100
 11618 0180 00000000 		.4byte	.LFB105
 11619 0184 18000000 		.4byte	.LFE105
 11620 0188 00000000 		.4byte	.LFB108
 11621 018c 0C000000 		.4byte	.LFE108
 11622 0190 00000000 		.4byte	.LFB109
 11623 0194 BC000000 		.4byte	.LFE109
 11624 0198 00000000 		.4byte	.LFB110
 11625 019c 88000000 		.4byte	.LFE110
 11626 01a0 00000000 		.4byte	.LFB111
 11627 01a4 8C000000 		.4byte	.LFE111
 11628 01a8 00000000 		.4byte	.LFB112
 11629 01ac 20000000 		.4byte	.LFE112
 11630 01b0 00000000 		.4byte	.LFB113
 11631 01b4 20000000 		.4byte	.LFE113
 11632 01b8 00000000 		.4byte	.LFB114
 11633 01bc 80000000 		.4byte	.LFE114
 11634 01c0 00000000 		.4byte	.LFB115
 11635 01c4 A4000000 		.4byte	.LFE115
 11636 01c8 00000000 		.4byte	.LFB116
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 312


 11637 01cc B8000000 		.4byte	.LFE116
 11638 01d0 00000000 		.4byte	.LFB117
 11639 01d4 D8000000 		.4byte	.LFE117
 11640 01d8 00000000 		.4byte	.LFB118
 11641 01dc 9C000000 		.4byte	.LFE118
 11642 01e0 00000000 		.4byte	.LFB119
 11643 01e4 34000000 		.4byte	.LFE119
 11644 01e8 00000000 		.4byte	.LFB120
 11645 01ec 30000000 		.4byte	.LFE120
 11646 01f0 00000000 		.4byte	0
 11647 01f4 00000000 		.4byte	0
 11648              		.section	.debug_line,"",%progbits
 11649              	.Ldebug_line0:
 11650 0000 E70A0000 		.section	.debug_str,"MS",%progbits,1
 11650      0200AB02 
 11650      00000201 
 11650      FB0E0D00 
 11650      01010101 
 11651              	.LASF57:
 11652 0000 65537573 		.ascii	"eSuspended\000"
 11652      70656E64 
 11652      656400
 11653              	.LASF110:
 11654 000b 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11654      426C6F63 
 11654      6B496E64 
 11654      6566696E 
 11654      6974656C 
 11655              	.LASF86:
 11656 0021 75635265 		.ascii	"ucReturn\000"
 11656      7475726E 
 11656      00
 11657              	.LASF78:
 11658 002a 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11658      6967696E 
 11658      616C4241 
 11658      53455052 
 11658      4900
 11659              	.LASF138:
 11660 003c 78546963 		.ascii	"xTicks\000"
 11660      6B7300
 11661              	.LASF161:
 11662 0043 76546173 		.ascii	"vTaskSuspend\000"
 11662      6B537573 
 11662      70656E64 
 11662      00
 11663              	.LASF4:
 11664 0050 73697A65 		.ascii	"size_t\000"
 11664      5F7400
 11665              	.LASF40:
 11666 0057 4D696E69 		.ascii	"MiniListItem_t\000"
 11666      4C697374 
 11666      4974656D 
 11666      5F7400
 11667              	.LASF70:
 11668 0066 54696D65 		.ascii	"TimeOut_t\000"
 11668      4F75745F 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 313


 11668      7400
 11669              	.LASF220:
 11670 0070 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11670      7272656E 
 11670      744E756D 
 11670      6265724F 
 11670      66546173 
 11671              	.LASF201:
 11672 0087 756C5661 		.ascii	"ulValue\000"
 11672      6C756500 
 11673              	.LASF189:
 11674 008f 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11674      736B5265 
 11674      73657445 
 11674      76656E74 
 11674      4974656D 
 11675              	.LASF225:
 11676 00a9 78596965 		.ascii	"xYieldPending\000"
 11676      6C645065 
 11676      6E64696E 
 11676      6700
 11677              	.LASF5:
 11678 00b7 5F5F7569 		.ascii	"__uint8_t\000"
 11678      6E74385F 
 11678      7400
 11679              	.LASF72:
 11680 00c1 70764261 		.ascii	"pvBaseAddress\000"
 11680      73654164 
 11680      64726573 
 11680      7300
 11681              	.LASF219:
 11682 00cf 78537573 		.ascii	"xSuspendedTaskList\000"
 11682      70656E64 
 11682      65645461 
 11682      736B4C69 
 11682      737400
 11683              	.LASF152:
 11684 00e2 76546173 		.ascii	"vTaskDelay\000"
 11684      6B44656C 
 11684      617900
 11685              	.LASF208:
 11686 00ed 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11686      6B4E6F74 
 11686      69667953 
 11686      74617465 
 11686      436C6561 
 11687              	.LASF79:
 11688 0103 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11688      77424153 
 11688      45505249 
 11688      00
 11689              	.LASF56:
 11690 0110 65426C6F 		.ascii	"eBlocked\000"
 11690      636B6564 
 11690      00
 11691              	.LASF111:
 11692 0119 7854696D 		.ascii	"xTimeToWake\000"
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 314


 11692      65546F57 
 11692      616B6500 
 11693              	.LASF146:
 11694 0125 78416C72 		.ascii	"xAlreadyYielded\000"
 11694      65616479 
 11694      5969656C 
 11694      64656400 
 11695              	.LASF171:
 11696 0135 70785469 		.ascii	"pxTimeOut\000"
 11696      6D654F75 
 11696      7400
 11697              	.LASF37:
 11698 013f 784C6973 		.ascii	"xListEnd\000"
 11698      74456E64 
 11698      00
 11699              	.LASF231:
 11700 0148 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11700      52784275 
 11700      66666572 
 11700      00
 11701              	.LASF67:
 11702 0155 7854494D 		.ascii	"xTIME_OUT\000"
 11702      455F4F55 
 11702      5400
 11703              	.LASF39:
 11704 015f 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11704      495F4C49 
 11704      53545F49 
 11704      54454D00 
 11705              	.LASF183:
 11706 016f 70784D75 		.ascii	"pxMutexHolderTCB\000"
 11706      74657848 
 11706      6F6C6465 
 11706      72544342 
 11706      00
 11707              	.LASF1:
 11708 0180 6C6F6E67 		.ascii	"long long int\000"
 11708      206C6F6E 
 11708      6720696E 
 11708      7400
 11709              	.LASF3:
 11710 018e 7369676E 		.ascii	"signed char\000"
 11710      65642063 
 11710      68617200 
 11711              	.LASF177:
 11712 019a 76546173 		.ascii	"vTaskMissedYield\000"
 11712      6B4D6973 
 11712      73656459 
 11712      69656C64 
 11712      00
 11713              	.LASF129:
 11714 01ab 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11714      696F7269 
 11714      74795573 
 11714      65644F6E 
 11714      456E7472 
 11715              	.LASF109:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 315


 11716 01c1 78546963 		.ascii	"xTicksToWait\000"
 11716      6B73546F 
 11716      57616974 
 11716      00
 11717              	.LASF228:
 11718 01ce 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11718      74546173 
 11718      6B556E62 
 11718      6C6F636B 
 11718      54696D65 
 11719              	.LASF193:
 11720 01e3 78436C65 		.ascii	"xClearCountOnExit\000"
 11720      6172436F 
 11720      756E744F 
 11720      6E457869 
 11720      7400
 11721              	.LASF14:
 11722 01f5 6C6F6E67 		.ascii	"long long unsigned int\000"
 11722      206C6F6E 
 11722      6720756E 
 11722      7369676E 
 11722      65642069 
 11723              	.LASF45:
 11724 020c 78537461 		.ascii	"xStateListItem\000"
 11724      74654C69 
 11724      73744974 
 11724      656D00
 11725              	.LASF202:
 11726 021b 65416374 		.ascii	"eAction\000"
 11726      696F6E00 
 11727              	.LASF143:
 11728 0223 78537769 		.ascii	"xSwitchRequired\000"
 11728      74636852 
 11728      65717569 
 11728      72656400 
 11729              	.LASF11:
 11730 0233 6C6F6E67 		.ascii	"long int\000"
 11730      20696E74 
 11730      00
 11731              	.LASF43:
 11732 023c 74736B54 		.ascii	"tskTaskControlBlock\000"
 11732      61736B43 
 11732      6F6E7472 
 11732      6F6C426C 
 11732      6F636B00 
 11733              	.LASF217:
 11734 0250 78546173 		.ascii	"xTasksWaitingTermination\000"
 11734      6B735761 
 11734      6974696E 
 11734      67546572 
 11734      6D696E61 
 11735              	.LASF102:
 11736 0269 70784E65 		.ascii	"pxNewTCB\000"
 11736      77544342 
 11736      00
 11737              	.LASF62:
 11738 0272 65536574 		.ascii	"eSetBits\000"
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 316


 11738      42697473 
 11738      00
 11739              	.LASF210:
 11740 027b 756C4269 		.ascii	"ulBitsToClear\000"
 11740      7473546F 
 11740      436C6561 
 11740      7200
 11741              	.LASF204:
 11742 0289 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11742      6967696E 
 11742      616C4E6F 
 11742      74696679 
 11742      53746174 
 11743              	.LASF139:
 11744 029f 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11744      6B476574 
 11744      5469636B 
 11744      436F756E 
 11744      7446726F 
 11745              	.LASF42:
 11746 02b8 5461736B 		.ascii	"TaskHandle_t\000"
 11746      48616E64 
 11746      6C655F74 
 11746      00
 11747              	.LASF27:
 11748 02c5 5469636B 		.ascii	"TickType_t\000"
 11748      54797065 
 11748      5F7400
 11749              	.LASF7:
 11750 02d0 73686F72 		.ascii	"short int\000"
 11750      7420696E 
 11750      7400
 11751              	.LASF75:
 11752 02da 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11752      72795265 
 11752      67696F6E 
 11752      5F7400
 11753              	.LASF142:
 11754 02e9 78546173 		.ascii	"xTaskIncrementTick\000"
 11754      6B496E63 
 11754      72656D65 
 11754      6E745469 
 11754      636B00
 11755              	.LASF18:
 11756 02fc 75696E74 		.ascii	"uint16_t\000"
 11756      31365F74 
 11756      00
 11757              	.LASF179:
 11758 0305 70756345 		.ascii	"pucEndOfStack\000"
 11758      6E644F66 
 11758      53746163 
 11758      6B00
 11759              	.LASF25:
 11760 0313 42617365 		.ascii	"BaseType_t\000"
 11760      54797065 
 11760      5F7400
 11761              	.LASF117:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 317


 11762 031e 65526574 		.ascii	"eReturn\000"
 11762      75726E00 
 11763              	.LASF239:
 11764 0326 764C6973 		.ascii	"vListInsertEnd\000"
 11764      74496E73 
 11764      65727445 
 11764      6E6400
 11765              	.LASF203:
 11766 0335 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11766      72657669 
 11766      6F75734E 
 11766      6F746966 
 11766      69636174 
 11767              	.LASF118:
 11768 0352 70785374 		.ascii	"pxStateList\000"
 11768      6174654C 
 11768      69737400 
 11769              	.LASF94:
 11770 035e 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11770      65736574 
 11770      4E657874 
 11770      5461736B 
 11770      556E626C 
 11771              	.LASF8:
 11772 037a 5F5F7569 		.ascii	"__uint16_t\000"
 11772      6E743136 
 11772      5F7400
 11773              	.LASF113:
 11774 0385 75735374 		.ascii	"usStackDepth\000"
 11774      61636B44 
 11774      65707468 
 11774      00
 11775              	.LASF141:
 11776 0392 78546173 		.ascii	"xTaskToQuery\000"
 11776      6B546F51 
 11776      75657279 
 11776      00
 11777              	.LASF126:
 11778 039f 76546173 		.ascii	"vTaskPrioritySet\000"
 11778      6B507269 
 11778      6F726974 
 11778      79536574 
 11778      00
 11779              	.LASF68:
 11780 03b0 784F7665 		.ascii	"xOverflowCount\000"
 11780      72666C6F 
 11780      77436F75 
 11780      6E7400
 11781              	.LASF135:
 11782 03bf 76546173 		.ascii	"vTaskStartScheduler\000"
 11782      6B537461 
 11782      72745363 
 11782      68656475 
 11782      6C657200 
 11783              	.LASF243:
 11784 03d3 7076506F 		.ascii	"pvPortMalloc\000"
 11784      72744D61 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 318


 11784      6C6C6F63 
 11784      00
 11785              	.LASF205:
 11786 03e0 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11786      6B47656E 
 11786      65726963 
 11786      4E6F7469 
 11786      66794672 
 11787              	.LASF163:
 11788 03fa 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11788      6B506C61 
 11788      63654F6E 
 11788      4576656E 
 11788      744C6973 
 11789              	.LASF53:
 11790 0410 75634E6F 		.ascii	"ucNotifyState\000"
 11790      74696679 
 11790      53746174 
 11790      6500
 11791              	.LASF99:
 11792 041e 756C5374 		.ascii	"ulStackDepth\000"
 11792      61636B44 
 11792      65707468 
 11792      00
 11793              	.LASF12:
 11794 042b 5F5F7569 		.ascii	"__uint32_t\000"
 11794      6E743332 
 11794      5F7400
 11795              	.LASF230:
 11796 0436 75785363 		.ascii	"uxSchedulerSuspended\000"
 11796      68656475 
 11796      6C657253 
 11796      75737065 
 11796      6E646564 
 11797              	.LASF133:
 11798 044b 78546173 		.ascii	"xTaskResumeFromISR\000"
 11798      6B526573 
 11798      756D6546 
 11798      726F6D49 
 11798      535200
 11799              	.LASF0:
 11800 045e 756E7369 		.ascii	"unsigned int\000"
 11800      676E6564 
 11800      20696E74 
 11800      00
 11801              	.LASF87:
 11802 046b 78526574 		.ascii	"xReturn\000"
 11802      75726E00 
 11803              	.LASF112:
 11804 0473 78436F6E 		.ascii	"xConstTickCount\000"
 11804      73745469 
 11804      636B436F 
 11804      756E7400 
 11805              	.LASF154:
 11806 0483 78546173 		.ascii	"xTaskCatchUpTicks\000"
 11806      6B436174 
 11806      63685570 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 319


 11806      5469636B 
 11806      7300
 11807              	.LASF165:
 11808 0495 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11808      6B506C61 
 11808      63654F6E 
 11808      556E6F72 
 11808      64657265 
 11809              	.LASF101:
 11810 04b4 70784372 		.ascii	"pxCreatedTask\000"
 11810      65617465 
 11810      64546173 
 11810      6B00
 11811              	.LASF35:
 11812 04c2 75784E75 		.ascii	"uxNumberOfItems\000"
 11812      6D626572 
 11812      4F664974 
 11812      656D7300 
 11813              	.LASF13:
 11814 04d2 6C6F6E67 		.ascii	"long unsigned int\000"
 11814      20756E73 
 11814      69676E65 
 11814      6420696E 
 11814      7400
 11815              	.LASF55:
 11816 04e4 65526561 		.ascii	"eReady\000"
 11816      647900
 11817              	.LASF200:
 11818 04eb 78546173 		.ascii	"xTaskToNotify\000"
 11818      6B546F4E 
 11818      6F746966 
 11818      7900
 11819              	.LASF44:
 11820 04f9 7078546F 		.ascii	"pxTopOfStack\000"
 11820      704F6653 
 11820      7461636B 
 11820      00
 11821              	.LASF100:
 11822 0506 70765061 		.ascii	"pvParameters\000"
 11822      72616D65 
 11822      74657273 
 11822      00
 11823              	.LASF206:
 11824 0513 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11824      67686572 
 11824      5072696F 
 11824      72697479 
 11824      5461736B 
 11825              	.LASF76:
 11826 052d 74736B54 		.ascii	"tskTCB\000"
 11826      434200
 11827              	.LASF246:
 11828 0534 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 11828      6C696361 
 11828      74696F6E 
 11828      53746163 
 11828      6B4F7665 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 320


 11829              	.LASF160:
 11830 0552 7078436F 		.ascii	"pxConstList\000"
 11830      6E73744C 
 11830      69737400 
 11831              	.LASF9:
 11832 055e 73686F72 		.ascii	"short unsigned int\000"
 11832      7420756E 
 11832      7369676E 
 11832      65642069 
 11832      6E7400
 11833              	.LASF24:
 11834 0571 53746163 		.ascii	"StackType_t\000"
 11834      6B547970 
 11834      655F7400 
 11835              	.LASF88:
 11836 057d 70785443 		.ascii	"pxTCB\000"
 11836      4200
 11837              	.LASF130:
 11838 0583 78596965 		.ascii	"xYieldRequired\000"
 11838      6C645265 
 11838      71756972 
 11838      656400
 11839              	.LASF196:
 11840 0592 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11840      7473546F 
 11840      436C6561 
 11840      724F6E45 
 11840      6E747279 
 11841              	.LASF224:
 11842 05a7 7850656E 		.ascii	"xPendedTicks\000"
 11842      64656454 
 11842      69636B73 
 11842      00
 11843              	.LASF105:
 11844 05b4 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11844      64644E65 
 11844      77546173 
 11844      6B546F52 
 11844      65616479 
 11845              	.LASF131:
 11846 05cd 76546173 		.ascii	"vTaskResume\000"
 11846      6B526573 
 11846      756D6500 
 11847              	.LASF119:
 11848 05d9 70784465 		.ascii	"pxDelayedList\000"
 11848      6C617965 
 11848      644C6973 
 11848      7400
 11849              	.LASF232:
 11850 05e7 70784375 		.ascii	"pxCurrentTCB\000"
 11850      7272656E 
 11850      74544342 
 11850      00
 11851              	.LASF122:
 11852 05f4 75785265 		.ascii	"uxReturn\000"
 11852      7475726E 
 11852      00
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 321


 11853              	.LASF214:
 11854 05fd 70784465 		.ascii	"pxDelayedTaskList\000"
 11854      6C617965 
 11854      64546173 
 11854      6B4C6973 
 11854      7400
 11855              	.LASF137:
 11856 060f 78546173 		.ascii	"xTaskGetTickCount\000"
 11856      6B476574 
 11856      5469636B 
 11856      436F756E 
 11856      7400
 11857              	.LASF164:
 11858 0621 70784576 		.ascii	"pxEventList\000"
 11858      656E744C 
 11858      69737400 
 11859              	.LASF81:
 11860 062d 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11860      74526169 
 11860      73654241 
 11860      53455052 
 11860      4900
 11861              	.LASF41:
 11862 063f 4C697374 		.ascii	"List_t\000"
 11862      5F7400
 11863              	.LASF209:
 11864 0646 756C5461 		.ascii	"ulTaskNotifyValueClear\000"
 11864      736B4E6F 
 11864      74696679 
 11864      56616C75 
 11864      65436C65 
 11865              	.LASF92:
 11866 065d 70756353 		.ascii	"pucStackByte\000"
 11866      7461636B 
 11866      42797465 
 11866      00
 11867              	.LASF95:
 11868 066a 70727644 		.ascii	"prvDeleteTCB\000"
 11868      656C6574 
 11868      65544342 
 11868      00
 11869              	.LASF107:
 11870 0677 70727649 		.ascii	"prvIdleTask\000"
 11870      646C6554 
 11870      61736B00 
 11871              	.LASF175:
 11872 0683 78456C61 		.ascii	"xElapsedTime\000"
 11872      70736564 
 11872      54696D65 
 11872      00
 11873              	.LASF156:
 11874 0690 76546173 		.ascii	"vTaskSwitchContext\000"
 11874      6B537769 
 11874      74636843 
 11874      6F6E7465 
 11874      787400
 11875              	.LASF63:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 322


 11876 06a3 65496E63 		.ascii	"eIncrement\000"
 11876      72656D65 
 11876      6E7400
 11877              	.LASF182:
 11878 06ae 70784D75 		.ascii	"pxMutexHolder\000"
 11878      74657848 
 11878      6F6C6465 
 11878      7200
 11879              	.LASF48:
 11880 06bc 70785374 		.ascii	"pxStack\000"
 11880      61636B00 
 11881              	.LASF235:
 11882 06c4 764C6973 		.ascii	"vListInitialiseItem\000"
 11882      74496E69 
 11882      7469616C 
 11882      69736549 
 11882      74656D00 
 11883              	.LASF215:
 11884 06d8 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11884      6572666C 
 11884      6F774465 
 11884      6C617965 
 11884      64546173 
 11885              	.LASF15:
 11886 06f2 73697A65 		.ascii	"sizetype\000"
 11886      74797065 
 11886      00
 11887              	.LASF186:
 11888 06fb 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11888      67686573 
 11888      74507269 
 11888      6F726974 
 11888      79576169 
 11889              	.LASF2:
 11890 0718 6C6F6E67 		.ascii	"long double\000"
 11890      20646F75 
 11890      626C6500 
 11891              	.LASF103:
 11892 0724 78526567 		.ascii	"xRegions\000"
 11892      696F6E73 
 11892      00
 11893              	.LASF207:
 11894 072d 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11894      6B4E6F74 
 11894      69667947 
 11894      69766546 
 11894      726F6D49 
 11895              	.LASF216:
 11896 0744 7850656E 		.ascii	"xPendingReadyList\000"
 11896      64696E67 
 11896      52656164 
 11896      794C6973 
 11896      7400
 11897              	.LASF115:
 11898 0756 78546173 		.ascii	"xTaskCreate\000"
 11898      6B437265 
 11898      61746500 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 323


 11899              	.LASF162:
 11900 0762 78546173 		.ascii	"xTaskToSuspend\000"
 11900      6B546F53 
 11900      75737065 
 11900      6E6400
 11901              	.LASF180:
 11902 0771 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11902      6B476574 
 11902      43757272 
 11902      656E7454 
 11902      61736B48 
 11903              	.LASF97:
 11904 078b 70785461 		.ascii	"pxTaskCode\000"
 11904      736B436F 
 11904      646500
 11905              	.LASF244:
 11906 0796 78506F72 		.ascii	"xPortStartScheduler\000"
 11906      74537461 
 11906      72745363 
 11906      68656475 
 11906      6C657200 
 11907              	.LASF82:
 11908 07aa 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11908      72745261 
 11908      69736542 
 11908      41534550 
 11908      524900
 11909              	.LASF46:
 11910 07bd 78457665 		.ascii	"xEventListItem\000"
 11910      6E744C69 
 11910      73744974 
 11910      656D00
 11911              	.LASF93:
 11912 07cc 756C436F 		.ascii	"ulCount\000"
 11912      756E7400 
 11913              	.LASF64:
 11914 07d4 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11914      56616C75 
 11914      65576974 
 11914      684F7665 
 11914      72777269 
 11915              	.LASF245:
 11916 07eb 76506F72 		.ascii	"vPortEndScheduler\000"
 11916      74456E64 
 11916      53636865 
 11916      64756C65 
 11916      7200
 11917              	.LASF155:
 11918 07fd 78546963 		.ascii	"xTicksToCatchUp\000"
 11918      6B73546F 
 11918      43617463 
 11918      68557000 
 11919              	.LASF222:
 11920 080d 7578546F 		.ascii	"uxTopReadyPriority\000"
 11920      70526561 
 11920      64795072 
 11920      696F7269 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 324


 11920      747900
 11921              	.LASF149:
 11922 0820 70785072 		.ascii	"pxPreviousWakeTime\000"
 11922      6576696F 
 11922      75735761 
 11922      6B655469 
 11922      6D6500
 11923              	.LASF73:
 11924 0833 756C4C65 		.ascii	"ulLengthInBytes\000"
 11924      6E677468 
 11924      496E4279 
 11924      74657300 
 11925              	.LASF80:
 11926 0843 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11926      74536574 
 11926      42415345 
 11926      50524900 
 11927              	.LASF38:
 11928 0853 4C697374 		.ascii	"ListItem_t\000"
 11928      4974656D 
 11928      5F7400
 11929              	.LASF185:
 11930 085e 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11930      6B507269 
 11930      6F726974 
 11930      79446973 
 11930      696E6865 
 11931              	.LASF159:
 11932 0882 7578546F 		.ascii	"uxTopPriority\000"
 11932      70507269 
 11932      6F726974 
 11932      7900
 11933              	.LASF198:
 11934 0890 70756C4E 		.ascii	"pulNotificationValue\000"
 11934      6F746966 
 11934      69636174 
 11934      696F6E56 
 11934      616C7565 
 11935              	.LASF30:
 11936 08a5 70785072 		.ascii	"pxPrevious\000"
 11936      6576696F 
 11936      757300
 11937              	.LASF114:
 11938 08b0 78546173 		.ascii	"xTaskToDelete\000"
 11938      6B546F44 
 11938      656C6574 
 11938      6500
 11939              	.LASF127:
 11940 08be 75784E65 		.ascii	"uxNewPriority\000"
 11940      77507269 
 11940      6F726974 
 11940      7900
 11941              	.LASF21:
 11942 08cc 666C6F61 		.ascii	"float\000"
 11942      7400
 11943              	.LASF147:
 11944 08d2 7850656E 		.ascii	"xPendedCounts\000"
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 325


 11944      64656443 
 11944      6F756E74 
 11944      7300
 11945              	.LASF36:
 11946 08e0 7078496E 		.ascii	"pxIndex\000"
 11946      64657800 
 11947              	.LASF32:
 11948 08e8 7076436F 		.ascii	"pvContainer\000"
 11948      6E746169 
 11948      6E657200 
 11949              	.LASF58:
 11950 08f4 6544656C 		.ascii	"eDeleted\000"
 11950      65746564 
 11950      00
 11951              	.LASF116:
 11952 08fd 65546173 		.ascii	"eTaskGetState\000"
 11952      6B476574 
 11952      53746174 
 11952      6500
 11953              	.LASF71:
 11954 090b 784D454D 		.ascii	"xMEMORY_REGION\000"
 11954      4F52595F 
 11954      52454749 
 11954      4F4E00
 11955              	.LASF148:
 11956 091a 76546173 		.ascii	"vTaskDelayUntil\000"
 11956      6B44656C 
 11956      6179556E 
 11956      74696C00 
 11957              	.LASF90:
 11958 092a 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11958      61736B43 
 11958      6865636B 
 11958      46726565 
 11958      53746163 
 11959              	.LASF19:
 11960 0945 696E7433 		.ascii	"int32_t\000"
 11960      325F7400 
 11961              	.LASF6:
 11962 094d 756E7369 		.ascii	"unsigned char\000"
 11962      676E6564 
 11962      20636861 
 11962      7200
 11963              	.LASF52:
 11964 095b 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11964      74696669 
 11964      65645661 
 11964      6C756500 
 11965              	.LASF128:
 11966 096b 75784375 		.ascii	"uxCurrentBasePriority\000"
 11966      7272656E 
 11966      74426173 
 11966      65507269 
 11966      6F726974 
 11967              	.LASF77:
 11968 0981 5443425F 		.ascii	"TCB_t\000"
 11968      7400
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 326


 11969              	.LASF167:
 11970 0987 7078556E 		.ascii	"pxUnblockedTCB\000"
 11970      626C6F63 
 11970      6B656454 
 11970      434200
 11971              	.LASF85:
 11972 0996 756C4269 		.ascii	"ulBitmap\000"
 11972      746D6170 
 11972      00
 11973              	.LASF120:
 11974 099f 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 11974      6572666C 
 11974      6F776564 
 11974      44656C61 
 11974      7965644C 
 11975              	.LASF223:
 11976 09b7 78536368 		.ascii	"xSchedulerRunning\000"
 11976      6564756C 
 11976      65725275 
 11976      6E6E696E 
 11976      6700
 11977              	.LASF136:
 11978 09c9 76546173 		.ascii	"vTaskEndScheduler\000"
 11978      6B456E64 
 11978      53636865 
 11978      64756C65 
 11978      7200
 11979              	.LASF132:
 11980 09db 78546173 		.ascii	"xTaskToResume\000"
 11980      6B546F52 
 11980      6573756D 
 11980      6500
 11981              	.LASF145:
 11982 09e9 78546173 		.ascii	"xTaskResumeAll\000"
 11982      6B526573 
 11982      756D6541 
 11982      6C6C00
 11983              	.LASF23:
 11984 09f8 5461736B 		.ascii	"TaskFunction_t\000"
 11984      46756E63 
 11984      74696F6E 
 11984      5F7400
 11985              	.LASF34:
 11986 0a07 784C4953 		.ascii	"xLIST\000"
 11986      5400
 11987              	.LASF123:
 11988 0a0d 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11988      736B5072 
 11988      696F7269 
 11988      74794765 
 11988      7446726F 
 11989              	.LASF247:
 11990 0a26 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11990      43313120 
 11990      352E342E 
 11990      31203230 
 11990      31363036 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 327


 11991 0a59 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11991      20726576 
 11991      6973696F 
 11991      6E203233 
 11991      37373135 
 11992 0a8c 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11992      66756E63 
 11992      74696F6E 
 11992      2D736563 
 11992      74696F6E 
 11993              	.LASF50:
 11994 0ab4 75784261 		.ascii	"uxBasePriority\000"
 11994      73655072 
 11994      696F7269 
 11994      747900
 11995              	.LASF188:
 11996 0ac3 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11996      6C794F6E 
 11996      654D7574 
 11996      65784865 
 11996      6C6400
 11997              	.LASF96:
 11998 0ad6 70727649 		.ascii	"prvInitialiseNewTask\000"
 11998      6E697469 
 11998      616C6973 
 11998      654E6577 
 11998      5461736B 
 11999              	.LASF233:
 12000 0aeb 76506F72 		.ascii	"vPortFree\000"
 12000      74467265 
 12000      6500
 12001              	.LASF134:
 12002 0af5 75785361 		.ascii	"uxSavedInterruptStatus\000"
 12002      76656449 
 12002      6E746572 
 12002      72757074 
 12002      53746174 
 12003              	.LASF151:
 12004 0b0c 7853686F 		.ascii	"xShouldDelay\000"
 12004      756C6444 
 12004      656C6179 
 12004      00
 12005              	.LASF249:
 12006 0b19 433A5C55 		.ascii	"C:\\Users\\Reza\\Documents\\PSoC Creator\\CAN_Appli"
 12006      73657273 
 12006      5C52657A 
 12006      615C446F 
 12006      63756D65 
 12007 0b47 63617469 		.ascii	"cation_01\\Design01_Tx.cydsn\000"
 12007      6F6E5F30 
 12007      315C4465 
 12007      7369676E 
 12007      30315F54 
 12008              	.LASF54:
 12009 0b63 6552756E 		.ascii	"eRunning\000"
 12009      6E696E67 
 12009      00
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 328


 12010              	.LASF106:
 12011 0b6c 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12011      6865636B 
 12011      5461736B 
 12011      73576169 
 12011      74696E67 
 12012              	.LASF91:
 12013 0b8c 78546173 		.ascii	"xTask\000"
 12013      6B00
 12014              	.LASF74:
 12015 0b92 756C5061 		.ascii	"ulParameters\000"
 12015      72616D65 
 12015      74657273 
 12015      00
 12016              	.LASF242:
 12017 0b9f 764C6973 		.ascii	"vListInsert\000"
 12017      74496E73 
 12017      65727400 
 12018              	.LASF176:
 12019 0bab 76546173 		.ascii	"vTaskSuspendAll\000"
 12019      6B537573 
 12019      70656E64 
 12019      416C6C00 
 12020              	.LASF51:
 12021 0bbb 75784D75 		.ascii	"uxMutexesHeld\000"
 12021      74657865 
 12021      7348656C 
 12021      6400
 12022              	.LASF84:
 12023 0bc9 756C4E65 		.ascii	"ulNewMaskValue\000"
 12023      774D6173 
 12023      6B56616C 
 12023      756500
 12024              	.LASF108:
 12025 0bd8 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 12025      64644375 
 12025      7272656E 
 12025      74546173 
 12025      6B546F44 
 12026              	.LASF16:
 12027 0bf7 63686172 		.ascii	"char\000"
 12027      00
 12028              	.LASF140:
 12029 0bfc 70635461 		.ascii	"pcTaskGetName\000"
 12029      736B4765 
 12029      744E616D 
 12029      6500
 12030              	.LASF240:
 12031 0c0a 76506F72 		.ascii	"vPortExitCritical\000"
 12031      74457869 
 12031      74437269 
 12031      74696361 
 12031      6C00
 12032              	.LASF166:
 12033 0c1c 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12033      6B52656D 
 12033      6F766546 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 329


 12033      726F6D45 
 12033      76656E74 
 12034              	.LASF191:
 12035 0c35 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12035      736B496E 
 12035      6372656D 
 12035      656E744D 
 12035      75746578 
 12036              	.LASF218:
 12037 0c53 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 12037      6C657465 
 12037      64546173 
 12037      6B735761 
 12037      6974696E 
 12038              	.LASF125:
 12039 0c70 76546173 		.ascii	"vTaskDelete\000"
 12039      6B44656C 
 12039      65746500 
 12040              	.LASF124:
 12041 0c7c 75785361 		.ascii	"uxSavedInterruptState\000"
 12041      76656449 
 12041      6E746572 
 12041      72757074 
 12041      53746174 
 12042              	.LASF10:
 12043 0c92 5F5F696E 		.ascii	"__int32_t\000"
 12043      7433325F 
 12043      7400
 12044              	.LASF173:
 12045 0c9c 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 12045      6B436865 
 12045      636B466F 
 12045      7254696D 
 12045      654F7574 
 12046              	.LASF241:
 12047 0cb1 75784C69 		.ascii	"uxListRemove\000"
 12047      73745265 
 12047      6D6F7665 
 12047      00
 12048              	.LASF169:
 12049 0cbe 70784576 		.ascii	"pxEventListItem\000"
 12049      656E744C 
 12049      69737449 
 12049      74656D00 
 12050              	.LASF227:
 12051 0cce 75785461 		.ascii	"uxTaskNumber\000"
 12051      736B4E75 
 12051      6D626572 
 12051      00
 12052              	.LASF144:
 12053 0cdb 70785465 		.ascii	"pxTemp\000"
 12053      6D7000
 12054              	.LASF181:
 12055 0ce2 78546173 		.ascii	"xTaskPriorityInherit\000"
 12055      6B507269 
 12055      6F726974 
 12055      79496E68 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 330


 12055      65726974 
 12056              	.LASF229:
 12057 0cf7 7849646C 		.ascii	"xIdleTaskHandle\000"
 12057      65546173 
 12057      6B48616E 
 12057      646C6500 
 12058              	.LASF33:
 12059 0d07 784C4953 		.ascii	"xLIST_ITEM\000"
 12059      545F4954 
 12059      454D00
 12060              	.LASF211:
 12061 0d12 70785265 		.ascii	"pxReadyTasksLists\000"
 12061      61647954 
 12061      61736B73 
 12061      4C697374 
 12061      7300
 12062              	.LASF190:
 12063 0d24 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 12063      736B4765 
 12063      744E756D 
 12063      6265724F 
 12063      66546173 
 12064              	.LASF158:
 12065 0d3b 756C4368 		.ascii	"ulCheckValue\000"
 12065      65636B56 
 12065      616C7565 
 12065      00
 12066              	.LASF238:
 12067 0d48 76506F72 		.ascii	"vPortEnterCritical\000"
 12067      74456E74 
 12067      65724372 
 12067      69746963 
 12067      616C00
 12068              	.LASF212:
 12069 0d5b 7844656C 		.ascii	"xDelayedTaskList1\000"
 12069      61796564 
 12069      5461736B 
 12069      4C697374 
 12069      3100
 12070              	.LASF213:
 12071 0d6d 7844656C 		.ascii	"xDelayedTaskList2\000"
 12071      61796564 
 12071      5461736B 
 12071      4C697374 
 12071      3200
 12072              	.LASF226:
 12073 0d7f 784E756D 		.ascii	"xNumOfOverflows\000"
 12073      4F664F76 
 12073      6572666C 
 12073      6F777300 
 12074              	.LASF199:
 12075 0d8f 78546173 		.ascii	"xTaskGenericNotify\000"
 12075      6B47656E 
 12075      65726963 
 12075      4E6F7469 
 12075      667900
 12076              	.LASF221:
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 331


 12077 0da2 78546963 		.ascii	"xTickCount\000"
 12077      6B436F75 
 12077      6E7400
 12078              	.LASF172:
 12079 0dad 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 12079      6B496E74 
 12079      65726E61 
 12079      6C536574 
 12079      54696D65 
 12080              	.LASF31:
 12081 0dca 70764F77 		.ascii	"pvOwner\000"
 12081      6E657200 
 12082              	.LASF28:
 12083 0dd2 78497465 		.ascii	"xItemValue\000"
 12083      6D56616C 
 12083      756500
 12084              	.LASF234:
 12085 0ddd 6D656D73 		.ascii	"memset\000"
 12085      657400
 12086              	.LASF83:
 12087 0de4 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12087      7274436F 
 12087      756E744C 
 12087      65616469 
 12087      6E675A65 
 12088              	.LASF153:
 12089 0dfc 78546963 		.ascii	"xTicksToDelay\000"
 12089      6B73546F 
 12089      44656C61 
 12089      7900
 12090              	.LASF236:
 12091 0e0a 7078506F 		.ascii	"pxPortInitialiseStack\000"
 12091      7274496E 
 12091      69746961 
 12091      6C697365 
 12091      53746163 
 12092              	.LASF150:
 12093 0e20 7854696D 		.ascii	"xTimeIncrement\000"
 12093      65496E63 
 12093      72656D65 
 12093      6E7400
 12094              	.LASF65:
 12095 0e2f 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 12095      56616C75 
 12095      65576974 
 12095      686F7574 
 12095      4F766572 
 12096              	.LASF59:
 12097 0e49 65496E76 		.ascii	"eInvalid\000"
 12097      616C6964 
 12097      00
 12098              	.LASF49:
 12099 0e52 70635461 		.ascii	"pcTaskName\000"
 12099      736B4E61 
 12099      6D6500
 12100              	.LASF17:
 12101 0e5d 75696E74 		.ascii	"uint8_t\000"
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 332


 12101      385F7400 
 12102              	.LASF174:
 12103 0e65 70785469 		.ascii	"pxTicksToWait\000"
 12103      636B7354 
 12103      6F576169 
 12103      7400
 12104              	.LASF89:
 12105 0e73 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 12105      61736B49 
 12105      73546173 
 12105      6B537573 
 12105      70656E64 
 12106              	.LASF61:
 12107 0e8a 654E6F41 		.ascii	"eNoAction\000"
 12107      6374696F 
 12107      6E00
 12108              	.LASF29:
 12109 0e94 70784E65 		.ascii	"pxNext\000"
 12109      787400
 12110              	.LASF60:
 12111 0e9b 65546173 		.ascii	"eTaskState\000"
 12111      6B537461 
 12111      746500
 12112              	.LASF237:
 12113 0ea6 764C6973 		.ascii	"vListInitialise\000"
 12113      74496E69 
 12113      7469616C 
 12113      69736500 
 12114              	.LASF66:
 12115 0eb6 654E6F74 		.ascii	"eNotifyAction\000"
 12115      69667941 
 12115      6374696F 
 12115      6E00
 12116              	.LASF248:
 12117 0ec4 536F7572 		.ascii	"Source\\bsw\\FreeRTOS\\src\\tasks.c\000"
 12117      63655C62 
 12117      73775C46 
 12117      72656552 
 12117      544F535C 
 12118              	.LASF195:
 12119 0ee4 78546173 		.ascii	"xTaskNotifyWait\000"
 12119      6B4E6F74 
 12119      69667957 
 12119      61697400 
 12120              	.LASF194:
 12121 0ef4 756C5265 		.ascii	"ulReturn\000"
 12121      7475726E 
 12121      00
 12122              	.LASF69:
 12123 0efd 7854696D 		.ascii	"xTimeOnEntering\000"
 12123      654F6E45 
 12123      6E746572 
 12123      696E6700 
 12124              	.LASF192:
 12125 0f0d 756C5461 		.ascii	"ulTaskNotifyTake\000"
 12125      736B4E6F 
 12125      74696679 
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 333


 12125      54616B65 
 12125      00
 12126              	.LASF184:
 12127 0f1e 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 12127      6B507269 
 12127      6F726974 
 12127      79446973 
 12127      696E6865 
 12128              	.LASF47:
 12129 0f36 75785072 		.ascii	"uxPriority\000"
 12129      696F7269 
 12129      747900
 12130              	.LASF178:
 12131 0f41 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 12131      736B4765 
 12131      74537461 
 12131      636B4869 
 12131      67685761 
 12132              	.LASF187:
 12133 0f5d 75785072 		.ascii	"uxPriorityToUse\000"
 12133      696F7269 
 12133      7479546F 
 12133      55736500 
 12134              	.LASF98:
 12135 0f6d 70634E61 		.ascii	"pcName\000"
 12135      6D6500
 12136              	.LASF121:
 12137 0f74 75785461 		.ascii	"uxTaskPriorityGet\000"
 12137      736B5072 
 12137      696F7269 
 12137      74794765 
 12137      7400
 12138              	.LASF170:
 12139 0f86 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12139      6B536574 
 12139      54696D65 
 12139      4F757453 
 12139      74617465 
 12140              	.LASF197:
 12141 0f9b 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 12141      7473546F 
 12141      436C6561 
 12141      724F6E45 
 12141      78697400 
 12142              	.LASF26:
 12143 0faf 55426173 		.ascii	"UBaseType_t\000"
 12143      65547970 
 12143      655F7400 
 12144              	.LASF22:
 12145 0fbb 646F7562 		.ascii	"double\000"
 12145      6C6500
 12146              	.LASF20:
 12147 0fc2 75696E74 		.ascii	"uint32_t\000"
 12147      33325F74 
 12147      00
 12148              	.LASF168:
 12149 0fcb 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
ARM GAS  C:\Users\Reza\AppData\Local\Temp\ccfvW8Ub.s 			page 334


 12149      6B52656D 
 12149      6F766546 
 12149      726F6D55 
 12149      6E6F7264 
 12150              	.LASF157:
 12151 0fed 70756C53 		.ascii	"pulStack\000"
 12151      7461636B 
 12151      00
 12152              	.LASF104:
 12153 0ff6 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12153      6E697469 
 12153      616C6973 
 12153      65546173 
 12153      6B4C6973 
 12154              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
